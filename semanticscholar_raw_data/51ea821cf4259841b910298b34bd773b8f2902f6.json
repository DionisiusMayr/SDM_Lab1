{"paperId": "51ea821cf4259841b910298b34bd773b8f2902f6", "publicationVenue": {"id": "d80d58be-58fc-4181-a397-5ac6fd976a47", "name": "ACM Symposium on Applied Computing", "type": "conference", "alternate_names": ["Sel Area Cryptogr", "Int Conf Sel area Cryptogr", "International Conference on Selected areas in Cryptography", "ACM Symp Appl Comput", "Selected Areas in Cryptography", "Symposium on Applied Computing", "SAC", "Symp Appl Comput"], "url": "https://www.acm.org/publications", "alternate_urls": ["http://sacworkshop.org/"]}, "title": "Stateful Adaptive Streams with Approximate Computing and Elastic Scaling", "abstract": "The model of approximate computing can be used to increase performance or optimize resource usage in stream and graph processing. It can be used to satisfy performance requirements (e.g., throughput, lag) in stream processing by reducing the effort that applications need to process datasets. There are currently multiple stream processing platforms, and most of them do not natively support approximate results. A recent one, Stateful Functions, is an API that uses Flink to enable developers to easily build stream and graph processing applications. It also retains Flink's features like stateful computations, fault-tolerance, scalability, control events and its graph processing library Gelly. Herein we present Approxate, an extension over this platform to support approximate results. It can also support more efficient stream and graph processing by allocating available resources adaptively, driven by user-defined requirements on throughput, lag, and latency. This extension enables flexibility in computational trade-offs such as trading accuracy for performance. The user can choose which metrics should be guaranteed at the cost of others, and/or the accuracy. Approxate incorporates approximate computing (using load shedding) with adaptive accuracy and resource manegement in state-of-the-art stream processing platforms, which are not targeted in other relevant related work. It does not require significant modifications to application code, and minimizes imbalance in data source representation when dropping events.", "venue": "ACM Symposium on Applied Computing", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2023-03-27", "journal": {"name": "Proceedings of the 38th ACM/SIGAPP Symposium on Applied Computing"}, "authors": [{"authorId": "2072777764", "name": "Jo\u00e3o Francisco"}, {"authorId": "40389006", "name": "Miguel E. Coimbra"}, {"authorId": "2275920", "name": "P. Neto"}, {"authorId": "3247322", "name": "Felix Freitag"}, {"authorId": "145894365", "name": "L. Veiga"}], "citations": []}
