{"paperId": "d29e8643affd5d3ee99a8cdd1292bed7ffd38804", "publicationVenue": {"id": "911e7332-8ea8-4e9d-bc20-5572a2523f92", "name": "International Middleware Conference", "type": "conference", "alternate_names": ["Middleware", "ACM/IFIP/USENIX int conf Middlew", "ACM/IFIP/USENIX international conference on Middleware", "Int Middlew Conf"], "url": "https://dl.acm.org/conference/middleware/proceedings"}, "title": "Memory at your service: fast memory allocation for latency-critical services", "abstract": "Co-location and memory sharing between latency-critical services, such as key-value store and web search, and best-effort batch jobs is an appealing approach to improving memory utilization in multi-tenant datacenter systems. However, we find that the very diverse goals of job co-location and the GNU/Linux system stack can lead to severe performance degradation of latency-critical services under memory pressure in a multi-tenant system. We address memory pressure for latency-critical services via fast memory allocation and proactive reclamation. We find that memory allocation latency dominates the overall query latency, especially under memory pressure. We analyze the default memory management mechanism provided by GNU/Linux system stack and identify the reasons why it is inefficient for latency-critical services in a multi-tenant system. We present Hermes, a fast memory allocation mechanism in user space that adaptively reserves memory for latency-critical services. It advises Linux OS to proactively reclaim memory of batch jobs. We implement Hermes in GNU C Library. Experimental result shows that Hermes reduces the average and the 99th percentile memory allocation latency by up to 54.4% and 62.4% for a micro benchmark, respectively. For two real-world latency-critical services, Hermes reduces both the average and the 99th percentile tail query latency by up to 40.3%. Compared to the default Glibc, jemalloc and TCMalloc, Hermes reduces Service Level Objective violation by up to 84.3% under memory pressure.", "venue": "International Middleware Conference", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle"], "publicationDate": "2021-09-07", "journal": {"name": "Proceedings of the 22nd International Middleware Conference"}, "authors": [{"authorId": "40377061", "name": "Aidi Pi"}, {"authorId": "11447097", "name": "Junxian Zhao"}, {"authorId": "1891284", "name": "Shaoqi Wang"}, {"authorId": "46224002", "name": "Xiaobo Zhou"}], "citations": [{"paperId": "1aa236c29ecb81e613604eb7546b372551cf9c12", "title": "AltOOM: A Data-driven Out of Memory Root Cause Identification Strategy"}, {"paperId": "ad6588e35f91600c88050791e81bcc0bfedeae01", "title": "Memory Allocation Strategy in Edge Programmable Logic Controllers Based on Dynamic Programming and Fixed-Size Allocation"}, {"paperId": "ad72d157a1e95a8d453cc1e57e62d481338c2653", "title": "Let It Go: Relieving Garbage Collection Pain for Latency Critical Applications in Golang"}, {"paperId": "3604702a4ecc09c6c019aad4ffe7ac065d50656e", "title": "Improving Concurrent GC for Latency Critical Services in Multi-tenant Systems"}, {"paperId": "3e46e3f8ff04807067835d633e8007beee23dabf", "title": "Holmes: SMT Interference Diagnosis and CPU Scheduling for Job Co-location"}]}
