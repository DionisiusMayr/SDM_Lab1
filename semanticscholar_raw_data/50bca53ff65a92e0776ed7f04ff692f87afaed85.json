{"paperId": "50bca53ff65a92e0776ed7f04ff692f87afaed85", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "Graphical Join: A New Physical Join Algorithm for RDBMSs", "abstract": "Join operations (especially n-way, many-to-many joins) are known to be time- and resource-consuming. At large scales, with respect to table and join-result sizes, current state of the art approaches (in-cluding both binary-join plans which use Nested-loop/Hash/Sort-merge Join algorithms or, alternatively, worst-case optimal join algorithms (WOJAs)), may even fail to produce any answer given reasonable resource and time constraints. In this work, we introduce a new approach for n-way equi-join processing, the Graphical Join (GJ). The key idea is two-fold: First, to map the physical join computation problem to PGMs and introduce tweaked inference algorithms which can compute a Run-Length Encoding (RLE) based join-result summary, entailing all statistics necessary to materialize the join result. Second, and most importantly, to show that a join algorithm, like GJ, which produces the above join-result summary and then desummarizes it, can introduce large performance bene fi ts in time and space. Comprehensive experimentation is undertaken with join queries from the JOB, TPCDS, and lastFM datasets, comparing GJ against PostgresQL and MonetDB and a state of the art WOJA implemented within the Umbra system. The results for in-memory join computation show performance improvements up to 64 \u00d7 , 388 \u00d7 , and 6 \u00d7 faster than PostgreSQL, MonetDB and Um- bra, respectively. For on-disk join computation, GJ is faster than PostgreSQL, MonetDB and Umbra by up to 820 \u00d7 , 717 \u00d7 and 165 \u00d7 , re- spectively. Furthermore, GJ space needs are up to 21,488 \u00d7 , 38,333 \u00d7 , and 78,750 \u00d7 smaller than PostgresQL, MonetDB, and Umbra, re- spectively.", "venue": "arXiv.org", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2022-06-21", "journal": {"name": "ArXiv", "volume": "abs/2206.10435"}, "authors": [{"authorId": "2034659", "name": "A. Shanghooshabad"}, {"authorId": "1732298", "name": "P. Triantafillou"}], "citations": [{"paperId": "346f04a7c19588b13fb64db13e3e40961dedc614", "title": "SieveJoin: Boosting Multi-Way Joins with Reusable Bloom Filters"}]}
