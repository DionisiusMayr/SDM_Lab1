{"paperId": "c0e5213e9747c46bf5f4e23ff337e84947699cb9", "publicationVenue": {"id": "1124d164-490d-4da9-b0c2-ce8a8dc98202", "name": "BigData Congress [Services Society]", "type": "conference", "alternate_names": ["BigData", "Bigdata Congr [services Soc", "IEEE Int Conf Big Data", "IEEE International Conference on Big Data", "Int Congr Big Data", "International Congress on Big Data", "Bigdata Congr", "BigData Congress"]}, "title": "Compile-Time Code Generation for Embedded Data-Intensive Query Languages", "abstract": "Many emerging Big Data programming environments, such as Spark and Flink, provide powerful APIs that are inspired by functional programming. However, because of the complexity involved in developing and fine-tuning data analysis applications using the provided APIs, many programmers prefer to use declarative languages, such as Hive and Spark SQL, to code their distributed applications. Unfortunately, current data analysis query languages, which are typically based on the relational model, cannot effectively capture the rich data types and computations required for complex data analysis applications. Furthermore, these query languages are not well-integrated with the host programming language, as they are based on an incompatible data model, and are checked for correctness at run-time, which results in a significantly longer program development time. To address these shortcomings, we introduce a new query language for data-intensive scalable computing, called DIQL, that is deeply embedded in Scala, and a query optimization framework that optimizes and translates DIQL queries to byte code at compile-time. In contrast to other query languages, our query embedding eliminates impedance mismatch as any Scala code can be seamlessly mixed with SQL-like syntax, without having to add any special declaration. DIQL supports nested collections and hierarchical data and allows query nesting at any place in a query. With DIQL, programmers can express complex data analysis tasks, such as PageRank and matrix factorization, using SQL-like syntax exclusively. The DIQL query optimizer can find any possible join in a query, including joins hidden across deeply nested queries, thus unnesting any form of query nesting. Currently, DIQL can run on three Big Data platforms: Apache Spark, Apache Flink, and Twitter's Cascading/Scalding.", "venue": "BigData Congress [Services Society]", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2018-07-01", "journal": {"name": "2018 IEEE International Congress on Big Data (BigData Congress)", "pages": "1-8"}, "authors": [{"authorId": "1746298", "name": "L. Fegaras"}, {"authorId": "51295778", "name": "Md Hasanuzzaman Noor"}], "citations": [{"paperId": "b531e779cedc0789bd5144a8860da35b5de85d77", "title": "Efficient Iterative Programs with Distributed Data Collections"}, {"paperId": "d2d1248446703603ad9355ef83e5892412e3efa5", "title": "Handling Iterations in Distributed Dataflow Systems"}, {"paperId": "20464cd1501b838011a984deecdf6cbc3a77494f", "title": "The Power of Nested Parallelism in Big Data Processing \u0096 Hitting Three Flies with One Slap \u0096"}, {"paperId": "b4878bafddbdad4376fe76e4ecd2f9be5650130f", "title": "Scalable Querying of Nested Data"}, {"paperId": "eb1b4896e07ddc41e3fdc49b3ca38bf0f00a6441", "title": "On the Optimization of Iterative Programming with Distributed Data Collections"}, {"paperId": "3081f9ae221eb5ba22a595b2cbb2afcfa240c8ec", "title": "Translation of array-based loops to distributed data-parallel programs"}, {"paperId": "248d006a6885bbf8e4825c9f866bbf54069baf80", "title": "Representations and Optimizations for Embedded Parallel Dataflow Languages"}, {"paperId": "2c8156f879a8ac7b31a27dbe19e32d957b7f7487", "title": "Scalable Linear Algebra Programming for Big Data Analysis"}, {"paperId": "855aa04958b3765ef18e04ae9e30db44df95f860", "title": "An Algebra with a Fixpoint Operator for Distributed Data Collections"}, {"paperId": "43e541514d82fa8606cf389d695906b7fc569f0a", "title": "Compile-Time Query Optimization for Big Data Analytics"}, {"paperId": "372b32aa1c609bbfc5efa3496b18c3038ef81d99", "title": "Edinburgh Research Explorer Scalable Querying of Nested Data"}]}
