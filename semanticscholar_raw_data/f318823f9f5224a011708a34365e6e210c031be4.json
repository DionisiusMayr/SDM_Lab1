{"paperId": "f318823f9f5224a011708a34365e6e210c031be4", "publicationVenue": {"id": "43893b55-fde6-4e2b-9d2e-c15a669a1f94", "name": "ACM Symposium on Parallelism in Algorithms and Architectures", "type": "conference", "alternate_names": ["SPAA", "ACM Symposium on Parallel Algorithms and Architectures", "ACM Symp Parallelism Algorithm Archit", "ACM Symp Parallel Algorithm Archit"], "url": "http://www.spaa-conference.org/"}, "title": "Location-Sensitive String Problems in MPC", "abstract": "A suffix tree is a trie-like data structure that stores every suffix of an input string of length n. Finding the Suffix Tree of a given string is a well-studied and classic problem. A compressed suffix tree is constructible in O(n) time using the well-known algorithm of McCreight (JACM, 1976). Suffix trees alongside with hashing are two powerful tools in solving location-sensitive string problems. Many well-studied fundamental string problems such as String Matching, Longest Palindrome Substring (LPS), Longest Common Substring (LCS), and Longest Common Prefix (LCP) queries are location-sensitive and have linear time solutions via reductions to suffix tree. Inspired by suffix trees, we study location-sensitive string problems LCP, LPS, and LCS in the Massively Parallel Computation (MPC) model. Our algorithms extensively utilize a novel data structure for answering O(n1 + \u03b5) arbitrary LCPqueries, called an LCPQ oracle, in O(1) rounds and with \u00d5(n1 + \u03b5) total memory. Using our LCPQ oracle we are able to give the first O(1)-round, \u00d5(n) total memory algorithm in MPC for LPS and an O(1)-round LCS solution using \u00d5(n1 + \u03b5) total memory, beating previous state-of-the-art techniques for both problems. Furthermore, we give an O(1/\u03b5)-round MPC algorithm for constructing suffix arrays and suffix trees utilizing our LCPQ oracle, and demonstrate reductions for LPS and LCS to suffix tree in O(1) rounds of MPC. Finally, we show that in the Adaptive Massively Parallel Computation (AMPC) model, we can build a fully-functional suffix tree for a given input string in O(1) rounds and with \u00d5(n) total memory for any constant \u03b5 > 0.", "venue": "ACM Symposium on Parallelism in Algorithms and Architectures", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2023-06-17", "journal": {"name": "Proceedings of the 35th ACM Symposium on Parallelism in Algorithms and Architectures"}, "authors": [{"authorId": "47049156", "name": "Jacob Gilbert"}, {"authorId": "1704161", "name": "M. Hajiaghayi"}, {"authorId": "48985250", "name": "Hamed Saleh"}, {"authorId": "3087608", "name": "Saeed Seddighin"}], "citations": []}
