{"paperId": "2c8156f879a8ac7b31a27dbe19e32d957b7f7487", "publicationVenue": {"id": "74f47cf8-2839-4a56-959a-524dd0ed9e3e", "name": "International Conference on Extending Database Technology", "type": "conference", "alternate_names": ["Int Conf Extending Database Technol", "Extending Database Technology", "Extending Database Technol", "EDBT"], "url": "http://www.edbt.org/"}, "title": "Scalable Linear Algebra Programming for Big Data Analysis", "abstract": "Arrays are very important data structures for many data-centric and scientific applications. One of the most effective representations of large dense arrays in a distributed setting is a block array, such as a tiled matrix, which is a distributed collection of non-overlapping dense array blocks. Although there are many linear algebra libraries for machine learning that support distributed block arrays and provide an optimal implementation for many array operations, these libraries do not support ad-hoc array programming and customized storage structures. Imperative programs with loops and array indexing, on the other hand, are more powerful as they allow arbitrary array computations but are hard to parallelize and convert to distributed programs. Our goal is to provide an SQL-like abstraction for data-parallel distributed array computations that is expressive enough to capture a large class of array computations and can be compiled to efficient data-parallel distributed code. Our abstraction is a mono-lithic array construction in the form of an array comprehension that is as expressive as SQL by supporting a group-by syntax that allows us to capture many array computations in declarative form. We present rules for translating array comprehensions on block arrays to data-parallel distributed code that can run on Apache Spark. We describe a comprehensive set of effective optimizations that can produce very efficient translations, such as the optimal block matrix multiplication algorithm, even though they are oblivious to linear algebra operations. Finally, we justify our claims by evaluating the performance of our generated code on Apache Spark relative to Spark MLlib.", "venue": "International Conference on Extending Database Technology", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null, "journal": {"pages": "313-324"}, "authors": [{"authorId": "1746298", "name": "L. Fegaras"}], "citations": [{"paperId": "0ddbe0b22ce809628c2a942f668d15985567d346", "title": "Scalable Tensors for Big Data Analytics"}]}
