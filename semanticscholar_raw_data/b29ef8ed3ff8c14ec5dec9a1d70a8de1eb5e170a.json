{"paperId": "b29ef8ed3ff8c14ec5dec9a1d70a8de1eb5e170a", "publicationVenue": {"id": "57cfa558-a4cd-4f6d-8f7e-9a3bd853b969", "name": "International Conference/Workshop on Automation of Software Test", "type": "conference", "alternate_names": ["Int Conf Autom Softw Test", "AST", "Automation of Software Test", "Autom Softw Test"]}, "title": "Probe-based Syscall Tracing for Efficient and Practical File-level Test Traces", "abstract": "Efficiently collecting per-test execution traces is a common prerequisite of dynamic regression test optimization techniques. However, as these test traces are typically recorded through language-specific code instrumentation, non-code artifacts and multi-language source code are usually not included. In contrast, more complete test traces can be obtained by instrumenting operating system calls and thereby tracing all accessed files during a test\u2019s execution. Yet, existing test optimization techniques that use syscall tracing are impractical as they either modify the Linux kernel or operate in user space, thus raising transferability, performance, and security concerns. Recent advances in operating system development provide versatile, lightweight, and safe kernel instrumentation frameworks: They allow to trace syscalls by instrumenting probes in the operating system kernel. Probe-based Syscall Tracing (ProST), our novel technique, harnesses this potential to collect file-level test traces that go beyond language boundaries and consider non-code artifacts. To evaluate ProST\u2019s efficiency and the completeness of obtained test traces, we perform an empirical study on 25 multi-language open-source software projects and compare our approach to existing language-specific instrumentation techniques. Our results show that most studied projects use source files from multiple languages (22/25) or non-code artifacts during testing (22/25) that are missed by language-specific techniques. With the low execution time overhead of 4.6% compared to non-instrumented test execution, ProST is more efficient than language-specific instrumentation. Furthermore, it collects on average 89% more files on top of those collected by language-specific techniques. Consequently, ProST paves the way for efficiently extracting valuable information through dynamic analysis to better understand and optimize testing in multi-language software systems. CCS CONCEPTS \u2022 Software and its engineering \u2192 Software testing and debugging.", "venue": "International Conference/Workshop on Automation of Software Test", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2022-05-01", "journal": {"name": "2022 IEEE/ACM International Conference on Automation of Software Test (AST)", "pages": "126-137"}, "authors": [{"authorId": "2064171309", "name": "Daniel Elsner"}, {"authorId": "2167629167", "name": "Roland Wuersching"}, {"authorId": "2008213482", "name": "Markus Schnappinger"}, {"authorId": "144658639", "name": "A. Pretschner"}], "citations": [{"paperId": "ab7366f88da620a8b8677130ffdad06b9b656d58", "title": "BinaryRTS: Cross-language Regression Test Selection for C++ Binaries in CI"}]}
