{"paperId": "41e9db2a9c2d96fbeedccef95700048726efddb8", "publicationVenue": {"id": "0471222d-7141-46cf-8bf3-e7e1676553d1", "name": "IEEE International Symposium on Software Reliability Engineering", "type": "conference", "alternate_names": ["IEEE Int Symp Softw Reliab Eng", "Int Symp Softw Reliab Eng", "International Symposium on Software Reliability Engineering", "ISSRE"], "url": "http://www.wikicfp.com/cfp/program?id=1756"}, "title": "How Do Developers Act on Static Analysis Alerts? An Empirical Study of Coverity Usage", "abstract": "Static analysis tools (SATs) often fall short of developer satisfaction despite their many benefits. An understanding of how developers in the real-world act on the alerts detected by SATs can help improve the utility of these tools and determine future research directions. The goal of this paper is to aid researchers and tool makers in improving the utility of static analysis tools through an empirical study of developer action on the alerts detected by Coverity, a state-of-the-art static analysis tool. In this paper, we analyze five open source projects as case studies (Linux, Firefox, Samba, Kodi, and Ovirt-engine) that have been actively using Coverity over a period of at least five years. We investigate the alert occurrences and developer triage of the alerts from the Coverity database; identify the alerts that were fixed through code changes (i.e. actionable) by mining the commit history of the projects; analyze the time an alert remain in the code base (i.e. lifespan) and the complexity of code changes (i.e. fix complexity) in fixing the alert. We find that 27.4% to 49.5% (median: 36.7%) of the alerts are actionable across projects, a rate higher than previously reported. We also find that the fixes of Coverity alerts are generally low in complexity (2 to 7 lines of code changes in the affected file, median: 4). However, developers still take from 36 to 245 days (median: 96) to fix these alerts. Finally, our data suggest that severity and fix complexity may correlate with an alert's lifespan in some of the projects.", "venue": "IEEE International Symposium on Software Reliability Engineering", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-10-01", "journal": {"name": "2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)", "pages": "323-333"}, "authors": [{"authorId": "51128261", "name": "Nasif Imtiaz"}, {"authorId": "49358427", "name": "Brendan Murphy"}, {"authorId": "144426849", "name": "L. Williams"}], "citations": [{"paperId": "8416a403614e2793b3b64aa11fec18a557101567", "title": "Mitigating False Positive Static Analysis Warnings: Progress, Challenges, and Opportunities"}, {"paperId": "37f7ddcabcb20f0a85bd1d5a2604a60776b975d4", "title": "Unhelpful Assumptions in Software Security Research"}, {"paperId": "1d5f6a73066453e9afb6bb752e02f6a38425d4bf", "title": "An Empirical Study on the Use of Static Analysis Tools in Open Source Embedded Software"}, {"paperId": "76ad8c831b3c21543d7e79b5a54d9321316f5cf4", "title": "Understanding Why and Predicting When Developers Adhere to Code-Quality Standards"}, {"paperId": "5690f38ffdbe5af1ee418fba381a3c8ec33e0a8e", "title": "A Usability Evaluation of AFL and libFuzzer with CS Students"}, {"paperId": "03e0d8d1839045a6fd25080bbfa945b2801a2f3f", "title": "Finding Unstable Code via Compiler-Driven Differential Testing"}, {"paperId": "c147ffa9a742ddb6649822dd06d610af60692ec2", "title": "Code-line-level Bugginess Identification: How Far have We Come, and How Far have We Yet to Go?"}, {"paperId": "7c6e0db1e9f578e0101acbf29b0ce5fdae4b3648", "title": "Software Defect Detection Method Based on Graph Structure and Deep Neural Network"}, {"paperId": "2adc35844ea8eb282bb73ce80ee2ca897f931d29", "title": "HTFuzz: Heap Operation Sequence Sensitive Fuzzing"}, {"paperId": "541115cd797bcbfe636fe753b179a89e6e250dd8", "title": "Automated Change Rule Inference for Distance-Based API Misuse Detection"}, {"paperId": "7842809c6c15f713aea8dc5ce3d1f39774a705f7", "title": "Analyzing Linter Usage and Warnings Through Mining Software Repositories: A Longitudinal Case Study of JavaScript Packages"}, {"paperId": "f44e90a6ba62d00f85b74c2a5719bf5b6c8a6a92", "title": "How to Find Actionable Static Analysis Warnings: A Case Study With FindBugs"}, {"paperId": "e1cec46d862020cfb73567ab40567f81e6b47e86", "title": "Find bugs in static bug finders"}, {"paperId": "195ce0d51b8b8c823cfeebcb9db696d6ef2538a9", "title": "Open or Sneaky? Fast or Slow? Light or Heavy?: Investigating Security Releases of Open Source Packages"}, {"paperId": "c4ef2f3e6b162e9e648b8bdb724b61b415a8907b", "title": "An Adaptive Rank Aggregation-Based Ensemble Multi-Filter Feature Selection Method in Software Defect Prediction"}, {"paperId": "6e33e978d373c38925712ed1c98f9316fbecd0e5", "title": "An Approach to Detecting Bugs in Pattern-Based Bug Detectors"}, {"paperId": "c6257437c8c7b9c20ced26b62a8a5849a122fcfa", "title": "IDE support for cloud-based static analyses"}, {"paperId": "afc455aebe2b02a02dae472df19bdcbf0d45c136", "title": "Security Notifications in Static Analysis Tools: Developers\u2019 Attitudes, Comprehension, and Ability to Act on Them"}, {"paperId": "efb1f136ed26cbe91239912cdcf4b73305aa7a3a", "title": "Memory Error Detection in Security Testing"}, {"paperId": "9acbe49d5416e45d089253f2d6f161e8c4a3994a", "title": "Sorald: Automatic Patch Suggestions for SonarQube Static Analysis Violations"}, {"paperId": "69a401cdde593aa39223201a3bd40062eada6463", "title": "Follow Your Nose - Which Code Smells are Worth Chasing?"}, {"paperId": "e8f50c91298ed230e5ea59762396325110c7f18d", "title": "A Critical Comparison on Six Static Analysis Tools: Detection, Agreement, and Precision"}, {"paperId": "495be384a8db4edfda223b921442bfb250aeb4fc", "title": "ANALYSIS AND COMPARATIVE RESEARCHES OF METHODS FOR IMPROVING THE SOFTWARE"}, {"paperId": "fec5fd0d466de52e9fe03d8efffba47ee70fbb11", "title": "Fix that Fix Commit: A real-world remediation analysis of JavaScript projects"}, {"paperId": "6ed7414320e768ee9121b6eb3955220bd0fe94d6", "title": "The Journal of Systems & Software"}, {"paperId": "806d821411fde3c4ece0d9497c246adc028db1c2", "title": "Why Can't Johnny Fix Vulnerabilities: A Usability Evaluation of Static Analysis Tools for Security"}]}
