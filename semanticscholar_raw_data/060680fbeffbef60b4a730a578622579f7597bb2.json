{"paperId": "060680fbeffbef60b4a730a578622579f7597bb2", "publicationVenue": {"id": "138e58fc-8643-41c2-a92c-068ea4f4c607", "name": "PeerJ Computer Science", "alternate_names": ["Peerj Comput Sci"], "issn": "2376-5992", "url": "https://peerj.com/archives/?journal=cs", "alternate_urls": ["https://peerj.com/computer-science/", "http://peerj.com/cs"]}, "title": "Using application benchmark call graphs to quantify and improve the practical relevance of microbenchmark suites", "abstract": "Performance problems in applications should ideally be detected as soon as they occur, i.e., directly when the causing code modification is added to the code repository. To this end, complex and cost-intensive application benchmarks or lightweight but less relevant microbenchmarks can be added to existing build pipelines to ensure performance goals. In this paper, we show how the practical relevance of microbenchmark suites can be improved and verified based on the application flow during an application benchmark run. We propose an approach to determine the overlap of common function calls between application and microbenchmarks, describe a method which identifies redundant microbenchmarks, and present a recommendation algorithm which reveals relevant functions that are not covered by microbenchmarks yet. A microbenchmark suite optimized in this way can easily test all functions determined to be relevant by application benchmarks after every code change, thus, significantly reducing the risk of undetected performance problems. Our evaluation using two time series databases shows that, depending on the specific application scenario, application benchmarks cover different functions of the system under test. Their respective microbenchmark suites cover between 35.62% and 66.29% of the functions called during the application benchmark, offering substantial room for improvement. Through two use cases\u2014removing redundancies in the microbenchmark suite and recommendation of yet uncovered functions\u2014we decrease the total number of microbenchmarks and increase the practical relevance of both suites. Removing redundancies can significantly reduce the number of microbenchmarks (and thus the execution time as well) to ~10% and ~23% of the original microbenchmark suites, whereas recommendation identifies up to 26 and 14 newly, uncovered functions to benchmark to improve the relevance. By utilizing the differences and synergies of application benchmarks and microbenchmarks, our approach potentially enables effective software performance assurance with performance tests of multiple granularities.", "venue": "PeerJ Computer Science", "year": 2021, "fieldsOfStudy": ["Computer Science", "Medicine"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-05-28", "journal": {"name": "PeerJ Computer Science", "volume": "7"}, "authors": [{"authorId": "51204829", "name": "M. Grambow"}, {"authorId": "10420961", "name": "Christoph Laaber"}, {"authorId": "1910406", "name": "P. Leitner"}, {"authorId": "3077067", "name": "David Bermbach"}], "citations": [{"paperId": "e47c9293a3a546b8c7ef5c1e28711936fadf7658", "title": "The Early Microbenchmark Catches the Bug - Studying Performance Issues Using Micro- and Application Benchmarks"}, {"paperId": "fde0535d71e2e9e9273e09d3b4e3bc0591e1607e", "title": "Using Microbenchmark Suites to Detect Application Performance Changes"}, {"paperId": "4a3c215805db716f731dc574e3407fcd3270dcc6", "title": "Evaluating Search-Based Software Microbenchmark Prioritization"}, {"paperId": "25a6a38bb83c26fe0f26ec106af53e32735dc296", "title": "Applying test case prioritization to software microbenchmarks"}]}
