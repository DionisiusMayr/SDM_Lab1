{"paperId": "8b636c628393f6abb43f4fabf06c5ebf3de3080d", "publicationVenue": {"id": "07ba6a02-fa13-4c5f-b428-795730d75e53", "name": "Big Data", "type": "conference", "alternate_names": ["Int Conf Big Data", "International Conference on Big Data"], "issn": "2167-6461", "url": "http://www.liebertonline.com/", "alternate_urls": ["https://home.liebertpub.com/publications/big-data/611/overview"]}, "title": "SOOM: Sort-Based Optimizer for Big Data Multi-Query", "abstract": "Mostly, sorting of data is a common operation in many applications, which causes the consumption of resources and thus leads to computation overheads. Regarding the context of Big Data multi-query, the shared sort operations are fairly large, which incur high-cost I/Os whether explicit or implicit. In particular, Big Data multi-query, including aggregation and sort operations, takes long execution time due to reshuffle of the same data multiple times using similar tasks. Therefore, exploiting the sharing data and the sharing sort opportunities of similar tasks can offer the possibility of reusing the previous results to optimize multi-query. For considering sharing data, our previous work, Multi-Query Optimization Using Tuple Size and Histogram (MOTH) system, has been introduced to consider the granularity of the sharing data opportunities among multi-query. However, time overheads regarding redundant data in-network movement (i.e., shuffling time to transfer intermediate data for sort operations) have not been considered. Therefore, the MOTH system has been extended to SOOM (Sort-Based Optimizer over MOTH) system to exploit sharing sort opportunities, including explicit sorts of sort queries and implicit sorts of aggregation queries. The proposed SOOM system consists of two additional modules to exploit sharing sort opportunities, namely query explorer and sort exploiter, which leverage our existing MOTH system to fulfill optimizing multiple aggregation and sort queries. The experimental evaluation has shown that the SOOM system outperforms the naive and the state-of-art techniques regarding query execution time among queries by 45% and 30%, respectively, while introducing maximal intermediate data size reduction by 67% and 61% in average, respectively, over Hadoop-like infrastructures.", "venue": "Big Data", "year": 2020, "fieldsOfStudy": ["Medicine", "Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-01-30", "journal": {"name": "Big data"}, "authors": [{"authorId": "3298018", "name": "Radhya Sahal"}, {"authorId": "39023607", "name": "M. Khafagy"}, {"authorId": "2096096", "name": "F. Omara"}], "citations": [{"paperId": "955442a721a0c324c2cbf379de030653c6376938", "title": "A survey on Automatic Query Optimization Approaches in Multi Store Systems for Big Data Analytics"}, {"paperId": "61337f33a4ed84a0683a22acda599b52f06efd46", "title": "Exploiting Reused-Based Sharing Work Opportunities in Big Data Multiquery Optimization with Flink"}, {"paperId": "82d83208085f37963a5f0e84fa11c90fa5ebc448", "title": "Digital Twins Collaboration for Automatic Erratic Operational Data Detection in Industry 4.0"}, {"paperId": "15bfc384fc8ef43c2c4f3d43a4905f5e690406e6", "title": "Exploiting Sharing Join Opportunities in Big Data Multiquery Optimization with Flink"}]}
