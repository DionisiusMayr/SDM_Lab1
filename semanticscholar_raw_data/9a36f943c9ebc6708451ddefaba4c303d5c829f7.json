{"paperId": "9a36f943c9ebc6708451ddefaba4c303d5c829f7", "publicationVenue": null, "title": "Build system with lazy retrieval for Java projects", "abstract": "In the modern-day development, projects use Continuous Integration Services (CISs) to execute the build for every change in the source code. To ensure that the project remains correct and deployable, a CIS performs a clean build each time. In a clean environment, a build system needs to retrieve the project's dependencies (e.g., guava.jar). The retrieval, however, can be costly due to dependency bloat: despite a project using only a few files from each library, the existing build systems still eagerly retrieve all the libraries at the beginning of the build. This paper presents a novel build system, Molly, which lazily retrieves parts of libraries (i.e., files) that are needed during the execution of a build target. For example, the compilation target needs only public interfaces of classes within the libraries and the test target needs only implementation of the classes that are being invoked by the tests. Additionally, Molly generates a transfer script that retrieves parts of libraries based on prior builds. Molly's design requires that we ignore the boundaries set by the library developers and look at the files within the libraries. We implemented Molly for Java and evaluated it on 17 popular open-source projects. We show that test targets (on average) depend on only 9.97% of files in libraries. A variant of Molly speeds up retrieval by 44.28%. Furthermore, the scripts generated by Molly retrieve dependencies, on average, 93.81% faster than the Maven build system.", "venue": "SIGSOFT FSE", "year": 2016, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2016-11-01", "journal": {"name": "Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering"}, "authors": [{"authorId": "145118978", "name": "Ahmet \u00c7elik"}, {"authorId": "69032105", "name": "Alexander Knaust"}, {"authorId": "2174769", "name": "Aleksandar Milicevic"}, {"authorId": "2020926", "name": "Milo\u0161 Gligori\u0107"}], "citations": [{"paperId": "50df3ef1209d88518c5cd4ce9a1289db73d5ed6d", "title": "Understanding the quality and evolution of Android app build systems"}, {"paperId": "9e88a6e3f1068fd4c265966167919d5de70feb55", "title": "HybridCISave: A Combined Build and Test Selection Approach in Continuous Integration"}, {"paperId": "dea3cac9612d5681f0b30579b6df9532ee1548e6", "title": "BuildSonic: Detecting and Repairing Performance-Related Configuration Smells for Continuous Integration Builds"}, {"paperId": "197d83b1a11088a00d3bace219b80df234bbd749", "title": "Which builds are really safe to skip? Maximizing failure observation for build selection in continuous integration"}, {"paperId": "9b30504e3bcb8fd9a8dad15327cfd0fabe4d6e02", "title": "Self-admitted technical debt practices: a comparison between industry and open-source"}, {"paperId": "1fd17127fa6488ccd2d4e39dca8e566a82dc93c7", "title": "Reducing cost in continuous integration with a collection of build selection approaches"}, {"paperId": "e6c8e50fc573b7e2e09da29cc269d97239f1650f", "title": "What Helped, and what did not? An Evaluation of the Strategies to Improve Continuous Integration"}, {"paperId": "714385569284448a5f6e84ae460bb50ffd18197c", "title": "JShrink: in-depth investigation into debloating modern Java applications"}, {"paperId": "862a0bfe6593ec157e3ad7dfd0baee2b2a707b46", "title": "BUILDFAST: History-Aware Build Outcome Prediction for Fast Feedback and Reduced Cost in Continuous Integration"}, {"paperId": "c38c807392aed7d4939686a7e492edd8138e6dcc", "title": "Coverage-Based Debloating for Java Bytecode"}, {"paperId": "e7c86cb4310428d01b0a5d7f321b377dc980c60f", "title": "Trace-based Debloat for Java Bytecode"}, {"paperId": "589a45d2e11720a32974702fba924b1e76acb81e", "title": "Debugging the performance of Maven\u2019s test isolation: experience report"}, {"paperId": "7485ebfd250c34f30be63c03026fe6186db8f07e", "title": "A Cost-efficient Approach to Building in Continuous Integration"}, {"paperId": "4d1a9883d36976032542a4940e602c58133ee43a", "title": "A model for detecting faults in build specifications"}, {"paperId": "7a746db62375f797ae3a58a8ded8adc4e383377a", "title": "A comprehensive study of bloated dependencies in the Maven ecosystem"}, {"paperId": "0abac86aec35f154a6e265c732a34c2debf30e10", "title": "Build Optimization Using Jenkins"}, {"paperId": "1ab0131b55aeea7f8be536b970de111fef786b5a", "title": "Assessing Transition-Based Test Selection Algorithms at Google"}, {"paperId": "ad67e66f0c87d654c5e395717b966eedddf99d5e", "title": "Regression test selection for TizenRT"}, {"paperId": "ab9a5c71542ce30ef877f49c47b832bb830f2018", "title": "Redefining Prioritization: Continuous Prioritization for Continuous Integration"}, {"paperId": "f6ab4267421f480e21c4d9709b62637bcbae45c5", "title": "Regression test selection across JVM boundaries"}, {"paperId": "7f099e5bdae86cdb01d4a1da5678f493ac7266d1", "title": "Usage, costs, and benefits of continuous integration in open-source projects"}, {"paperId": "e7225b06c64dc53445fe2a6317b843e8c65bcb90", "title": "Test case prioritization using build history and test distances: an approach for improving automotive regression testing in continuous integration environments"}, {"paperId": "976561f1629bad578c6120fdefdcf774493d3dc7", "title": "COST-EFFECTIVE TECHNIQUES FOR CONTINUOUS INTEGRATION TESTING"}]}
