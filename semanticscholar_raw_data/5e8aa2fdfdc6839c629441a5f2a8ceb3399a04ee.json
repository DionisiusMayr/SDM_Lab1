{"paperId": "5e8aa2fdfdc6839c629441a5f2a8ceb3399a04ee", "publicationVenue": {"id": "9448f839-459b-45f3-8573-5eff3f032334", "name": "USENIX Annual Technical Conference", "type": "conference", "alternate_names": ["USENIX Annu Tech Conf", "USENIX", "USENIX ATC"], "url": "https://www.usenix.org/conferences/byname/131"}, "title": "Sponge: Fast Reactive Scaling for Stream Processing with Serverless Frameworks", "abstract": "Streaming workloads deal with data that is generated in real-time. This data is often unpredictable and changes rapidly in volume. To deal with these fluctuations, current systems aim to dynamically scale in and out, redistribute, and migrate computing tasks across a cluster of machines. While many prior works have focused on reducing the overhead of system reconfiguration and state migration on pre-allocated cluster resources, these approaches still face significant challenges in meeting latency SLOs at low operational costs, especially upon facing unpredictable bursty loads. In this paper, we propose Sponge, a new stream processing system that enables fast reactive scaling of long-running stream queries by leveraging serverless framework (SF) instances. Sponge absorbs sudden, unpredictable increases in input loads from existing VMs with low latency and cost by taking advantage of the fact that SF instances can be initiated quickly, in just a few hundred milliseconds. Sponge efficiently tracks a small number of metrics to quickly detect bursty loads and make fast scaling decisions based on these metrics. More-over, by incorporating optimization logic at compile-time and triggering fast data redirection and partial-state merging mechanisms at runtime, Sponge avoids optimization and state migration overheads during runtime while efficiently offloading bursty loads from existing VMs to new SF instances. Our evaluation on AWS EC2 and Lambda using the NEXMark benchmark shows that Sponge promptly reacts to bursty input loads, reducing 99 th -percentile tail latencies by 88% on average compared to other stream query scaling methods on VMs. Sponge also reduces cost by 83% compared to methods that over-provision VMs to handle unpredictable bursty loads.", "venue": "USENIX Annual Technical Conference", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null, "journal": {"pages": "301-314"}, "authors": [{"authorId": "31948265", "name": "Won Wook Song"}, {"authorId": "24682327", "name": "Taegeon Um"}, {"authorId": "1767761", "name": "S. Elnikety"}, {"authorId": "2421588", "name": "Myeongjae Jeon"}, {"authorId": "1704157", "name": "Byung-Gon Chun"}], "citations": [{"paperId": "c05af9286bd306bf148818428f7502edcdaa1aa7", "title": "Blaze: Holistic Caching for Iterative Data Processing"}]}
