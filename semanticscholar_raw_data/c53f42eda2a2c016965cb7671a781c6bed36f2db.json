{"paperId": "c53f42eda2a2c016965cb7671a781c6bed36f2db", "publicationVenue": null, "title": "Adaptive Query Execution: Dynamically Rewriting Compiled Queries", "abstract": "Nowadays, analytical database systems use highly sophisticated data processing techniques like query compilation or vectorization to evaluate queries on millions of tuples. In such systems, query runtimes depend on multiple factors like the query execution plan, the underlying hardware platform, and the operator implementation. Anticipating all these factors during query optimization is difficult, and finding the optimal implementation for a query is almost impossible and requires highly accurate cost models and estimations. Adaptive Query Processing overcomes these limitations by interleaving query optimization and query execution phases: An initial exploration phase explores different variations for a query and then chooses the best-performing one to process most of the data. Numerous optimizations are possible, like reordering joins and predicates or switching the operators\u2019 implementations while executing them. However, the number of variations grows with the dynamic optimizations, and compiling all implementations is prohibitively expensive. We, therefore, propose a different approach that avoids recompilations entirely. Our Dynamic Blocks technique compiles the query once and embeds code fragments for all variants into the generated code. When a different variation is needed, we extract the relevant blocks from the original executable and assemble a new executable. Internally our Adaptive Query Processing technique consists of three components: a code generation framework to provide different variations for a query, an optimized compiler for lowering the variants to machine code, and a dynamic execution strategy that chooses the optimal implementation while executing the query. We integrate these three components into the research database system Umbra and implement three dynamic optimizations on top that adapt the query plan. Our results show that Adaptive Query Processing improves execution times in a compiling database system like Umbra by up to 2x.", "venue": "", "year": 2021, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": null, "journal": null, "authors": [{"authorId": "2070677246", "name": "Tobias Schmidt"}], "citations": []}
