{"paperId": "151ff515a83439b6155abe5c74b51243be35bdf0", "publicationVenue": {"id": "a36dc29e-4ea1-4567-b0fe-1c06daf8bee8", "name": "International Conference on Software Engineering", "type": "conference", "alternate_names": ["Int Conf Softw Eng", "ICSE"], "url": "http://www.icse-conferences.org/"}, "title": "A Framework for Checking Regression Test Selection Tools", "abstract": "Regression test selection (RTS) reduces regression testing costs by re-running only tests that can change behavior due to code changes. Researchers and large software organizations recently developed and adopted several RTS tools to deal with the rapidly growing costs of regression testing. As RTS tools gain adoption, it becomes critical to check that they are correct and efficient. Unfortunately, checking RTS tools currently relies solely on limited tests that RTS tool developers manually write. We present RTSCheck, the first framework for checking RTS tools. RTSCheck feeds evolving programs (i.e., sequences of program revisions) to an RTS tool and checks the output against rules inspired by existing RTS test suites. Violations of these rules are likely due to deviations from expected RTS tool behavior, and indicative of bugs in the tool. RTSCheck uses three components to obtain evolving programs: (1) AutoEP automatically generates evolving programs and corresponding tests, (2) DefectsEP uses buggy and fixed program revisions from bug databases, and (3) EvoEP uses sequences of program revisions from actual open-source projects' histories. We used RTSCheck to check three recently developed RTS tools for Java: Clover, Ekstazi, and STARTS. RTSCheck discovered 27 bugs in these three tools.", "venue": "International Conference on Software Engineering", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2019-05-01", "journal": {"name": "2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)", "pages": "430-441"}, "authors": [{"authorId": "8652308", "name": "Chenguang Zhu"}, {"authorId": "3023790", "name": "Owolabi Legunsen"}, {"authorId": "40128780", "name": "A. Shi"}, {"authorId": "2020926", "name": "Milo\u0161 Gligori\u0107"}], "citations": [{"paperId": "e78a2494304248a5b333a1d04659aca32f0bf7b9", "title": "Automated Code-based Test Case Reuse for Software Product Line Testing"}, {"paperId": "00cf787add0f7b31f5ddf41d8d9ece1eb4af46ca", "title": "More Precise Regression Test Selection via Reasoning about Semantics-Modifying Changes"}, {"paperId": "fdff5c66b2f4ce9f129bcdbcf0577f0aaff9a1e7", "title": "Extracting Inline Tests from Unit Tests"}, {"paperId": "5f5824a34dc96e89954519c69e9931e963ce4c32", "title": "Compsuite: A Dataset of Java Library Upgrade Incompatibility Issues"}, {"paperId": "9653e1af0491dbfec6ecab5133fb182156298dad", "title": "Test Selection for Unified Regression Testing"}, {"paperId": "3e44eb98a709aba18743e3ddbbf60eb1a3bada9b", "title": "DIRTS: Dependency Injection Aware Regression Test Selection"}, {"paperId": "ab7366f88da620a8b8677130ffdad06b9b656d58", "title": "BinaryRTS: Cross-language Regression Test Selection for C++ Binaries in CI"}, {"paperId": "9e88a6e3f1068fd4c265966167919d5de70feb55", "title": "HybridCISave: A Combined Build and Test Selection Approach in Continuous Integration"}, {"paperId": "697b5afa4000562683bfad9adaf7ab59e6122000", "title": "Software Evolution Management with Differential Facts"}, {"paperId": "94298763cd373891902e7e5e0b004a490b37eeb5", "title": "Inline Tests"}, {"paperId": "e9a71e07318e4a27880aaaa5e9212332fe53877b", "title": "Evolution-aware detection of order-dependent flaky tests"}, {"paperId": "b971205103f9ae837813bdec890f6b57f590d5a0", "title": "Build System Aware Multi-language Regression Test Selection in Continuous Integration"}, {"paperId": "b29ef8ed3ff8c14ec5dec9a1d70a8de1eb5e170a", "title": "Probe-based Syscall Tracing for Efficient and Practical File-level Test Traces"}, {"paperId": "b2f8399dc3423e4bac9300174b01a55ab1c81f85", "title": "Comparing and Combining Analysis-Based and Learning-Based Regression Test Selection"}, {"paperId": "197d83b1a11088a00d3bace219b80df234bbd749", "title": "Which builds are really safe to skip? Maximizing failure observation for build selection in continuous integration"}, {"paperId": "b821a3defc52bafd2cb439e3696e12ca498d1029", "title": "An empirical comparison of four Java-based regression test selection techniques"}, {"paperId": "b797527285967a76d10481714c3bc63a0900752c", "title": "EvoMe: A Software Evolution Management Engine Based on Differential Factbase"}, {"paperId": "622fe022a2686c94e939b456ba323ca9b6588206", "title": "DIFFBASE: a differential factbase for effective software evolution management"}, {"paperId": "1fd17127fa6488ccd2d4e39dca8e566a82dc93c7", "title": "Reducing cost in continuous integration with a collection of build selection approaches"}, {"paperId": "0eaed669958ba0b1bf570bfdcd3538b42d8ae1f0", "title": "Enhancing Genetic Improvement of Software with Regression Test Selection"}, {"paperId": "e6c8e50fc573b7e2e09da29cc269d97239f1650f", "title": "What Helped, and what did not? An Evaluation of the Strategies to Improve Continuous Integration"}, {"paperId": "e1ffbf0aaaac799d770a5b85007ad1164e2a9861", "title": "Evolutionary Conflict Checking"}, {"paperId": "7485ebfd250c34f30be63c03026fe6186db8f07e", "title": "A Cost-efficient Approach to Building in Continuous Integration"}, {"paperId": "f5e75f8e8c83b8c20e5d7fa23e513860818bd213", "title": "Automated regression unit test generation for program merges"}, {"paperId": "68eb91188d4b34073224b5aadf214396fd2cfba5", "title": "Reflection-aware static regression test selection"}, {"paperId": "08f0e7dd21f9c31314a78f447013bf6576ab3e22", "title": "Resurgence of Regression Test Selection for C++"}, {"paperId": "72764a7c961c3291a90be79939497241423316f1", "title": "Detecting and Fixing Flaky Tests"}, {"paperId": "5144026b171c782785a030b43d7aef7a6d93c029", "title": "Runtime Verification During Testing"}]}
