{"paperId": "d69216947188267d5537ee0f0501b2d960ecc457", "publicationVenue": null, "title": "Finding bugs in database systems via query partitioning", "abstract": "Logic bugs in Database Management Systems (DBMSs) are bugs that cause an incorrect result for a given query, for example, by omitting a row that should be fetched. These bugs are critical, since they are likely to go unnoticed by users. We propose Query Partitioning, a general and effective approach for finding logic bugs in DBMSs. The core idea of Query Partitioning is to, starting from a given original query, derive multiple, more complex queries (called partitioning queries), each of which computes a partition of the result. The individual partitions are then composed to compute a result set that must be equivalent to the original query's result set. A bug in the DBMS is detected when these result sets differ. Our intuition is that due to the increased complexity, the partitioning queries are more likely to stress the DBMS and trigger a logic bug than the original query. As a concrete instance of a partitioning strategy, we propose Ternary Logic Partitioning (TLP), which is based on the observation that a boolean predicate p can either evaluate to TRUE, FALSE, or NULL. Accordingly, a query can be decomposed into three partitioning queries, each of which computes its result on rows or intermediate results for which p, NOT p, and p IS NULL hold. This technique is versatile, and can be used to test WHERE, GROUP BY, as well as HAVING clauses, aggregate functions, and DISTINCT queries. As part of an extensive testing campaign, we found 175 bugs in widely-used DBMSs such as MySQL, TiDB, SQLite, and CockroachDB, 125 of which have been fixed. Notably, 77 of these were logic bugs, while the remaining were error and crash bugs. We expect that the effectiveness and wide applicability of Query Partitioning will lead to its broad adoption in practice, and the formulation of additional partitioning strategies.", "venue": "Proc. ACM Program. Lang.", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-11-13", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 30", "volume": "4"}, "authors": [{"authorId": "2868147", "name": "Manuel Rigger"}, {"authorId": "38319925", "name": "Z. Su"}], "citations": [{"paperId": "428d0ae6be2e3e5146c2ca166fc7e64848929297", "title": "Finding Cross-rule Optimization Bugs in Datalog Engines"}, {"paperId": "321f669f888e43e8f44390985a5da2d3fabe8a7e", "title": "Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Query Transformation"}, {"paperId": "1072e6d03a19b157356c5da57257b2b92eefc68c", "title": "Effective Bug Detection in Graph Database Engines: An LLM-based Approach"}, {"paperId": "c39d40e3127a56a0abe12f2fb1d698ea6ba1724d", "title": "Finding XPath Bugs in XML Document Processors via Differential Testing"}, {"paperId": "ac441cb1810dce8e41d9cd554366b72aa182bf41", "title": "Testing Graph Database Systems via Graph-Aware Metamorphic Relations"}, {"paperId": "b0b3eecc7e3953547ae24a909d5967240c19f373", "title": "Adapting Performance Analytic Techniques in a Real-World Database-Centric System: An Industrial Experience Report"}, {"paperId": "8ea47327053957637ce8782a8b22aad19878dea1", "title": "Property-Based Fuzzing for Finding Data Manipulation Errors in Android Apps"}, {"paperId": "5ff9885778f8ec824beaeb6802af5c82e299f702", "title": "A Comprehensive Survey on Database Management System Fuzzing: Techniques, Taxonomy and Experimental Comparison"}, {"paperId": "cc095f9ce71982a8dcc0ea1b813a7486b3f6c962", "title": "Retromorphic Testing: A New Approach to the Test Oracle Problem"}, {"paperId": "a2a514ed839dafdd0fb76d6c2615f25f35bf8087", "title": "Testing Graph Database Engines via Query Partitioning"}, {"paperId": "df170dd0f26ec903ee0a8d0ad89305ec60a125c5", "title": "Dependency-Aware Metamorphic Testing of Datalog Engines"}, {"paperId": "6c755fc901d0b41a5d73c265f64a5aacf62e83b8", "title": "GDsmith: Detecting Bugs in Cypher Graph Database Engines"}, {"paperId": "e9db272057833ba69d1c6e9ecbb992af02ce25a9", "title": "Detecting Hidden Failures of DBMS: A Comprehensive Metamorphic Relation Output Patterns Approach"}, {"paperId": "a4ec52e8b18e41359cf87097efae760905c27115", "title": "CERT: Finding Performance Issues in Database Systems Through the Lens of Cardinality Estimation"}, {"paperId": "728c97e05665b2e966a1b17abc5d6d4eaf7e136f", "title": "Detecting Logic Bugs of Join Optimizations in DBMS"}, {"paperId": "ec682d9c7d68149dcd8932acd01a751f2f8b5611", "title": "Testing Database Engines via Query Plan Guidance"}, {"paperId": "5724e138fc08329e0baa08d2090d9424df1cb945", "title": "Testing Database Systems via Differential Query Execution"}, {"paperId": "0b083953239d0617b534a0d76762fa8350db4e6f", "title": "Randomized Differential Testing of RDF Stores"}, {"paperId": "605b3d1b6cbcdaab3f2cd9ec0002ec6dd8050c72", "title": "Generating Test Databases for Database-Backed Applications"}, {"paperId": "a9fa1a56ba118fa3b629fc6308d6b5606751f023", "title": "Detecting Isolation Bugs via Transaction Oracle Construction"}, {"paperId": "e10d0a78b6e4dd6e074f925e669bf632b5d48f53", "title": "Finding Bug-Inducing Program Environments"}, {"paperId": "058f7a552121c7417e783c995f8bc584d09b3eff", "title": "Sequence-Oriented DBMS Fuzzing"}, {"paperId": "2616a143f10df0500639a93360521ea2d3706bfc", "title": "Intramorphic Testing: A New Approach to the Test Oracle Problem"}, {"paperId": "b3135c616d6267fe1d2b4ca9d27c8792c0acf3e5", "title": "Differentially Testing Database Transactions for Fun and Profit"}, {"paperId": "fb419d29d7be63fd12e809891f4abca66bcdff9d", "title": "Report from Dagstuhl Seminar 21442: Ensuring the Reliability and Robustness of Database Management Systems"}, {"paperId": "de7f728893406aa870766bad7b626f6eb774abcc", "title": "A Disjoint-Partitioning Approach to Enhancing Metamorphic Testing of DBMS"}, {"paperId": "e67a2817089312746d69b38ce9abfdc4b1bc69c3", "title": "Finding bugs in Gremlin-based graph database systems via Randomized differential testing"}, {"paperId": "1ac6b3a3904b6c9022206be7c0b9d180b84b1fb4", "title": "Unicorn: detect runtime errors in time-series databases with hybrid input synthesis"}, {"paperId": "6c8ad2d2e977e0a45d987959fc3e4adcde10e4ca", "title": "Fuzzing DBMS via NNLM"}, {"paperId": "71dd291b4be0d074982f521ff654468755084a76", "title": "GDsmith: Detecting Bugs in Graph Database Engines"}, {"paperId": "1f74989f2884e71ff09ca23f0c10e753bab9fcc9", "title": "Automatic Detection of Performance Bugs in Database Systems using Equivalent Queries"}, {"paperId": "ba2770c990b740b6dfa4a122ac4ad719868796dd", "title": "An Empirical Study on Quality Issues of eBay's Big Data SQL Analytics Platform"}, {"paperId": "18ad0da02b2207288a3fe7c19ee8d223a9ee3ef4", "title": "MT-Teql: Evaluating and Augmenting Neural NLIDB on Real-world Linguistic and Schema Variations"}, {"paperId": "13cf48695d23f7e019d670a1bf059b7f28396992", "title": "Metamorphic testing of Datalog engines"}, {"paperId": "e6a4ddc65452fb2a01389b6e28e6607b8781710e", "title": "Skeletal approximation enumeration for SMT solver testing"}, {"paperId": "e27baad105b7fba74658580ed2fb7439328b053c", "title": "Duplicate-sensitivity Guided Transformation Synthesis for DBMS Correctness Bug Detection"}, {"paperId": "0a54335989389a1e25b4ca13050eeeabd04168e2", "title": "Technical Perspective DIAMetrics"}, {"paperId": "4ce512cdd51d4926d9353aca8a588a2414a0d305", "title": "Testing DBMS Performance with Mutations"}, {"paperId": "4bc8bd72ffa9bda2e3a7aef483008935a7a97656", "title": "Data-Oriented Differential Testing of Object-Relational Mapping Systems"}, {"paperId": "8356864e3802eaee426a1fec7ea838bf8d7d7e57", "title": "Industry Practice of Coverage-Guided Enterprise-Level DBMS Fuzzing"}, {"paperId": "26ca95a72994fdba1c1855eb6b699f98c992b5f4", "title": "Testing Database Engines via Pivoted Query Synthesis"}, {"paperId": "c5c2bcb84acde8c7fe8964aba2d6d27f220ae80b", "title": "Pinolo: Detecting Logical Bugs in Database Management Systems with Approximate Query Synthesis"}, {"paperId": "3a7373bd891702ae93d7e058241a7e8be25e89eb", "title": "DynSQL: Stateful Fuzzing for Database Management Systems with Complex and Valid SQL Query Generation"}, {"paperId": "77faa12e3aa52f3cb41009e9e8f65c79c9ef9f42", "title": "Detecting Logical Bugs of DBMS with Coverage-based Guidance"}, {"paperId": "74820ccf6c039c7745f8e1c30857dee61b243464", "title": "Automated Performance Bug Detection in Database Systems"}, {"paperId": "b6c64dbe0130ef1bf6af12266b958a5d5396101f", "title": "Differential Monitoring - Technical Report \u22c6"}, {"paperId": "9c8243cc846844f3af89a9ff742ba25947212bc8", "title": "Verifying Serializability Protocols With Version Order Recovery"}, {"paperId": "f232b1bd730f6c4d4a48be5f642074dffb7a1ed0", "title": "Differential Monitoring"}, {"paperId": "5c47e23ec4d2d8c6641ce7671b2054a5fff1911f", "title": "Finding Bugs in Gremlin-Based Graph Database Systems via Randomized Differential Testing Graph database systems, differential testing, Gremlin"}, {"paperId": "c8376be6e5d269467545de4edffe06bb2b74b1c7", "title": "Understanding Transaction Bugs in Database Systems"}]}
