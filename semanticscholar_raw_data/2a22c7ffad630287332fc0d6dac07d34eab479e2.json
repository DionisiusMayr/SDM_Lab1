{"paperId": "2a22c7ffad630287332fc0d6dac07d34eab479e2", "publicationVenue": null, "title": "Staged abstract interpreters: fast and modular whole-program analysis via meta-programming", "abstract": "It is well known that a staged interpreter is a compiler: specializing an interpreter to a given program produces an equivalent executable that runs faster. This connection is known as the first Futamura projection. It is even more widely known that an abstract interpreter is a program analyzer: tweaking an interpreter to run on abstract domains produces a sound static analysis. What happens when we combine these two ideas, and apply specialization to an abstract interpreter? In this paper, we present a unifying framework that naturally extends the first Futamura projection from concrete interpreters to abstract interpreters. Our approach derives a sound staged abstract interpreter based on a generic interpreter with type-level binding-time abstractions and monadic abstractions. By using different instantiations of these abstractions, the generic interpreter can flexibly behave in one of four modes: as an unstaged concrete interpreter, a staged concrete interpreter, an unstaged abstract interpreter, or a staged abstract interpreter. As an example of abstraction without regret, the overhead of these abstraction layers is eliminated in the generated code after staging. We show that staging abstract interpreters is practical and useful to optimize static analysis, all while requiring less engineering effort and without compromising soundness. We conduct three case studies, including a comparison with Boucher and Feeley\u2019s abstract compilation, applications to various control-flow analyses, and a demonstration for modular analysis. We also empirically evaluate the effect of staging on the execution time. The experiment shows an order of magnitude speedup with staging for control-flow analyses.", "venue": "Proc. ACM Program. Lang.", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-10-10", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 32", "volume": "3"}, "authors": [{"authorId": "2113006", "name": "Guannan Wei"}, {"authorId": "2109168219", "name": "Yuxuan Chen"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": [{"paperId": "95637d34079d3c4ca5bd35c57e0dc1c46ce8c493", "title": "Flan: An Expressive and Efficient Datalog Compiler for Program Analysis"}, {"paperId": "a72c5ff8bb28397049dfd49831d3208ed94fe4c2", "title": "Architecting Intermediate Layers for Efficient Composition of Data Management and Machine Learning Systems"}, {"paperId": "11882a20c4b17975afbb8c59ee2ea047af3a7cc2", "title": "Cross-Level Debugging for Static Analysers"}, {"paperId": "af2e17dd4523e5db1d025cd844d9f7d704818a0f", "title": "Program generation meets program verification: A case study on number-theoretic transform"}, {"paperId": "f77272da091ef51f08e9fd4ffc4e2866aef600d9", "title": "Combinator-Based Fixpoint Algorithms for Big-Step Abstract Interpreters"}, {"paperId": "2221957f5bf8bcedd285ddc6c24eb00ace5f8860", "title": "Compiling Parallel Symbolic Execution with Continuations"}, {"paperId": "9e564029a4ad569d8f0e4743b2cd953610910f96", "title": "Neuro-Symbolic Execution of Generic Source Code"}, {"paperId": "63b809349666fa571782b08364b68acbb1df0c2d", "title": "GraphIt to CUDA Compiler in 2021 LOC: A Case for High-Performance DSL Implementation via Staging with BuilDSL"}, {"paperId": "28b9eedc1b5f001f966b34482e83048f5e88aa7e", "title": "A Survey of Parametric Static Analysis"}, {"paperId": "be8afca4d0bb25e6ab78eb51b376aa734aa4fe12", "title": "BuildIt: A Type-Based Multi-stage Programming Framework for Code Generation in C++"}, {"paperId": "5cf98f3f2a3dd9dc97994eb783190a2f4c91cf00", "title": "Compiling symbolic execution with staging and algebraic effects"}, {"paperId": "770911d314dd7866153f2be235607c0eb32255bf", "title": "Rhyme: A Data-Centric Expressive Query Language for Nested Data Structures"}, {"paperId": "b4a53ce6ece0c76ab79239c30a319aa8cfc64a62", "title": "Neural Interpretation of Generic Source Code"}, {"paperId": "1e059e0a79452ea0900869da177fb2bda9006e4b", "title": "Unconstrained Variable Oracles for Faster Numeric Static Analyses"}, {"paperId": "4190320e2bab4a9a2f50a3803a11e10c9acf86e4", "title": "Towards Partially Evaluating Symbolic Interpreters for All (Short Paper)"}, {"paperId": "c0c24568fb5b919250b3fa75a68d06ca04c9491f", "title": "Unified Program Generation and Verification: A Case Study on Number-Theoretic Transform"}]}
