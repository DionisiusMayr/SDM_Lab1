{"paperId": "e9259ccc0b4eafce65523b15d6dba3fc8ff0995f", "publicationVenue": {"id": "2a7ac430-c70b-4147-b72a-237f8cba9f27", "name": "USENIX Conference on File and Storage Technologies", "type": "conference", "alternate_names": ["File Storage Technol", "Form Asp Secur Trust", "USENIX Conf File Storage Technol", "FAST", "File and Storage Technologies", "Formal Aspects in Security and Trust"], "url": "http://www.wikicfp.com/cfp/program?id=1011", "alternate_urls": ["http://www.dsi.unive.it/IFIPWG1_7/index.html"]}, "title": "SpanDB: A Fast, Cost-Effective LSM-tree Based KV Store on Hybrid Storage", "abstract": "Key-Value (KV) stores support many crucial applications and services. They perform fast in-memory processing, but are still often limited by I/O performance. The recent emergence of high-speed commodity NVMe SSDs has propelled new KV system designs that take advantage of their ultra-low latency and high bandwidth. Meanwhile, to switch to entirely new data layouts and scale up entire databases to high-end SSDs requires considerable investment. As a compromise, we propose SpanDB, an LSM-tree-based KV store that adapts the popular RocksDB system to utilize selective deployment of high-speed SSDs. SpanDB allows users to host the bulk of their data on cheaper and larger SSDs, while relocating write-ahead logs (WAL) and the top levels of the LSM-tree to a much smaller and faster NVMe SSD. To better utilize this fast disk, SpanDB provides high-speed, parallel WAL writes via SPDK, and enables asynchronous request processing to mitigate inter-thread synchronization overhead and work efficiently with polling-based I/O. Our evaluation shows that SpanDB simultaneously improves RocksDB\u2019s throughput by up to 8.8\u21e5 and reduces its latency by 9.558.3%. Compared with KVell, a system designed for high-end SSDs, SpanDB achieves 96-140% of its throughput, with a 2.3-21.6\u21e5 lower latency, at a cheaper storage configuration.", "venue": "USENIX Conference on File and Storage Technologies", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null, "journal": {"pages": "17-32"}, "authors": [{"authorId": "2149050454", "name": "Hao Chen"}, {"authorId": "51510890", "name": "Chaoyi Ruan"}, {"authorId": "2143635672", "name": "Cheng Li"}, {"authorId": "35790236", "name": "Xiaosong Ma"}, {"authorId": "145490553", "name": "Yinlong Xu"}], "citations": [{"paperId": "4dc88d288fd99cb68113e74731b01c62ff546490", "title": "A survey of LSM-Tree based Indexes, Data Systems and KV-stores"}, {"paperId": "c9353a61fa3d5557d95946786b3cd2edb1352987", "title": "MirrorKV: An Efficient Key-Value Store on Hybrid Cloud Storage with Balanced Performance of Compaction and Querying"}, {"paperId": "45b207bce4b459500df032266e3342b6993ca15c", "title": "ChainKV: A Semantics-Aware Key-Value Store for Ethereum System"}, {"paperId": "55bfe950fb614399b796d58c93b74aeb28a0bba0", "title": "An LSM Tree Augmented with B+ Tree on Nonvolatile Memory"}, {"paperId": "8e68466fb4faf37e5fc9ecc7a70c9e3ea0435688", "title": "Explorations and Exploitation for Parity-based RAIDs with Ultra-fast SSDs"}, {"paperId": "81078b47f83b8f24ea85e3e82c25f4eb4470b9e1", "title": "OCTOKV: An Agile Network-Based Key-Value Storage System with Robust Load Orchestration"}, {"paperId": "abec40d9d4feae9c78511f4adb82e2a7e1d4907e", "title": "Limon: A Scalable and Stable Key-Value Engine for Fast NVMe Devices"}, {"paperId": "1b981ea7ae053079c96667fe995fb8cc9c6e1c5c", "title": "Breathing New Life into an Old Tree: Resolving Logging Dilemma of\n B\n +\n -tree on Modern Computational Storage Drives"}, {"paperId": "aab7fbbc023f1854e185c4e79672e105715de4f8", "title": "RBC: A bandwidth controller to reduce write-stalls and tail latency"}, {"paperId": "eb1512def83f61cf3c7c86c0a0832c86ddaa92a8", "title": "DComp: Efficient Offload of LSM-tree Compaction with Data Processing Units"}, {"paperId": "d7f2001847ade90dd908ee11202a91ae03d64db2", "title": "AisLSM: Revolutionizing the Compaction with Asynchronous I/Os for LSM-tree"}, {"paperId": "0038f2fd7adbe7a205e648642aed8e41ab70e5e5", "title": "MyWAL: performance optimization by removing redundant input/output stack in key-value store"}, {"paperId": "c3082ccfe6e201008c06d2c3fc10a7ff58e8e998", "title": "WALTZ: Leveraging Zone Append to Tighten the Tail Latency of LSM Tree on ZNS SSD"}, {"paperId": "fcdff973365a2ddd6ca9b6c0d65d15727b1d2ecc", "title": "Elevating Performance of LSM-Tree-Based Key-Value Stores with Gradient Data Hierarchy"}, {"paperId": "fd870c26bd7f4bbb2388bf8a388bbe8b32841afc", "title": "iKnowFirst: An Efficient DPU-Assisted Compaction for LSM-Tree-Based Key-Value Stores"}, {"paperId": "7ef59e83d1e40808692e3fc398e4d19d790bcfd9", "title": "Design of a High-Performance, High-Endurance Key-Value SSD for Large-Key Workloads"}, {"paperId": "0099573e4bee3a1c83c46b20bd0e6bf4a1f0cc13", "title": "Analyzing and Improving the Scalability of In-Memory Indices for Managed Search Engines"}, {"paperId": "93fe25a10809341172f54d0252f7bb51b607901b", "title": "FrozenHot Cache: Rethinking Cache Management for Modern Hardware"}, {"paperId": "edb0c0907548a72220ca375aeda8fe9d2cceea61", "title": "FlowKV: A Semantic-Aware Store for Large-Scale State Management of Stream Processing Engines"}, {"paperId": "2b8f775e8c8d66e35580ae0adf0cad4a89d4c51a", "title": "All-Flash Array Key-Value Cache for Large Objects"}, {"paperId": "1fef584507285fb5a447543ec35fbd068305592e", "title": "Redesigning High-Performance LSM-based Key-Value Stores with Persistent CPU Caches"}, {"paperId": "2fdee183716352fe48494241e9249e8a6f7bd996", "title": "Realizing Strong Determinism Contract on Log-Structured Merge Key-Value Stores"}, {"paperId": "6a3ad6035795a4d90138781e7483e52cd87b015f", "title": "Dotori: A Key-Value SSD Based KV Store"}, {"paperId": "629a1195427f86416af32c789d83a2c149835149", "title": "Prism: Optimizing Key-Value Store for Modern Heterogeneous Storage Devices"}, {"paperId": "ffcc56726e42c47da8e1efba76aaf43c9b12e260", "title": "TPFS: A High-Performance Tiered File System for Persistent Memories and Disks"}, {"paperId": "bfe0ad6196e5c30111d1fbc2f7fd2112f133e62f", "title": "LLSM: A Lifetime-Aware Wear-Leveling for LSM-Tree on NAND Flash Memory"}, {"paperId": "94eea4c2ef954f702c0cab9ea51be5c717bd4b04", "title": "Re-LSM: A ReRAM-based Processing-in-Memory Framework for LSM-based Key-Value Store"}, {"paperId": "67da01ffb1ccd4ddfa53e3ee12f2bad13f477655", "title": "HaLSM: A Hotspot-aware LSM-tree based Key-Value Storage Engine"}, {"paperId": "6dafafcbe1d73c4a487d704f6c31b0716343a464", "title": "Challenges and future directions for energy, latency, and lifetime improvements in NVMs"}, {"paperId": "1b2ef56ed4d06946f78eced484caee823e1e77e3", "title": "PM-based Persistent Key Value Stores: a Survey"}, {"paperId": "2f9710999112ad324190c92bfcce6b0714ae67f7", "title": "Speculative Multi-Level Access in LSM Tree-Based KV Store"}, {"paperId": "cf2375254f3c621bc2d43a7198f25fd2882d5b46", "title": "Efficient LSM-Tree Key-Value Data Management on Hybrid SSD/HDD Zoned Storage"}, {"paperId": "d21a533ec6144ae1b3b909a829bb0874e022fa45", "title": "Key-Value Stores on Flash Storage Devices: A Survey"}, {"paperId": "a6ae53b610f816fac8850c09e309e008c7f553bc", "title": "Building a Fast and Efficient LSM-tree Store by Integrating Local Storage with Cloud Storage"}, {"paperId": "8693879ecce556aeec61a5486abcd81080444a8e", "title": "p2KVS: a portable 2-dimensional parallelizing framework to improve scalability of key-value stores on SSDs"}, {"paperId": "14be3e7a76b7b38c7985f3408de28141a6df542b", "title": "Building an efficient key-value store in a flexible address space"}, {"paperId": "fdca852ccfe11de67de4d8ae3eef491648cfe7d1", "title": "Enabling Efficient Slab-based Allocator on Fast NVMe SSD"}, {"paperId": "b719674091a302cbbda4e23958bc71c566a24a6b", "title": "lunule: An Agile and Judicious Metadata Load Balancer for CephFS"}, {"paperId": "f4418e8320234777c0e9673fc591f05480c1a105", "title": "The Advanced Performance of Improved LevelDB on NUMA Systems: Three Practical Approaches"}, {"paperId": "003f7a823b64a1f136059de1e30d7d4e53083eb0", "title": "Efficient Data Management with a Flexible Address Space"}, {"paperId": "9dcd2ed4cadfbf84b761a3c6811523523db5e6d3", "title": "Efficient Compactions between Storage Tiers with PrismDB"}, {"paperId": "733c5e3a3f1bb5751d5474c94c8573e1356973c2", "title": "ZenFS+: Nurturing Performance and Isolation to ZenFS"}, {"paperId": "da4854dadf5d3c7cab5c785ca3d32098d2d74572", "title": "File Systems are not Enough: Rethinking the Storage API for Microsecond-Scale Cloud Applications"}, {"paperId": "8e8821b6cded51a54f13da56b55a0fc861209ca0", "title": "Removing Double-Logging with Passive Data Persistence in LSM-tree based Relational Databases"}, {"paperId": "8dbf9d037f358c44bef5f9c69efa04d73cc4dbbb", "title": "Improving I/O Performance via Address Remapping in NVMe Interface"}, {"paperId": "611796d3cc03035e5cd7de70282cce0518b715b9", "title": "Vigil-KV: Hardware-Software Co-Design to Integrate Strong Latency Determinism into Log-Structured Merge Key-Value Stores"}, {"paperId": "9457ed73b719fdb376a42c55e43db16d77a144fe", "title": "Ef\ufb01cient Migrations Between Storage Tiers with PrismDB"}, {"paperId": "2145129c795c7b7b36fb98c7aa3b91ccd2d398b8", "title": "This paper is included in the Proceedings of the 2022 USENIX Annual Technical Conference."}]}
