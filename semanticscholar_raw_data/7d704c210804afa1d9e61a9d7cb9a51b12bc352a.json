{"paperId": "7d704c210804afa1d9e61a9d7cb9a51b12bc352a", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Breaking Down Memory Walls: Adaptive Memory Management in LSM-based Storage Systems (Extended Version)", "abstract": "Log-Structured Merge-trees (LSM-trees) have been widely used in modern NoSQL systems. Due to their out-of-place update design, LSM-trees have introduced memory walls among the memory components of multiple LSM-trees and between the write memory and the buffer cache. Optimal memory allocation among these regions is non-trivial because it is highly workload-dependent. Existing LSM-tree implementations instead adopt static memory allocation schemes due to their simplicity and robustness, sacrificing performance. In this paper, we attempt to break down these memory walls in LSM-based storage systems. We first present a memory management architecture that enables adaptive memory management. We then present a partitioned memory component structure with new flush policies to better exploit the write memory to minimize the write cost. To break down the memory wall between the write memory and the buffer cache, we further introduce a memory tuner that tunes the memory allocation between these two regions. We have conducted extensive experiments in the context of Apache AsterixDB using the YCSB and TPC-C benchmarks and we present the results here.", "venue": "Proceedings of the VLDB Endowment", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-04-22", "journal": {"name": "ArXiv", "volume": "abs/2004.10360"}, "authors": [{"authorId": "1591681237", "name": "Chen Luo"}, {"authorId": "1703347", "name": "M. Carey"}], "citations": [{"paperId": "eb11ed9b8208d3f8fe6e5fc9e5ede4c4ec7ac2d4", "title": "Learning to Optimize LSM-trees: Towards A Reinforcement Learning based Key-Value Store for Dynamic Workloads"}, {"paperId": "49527bc5a3bb8a097bf84e15825f654497b73206", "title": "The LSM Design Space and its Read Optimizations"}, {"paperId": "a312b4f5d864bf160a99d8a7945ec19d3a63bdce", "title": "Dissecting, Designing, and Optimizing LSM-based Data Stores"}, {"paperId": "894c86e6608e14f133f759433a382fe262f50dbd", "title": "Reducing Write Amplification of LSM-Tree with Block-Grained Compaction"}, {"paperId": "f579eb5d8039bf2c3ff37d7824d6dd610b063109", "title": "DynaHash: Efficient Data Rebalancing in Apache AsterixDB"}, {"paperId": "51051993cf52b99076e71c7d3b286e3ac5f359c8", "title": "Nova-LSM: A Distributed, Component-based LSM-tree Key-value Store"}, {"paperId": "b662e5950a637d61117dcd7b3cfe7ce15b1f50b3", "title": "Comparison and evaluation of state-of-the-art LSM merge policies"}]}
