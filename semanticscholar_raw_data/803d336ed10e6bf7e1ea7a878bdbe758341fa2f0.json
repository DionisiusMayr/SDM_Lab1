{"paperId": "803d336ed10e6bf7e1ea7a878bdbe758341fa2f0", "publicationVenue": null, "title": "Tuplex: Data Science in Python at Native Code Speed", "abstract": "Today's data science pipelines often rely on user-defined functions (UDFs) written in Python. But interpreted Python code is slow, and Python UDFs cannot be compiled to machine code easily. We present Tuplex, a new data analytics framework that just in-time compiles developers' natural Python UDFs into efficient, end-to-end optimized native code. Tuplex introduces a novel dual-mode execution model that compiles an optimized fast path for the common case, and falls back on slower exception code paths for data that fail to match the fast path's assumptions. Dual-mode execution is crucial to making end-to-end optimizing compilation tractable: by focusing on the common case, Tuplex keeps the code simple enough to apply aggressive optimizations. Thanks to dual-mode execution, Tuplex pipelines always complete even if exceptions occur, and Tuplex's post-facto exception handling simplifies debugging. We evaluate Tuplex with data science pipelines over real-world datasets. Compared to Spark and Dask, Tuplex improves end-to-end pipeline runtime by 5-91x and comes within 1.1-1.7x of a hand-optimized C++ baseline. Tuplex outperforms other Python compilers by 6x and competes with prior, more limited query compilers. Optimizations enabled by dual-mode processing improve runtime by up to 3x, and Tuplex performs well in a distributed setting on serverless functions.", "venue": "SIGMOD Conference", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2021-06-09", "journal": {"name": "Proceedings of the 2021 International Conference on Management of Data"}, "authors": [{"authorId": "51176303", "name": "Leonhard F. Spiegelberg"}, {"authorId": "2104499072", "name": "Rahul Yesantharao"}, {"authorId": "1962485", "name": "Malte Schwarzkopf"}, {"authorId": "1746961", "name": "Tim Kraska"}], "citations": [{"paperId": "01f6f821e9e46558952cf947bac760265a1867f4", "title": "Udon: Efficient Debugging of User-Defined Functions in Big Data Systems with Line-by-Line Control"}, {"paperId": "b78426438eaadc878ac3ba5ce467cdfcd7428ffe", "title": "Modeling of the Multiple Paths Finding Algorithm for Software-Defined Network"}, {"paperId": "3adca9d49eab1a4db6538a995af3636d10e120c3", "title": "BladeDISC: Optimizing Dynamic Shape Machine Learning Workloads via Compiler Approach"}, {"paperId": "415f21f061f4d6fc2fbe939042b8396ac38828ce", "title": "Python meets JIT compilers: A simple implementation and a comparative evaluation"}, {"paperId": "66e5716f2d71d9c0e42248b5cd13eecdd2dabb3b", "title": "To UDFs and Beyond: Demonstration of a Fully Decomposed Data Processor for General Data Wrangling Tasks"}, {"paperId": "49d9666d6e3dd5a5a49a9db500c2683c23132b91", "title": "Efficient Execution of User-Defined Functions in SQL Queries"}, {"paperId": "62ab0c752b63393c9462ef2b749cd7545d2b1a49", "title": "Predicate Pushdown for Data Science Pipelines"}, {"paperId": "008d061e92c9c06582133cd37e1a2a481417e40d", "title": "Efficient Query Processing in Python Using Compilation"}, {"paperId": "c909aaf29267c8a4cd31d8de2a82dbfba351257a", "title": "Optimizing Tensor Computations: From Applications to Compilation and Runtime Techniques"}, {"paperId": "3fb4813a08ecbbf4ceb31f722713f4bc8366e709", "title": "User-Defined Functions in Modern Data Engines"}, {"paperId": "0971c3ac656043fa0af0f0689b6821dab581667e", "title": "Building a Compiled Query Engine in Python"}, {"paperId": "31daeb6bc89f608da51f3651b0189fa2c3f46fe7", "title": "Landscape of High-Performance Python to Develop Data Science and Machine Learning Applications"}, {"paperId": "6255430e12b18f9aaacb2fe1e705833101cb37c6", "title": "Parallelization of Data Science Tasks, an Experimental Overview"}, {"paperId": "4abb1e671ce5e34d890222f764ad865e6b8a459e", "title": "YeSQL: Rich User-Defined Functions without the Overhead"}, {"paperId": "06a9008b90fe14e6551515934726fddcccec8c27", "title": "Py2Cy: a genetic improvement tool to speed up python"}, {"paperId": "6c8c4503e3f50848d35deaf080ae4086dd4f60c1", "title": "Containerized Execution of UDFs: An Experimental Evaluation"}, {"paperId": "5cc566f05712aaa9ef10c38ee4e04fab0967e09b", "title": "YeSQL: \"You extend SQL\" with Rich and Highly Performant User-Defined Functions in Relational Databases"}, {"paperId": "8a4c9ada701ad81b2d234e5e0b20eedf1bdabbca", "title": "Distill: Domain-Specific Compilation for Cognitive Models"}, {"paperId": "629766244065c8236daa2987c02c6f1fb1def0ab", "title": "Optimizing Data Science Applications using Static Analysis"}, {"paperId": "3635dfe321f4286f050e55629dd06781f81cb0d6", "title": "Dear User-Defined Functions, Inlining isn't working out so great for us. Let's try batching to make our relationship work. Sincerely, SQL"}, {"paperId": "13ff6ad5cda33741535547df18414fb19afa71c6", "title": "Hyperspecialized Compilation for Serverless Data Analytics"}, {"paperId": "3c3f8344e58ff7a8ea9c924e428bda5b8c775df6", "title": "DAPHNE: An Open and Extensible System Infrastructure for Integrated Data Analysis Pipelines"}, {"paperId": "ebc61daa1204423113a026c7ce026c51a74516e2", "title": "Self-Organizing Data Containers"}, {"paperId": "337f08a9c3357c57d5e6d03596be60da0db32309", "title": "Accelerating Python UDFs in Vectorized Query Execution"}, {"paperId": "43f86997c1b1417b5406b41a3d60edbfe17693ac", "title": "Incremental Exception Resolution in Tuplex"}, {"paperId": "295891de850f62b2e796b1fce4619cf79de30fc9", "title": "Reproducibility Report for ACM SIGMOD 2021 Paper: \u201cTuplex: Data Science in Python at Native Code Speed\u201d"}, {"paperId": "52abd825267858877a63b66252ba24aeb1a433ea", "title": "Cognac: Domain-Specific Compilation for Cognitive Models"}]}
