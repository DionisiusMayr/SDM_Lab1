{"paperId": "e5c17deddc0a69c5bd3f9d1eeb515946277f76a1", "publicationVenue": {"id": "7bf8fd30-543b-48f6-bb8a-8c518006bdd2", "name": "IEEE Data Engineering Bulletin", "type": "journal", "alternate_names": ["IEEE Data Eng Bull"], "url": "https://tc.computer.org/tcde/tcde-bulletin-issues/"}, "title": "Graph Processing in RDBMSs", "abstract": "To support analytics on massive graphs such as online social networks, RDF , Semantic Web, etc. many new graph algorithms are designed to query graphs for a speci\ufb01c problem, and many distributed graph processing systems are developed to support graph querying by programming. A main issue to be addressed is how RDBMS can support graph processing. And the \ufb01rst thing is how RDBMS can support graph processing at the SQL level. Our work is motivated by the fact that there are many relations stored in RDBMS that are closely related to a graph in real applications and need to be used together to query the graph, and RDBMS is a system that can query and manage data while data may be updated over time. To support graph processing, we propose 4 new relational algebra operations, MM -join, MV -join, anti-join, and union-by-update. Here, MM -join and MV -join are join operations between two matrices and between a matrix and a vector, respectively, followed by aggregation computing over groups, given a matrix/vector can be represented by a relation. Both deal with the semiring by which many graph algorithms can be supported. The anti-join removes nodes/edges in a graph when they are unnecessary for the following computing. The union-by-update addresses value updates to compute PageRank , for example. The 4 new relational algebra operations can be de\ufb01ned by the 6 basic relational algebra operations with group-by & aggregation. We revisit SQL recursive queries and show that the 4 operations with others are ensured to have a \ufb01xpoint, following the techniques studied in D ATALOG , and we enhance the recursive with clause in SQL \u201999. RDBMS s are capable of dealing with graph processing in reasonable time.", "venue": "IEEE Data Engineering Bulletin", "year": 2017, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"name": "IEEE Data Eng. Bull.", "pages": "6-17", "volume": "40"}, "authors": [{"authorId": "8599669", "name": "Kangfei Zhao"}, {"authorId": "144666776", "name": "J. Yu"}], "citations": [{"paperId": "67634f38002f9fdc5e0bf8fe1612a4880c0fe896", "title": "The Linked Data Benchmark Council (LDBC): Driving competition and collaboration in the graph data management space"}, {"paperId": "965d8e36b89d4f61a608a2b16b43a6e38e5d9bc4", "title": "Complete Join Reordering for Null-Intolerant Joins"}, {"paperId": "40b551e16a75449b8f59c455c9c995ba4da6ab66", "title": "The LDBC Social Network Benchmark: Business Intelligence Workload"}, {"paperId": "e70ab345eaa08e0c51b85098ae1d51245705be82", "title": "Rule-Based Graph Repairing: Semantic and Efficient Repairing Methods"}, {"paperId": "a6ed832f85d9624f35002638e9b51bbc3d07b829", "title": "Query, Analysis, and Benchmarking Techniques for Evolving Property Graphs of Software Systems"}]}
