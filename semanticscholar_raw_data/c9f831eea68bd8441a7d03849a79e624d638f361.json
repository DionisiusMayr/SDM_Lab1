{"paperId": "c9f831eea68bd8441a7d03849a79e624d638f361", "publicationVenue": {"id": "e35a87a3-a6c4-47bf-acca-3e615ddb9c58", "name": "ACM Transactions on Database Systems", "type": "journal", "alternate_names": ["ACM Trans Database Syst"], "issn": "0362-5915", "url": "http://www.acm.org/pubs/contents/journals/tods/", "alternate_urls": ["http://tods.acm.org/", "http://www.acm.org/tods/", "http://portal.acm.org/tods", "https://tods.acm.org/"]}, "title": "Efficient Sorting, Duplicate Removal, Grouping, and Aggregation", "abstract": "Database query processing requires algorithms for duplicate removal, grouping, and aggregation. Three algorithms exist: in-stream aggregation is most efficient by far but requires sorted input; sort-based aggregation relies on external merge sort; and hash aggregation relies on an in-memory hash table plus hash partitioning to temporary storage. Cost-based query optimization chooses which algorithm to use based on several factors, including the sort order of the input, input and output sizes, and the need for sorted output. For example, hash-based aggregation is ideal for output smaller than the available memory (e.g., Query 1 of TPC-H), whereas sorting the entire input and aggregating after sorting are preferable when both aggregation input and output are large and the output needs to be sorted for a subsequent operation such as a merge join. Unfortunately, the size information required for a sound choice is often inaccurate or unavailable during query optimization, leading to sub-optimal algorithm choices. In response, this article introduces a new algorithm for sort-based duplicate removal, grouping, and aggregation. The new algorithm always performs at least as well as both traditional hash-based and traditional sort-based algorithms. It can serve as a system\u2019s only aggregation algorithm for unsorted inputs, thus preventing erroneous algorithm choices. Furthermore, the new algorithm produces sorted output that can speed up subsequent operations. Google\u2019s F1 Query uses the new algorithm in production workloads that aggregate petabytes of data every day.", "venue": "ACM Transactions on Database Systems", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-10-01", "journal": {"name": "ACM Transactions on Database Systems", "pages": "1 - 35", "volume": "47"}, "authors": [{"authorId": "2136123992", "name": "Thanh Do"}, {"authorId": "1799376", "name": "G. Graefe"}, {"authorId": "5151034", "name": "J. Naughton"}], "citations": [{"paperId": "db2c0c49d9ae5abb54d3696797288e16e7717144", "title": "Optimizing Search and Sort Algorithms: Harnessing Parallel Programming for Efficient Processing of Large Datasets"}, {"paperId": "364515f740ea4747eb8dc8691658cf290bea57c1", "title": "Sorting it out in Hardware: A State-of-the-Art Survey"}, {"paperId": "7e7ee64fafdb6cce884ab1def2d55359a370e473", "title": "High-Performance and Flexible Parallel Algorithms for Semisort and Related Problems"}, {"paperId": "d4dfc4a6b66ed6a8aab3fd2eccfa670c1fc9a34f", "title": "Database management system performance comparisons: A systematic literature review"}, {"paperId": "7871ac596b2f1a55cb5cdde919a02f52639b12f1", "title": "Offset-value coding in database query processing"}, {"paperId": "b49c4eda92154206abf2a442620dddd28ca7a231", "title": "Robust and Efficient Sorting with Offset-value Coding"}, {"paperId": "908bb8aa2e5123e06fcca7e5d9fdf545127b3abc", "title": "Database management system performance comparisons: A systematic survey"}, {"paperId": "3cc2947f8d853efa7b47b8f3827d6b22988846f1", "title": "Robust External Hash Aggregation in the Solid State Age"}]}
