{"paperId": "3fba3edd3e70b7013ab6971337c5cc0753dc67a0", "publicationVenue": {"id": "289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0", "name": "International Symposium on Software Testing and Analysis", "type": "conference", "alternate_names": ["ISSTA", "Int Symp Softw Test Anal"], "url": "https://dl.acm.org/conference/issta"}, "title": "piCoq: parallel regression proving for large-scale verification projects", "abstract": "Large-scale verification projects using proof assistants typically contain many proofs that must be checked at each new project revision. While proof checking can sometimes be parallelized at the coarse-grained file level to save time, recent changes in some proof assistant in the LCF family, such as Coq, enable fine-grained parallelism at the level of proofs. However, these parallel techniques are not currently integrated with regression proof selection, a technique that checks only the subset of proofs affected by a change. We present techniques that blend the power of parallel proof checking and selection to speed up regression proving in verification projects, suitable for use both on users' own machines and in workflows involving continuous integration services. We implemented the techniques in a tool, piCoq, which supports Coq projects. piCoq can track dependencies between files, definitions, and lemmas and perform parallel checking of only those files or proofs affected by changes between two project revisions. We applied piCoq to perform regression proving over many revisions of several large open source projects and measured the proof checking time. While gains from using proof-level parallelism and file selection can be considerable, our results indicate that proof-level parallelism and proof selection is consistently much faster than both sequential checking from scratch and sequential checking with proof selection. In particular, 4-way parallelization is up to 28.6 times faster than the former, and up to 2.8 times faster than the latter.", "venue": "International Symposium on Software Testing and Analysis", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2018-07-12", "journal": {"name": "Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis"}, "authors": [{"authorId": "2713883", "name": "Karl Palmskog"}, {"authorId": "145118978", "name": "Ahmet \u00c7elik"}, {"authorId": "2020926", "name": "Milo\u0161 Gligori\u0107"}], "citations": [{"paperId": "37418db8dd5d0cbf914f0817e519989c13049fc5", "title": "Finding Software Vulnerabilities in Open-Source C Projects via Bounded Model Checking"}, {"paperId": "9f8ac6ee3760ab202e492c733362e5bfc6763934", "title": "Baldur: Whole-Proof Generation and Repair with Large Language Models"}, {"paperId": "455dcc6d88fac843c0717f60af2a065feaa7f248", "title": "Passport: Improving Automated Formal Verification Using Identifiers"}, {"paperId": "c6c26c80d09274576a707760ce0808c8e12517b3", "title": "Making Isabelle Content Accessible in Knowledge Representation Formats"}, {"paperId": "b122c36c504f7077b7628e31f8e0269732dc47a8", "title": "Challenges in the collaborative evolution of a proof language and its ecosystem. (D\u00e9fis dans l'\u00e9volution collaborative d'un langage de preuve et de son \u00e9cosyst\u00e8me)"}, {"paperId": "b7cb64152a2210993f5430a353c35649baf22ccd", "title": "Mutation Analysis for Coq"}, {"paperId": "72c34aac7bcaa9446d2830a755202335486f4d3d", "title": "QED at Large: A Survey of Engineering of Formally Verified Software"}]}
