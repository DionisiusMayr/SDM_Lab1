{"paperId": "6003c79a6d6309ae7273835ca939443d089757f4", "publicationVenue": null, "title": "Getting a Handle on Unmanaged Memory", "abstract": "The inability to relocate objects in unmanaged languages brings with it a menagerie of problems. Perhaps the most impactful is memory fragmentation, which has long plagued applications such as databases and web servers. These issues either fester or require Herculean programmer e \ufffd ort to address on a per-application basis because, in general, heap objects cannot be moved in unmanaged languages . In contrast, managed languages like C# cleanly address fragmentation through the use of compacting garbage collection techniques built upon heap object movement. In this work, we bridge this gap between unmanaged and managed languages through the use of handles, a level of indirection allowing heap object movement. Handles open the door to seamlessly employing runtime features from managed languages in existing, unmodi \ufffd ed code written in unmanaged languages. We describe a new compiler and runtime system, A \ufffd\ufffd\ufffd\ufffd\ufffd , that acts as a drop-in replacement for malloc . With-out any programmer e \ufffd ort , the A \ufffd\ufffd\ufffd\ufffd\ufffd compiler transforms pointer-based code to utilize handles, with optimizations to minimize performance impact. A codesigned runtime sys-tem manages this new level of indirection and exploits heap object movement via an extensible service interface. We investigate the overheads of A \ufffd\ufffd\ufffd\ufffd\ufffd on large benchmarks and applications spanning multiple domains. To show the power and extensibility of handles, we use A \ufffd\ufffd\ufffd\ufffd\ufffd to eliminate fragmentation on the heap through defragmentation, reducing memory usage by up to 40% in Redis.", "venue": "", "year": null, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": null, "journal": null, "authors": [{"authorId": "2173114782", "name": "Nick Wanninger"}, {"authorId": "2208979540", "name": "Tommy McMichen"}, {"authorId": "2265489309", "name": "Simone Campanoni"}, {"authorId": "2268512914", "name": "Peter Dinda"}], "citations": []}
