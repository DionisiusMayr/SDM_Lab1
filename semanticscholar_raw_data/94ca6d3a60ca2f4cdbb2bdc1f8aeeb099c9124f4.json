{"paperId": "94ca6d3a60ca2f4cdbb2bdc1f8aeeb099c9124f4", "publicationVenue": null, "title": "Asynchronous Stream Data Processing using a Light-Weight and High-Performance Data\ufb02ow Engine", "abstract": "In the last decade, various distributed stream processing engines (DSPEs) were developed in order to process data streams in a flexible, scalable, fast and resilient manner. Coping with the increasing high-throughput and low-latency requirements of modern applications led to a careful investigation and redesign of new tools for stream processing. The first generation of tools, such as Apache Hadoop [15], Spark [16], Storm [14] and Kafka [10], were designed to split an incoming data stream into batches and to then synchronously execute their analytical workflows over these data batches. To overcome the limitations\u2014primarily, the high latency\u2014of this iterative form of bulk-synchronous processing (BSP), asynchronous streamprocessing (ASP) engines such as Apache Flink [13] and Samza [11] have also recently emerged. To guarantee a high sustainable throughput (ST), systems that rely on direct worker-worker-based communication protocols [6], [9] were proposed in contrast to the prevalent driverworker architectures. One upper hand of these systems, compared to all of the aforementioned ASP and BSP engines, is the complete avoidance of hidden synchronization barriers and the constant need of state exchange (and hence communication overhead) between a dedicated driver and its worker nodes. However, most of these efforts are still limited to scale-up oriented architectures, and no serious advancement in terms of the supported programming abstractions has been developed in the last years for these engines. For example, in ST-oriented systems such as FastFlow [1], GrPPi [3], Streambox [7] and PiCo [8], only very basic parallel programming patterns for stream data processing were proposed. However, these patterns are general and not specifically tailored for modern streaming analytics. All of these systems remain prototypes, providing only basic support for defining more complex DAGs of dataflow operators from the traditional streaming algebra. In this talk, we will give an overview of our new DSPE architecture, called \u201cAIR\u201d, which can readily be deployed for ST-oriented applications in an efficient and scalable manner. AIR is based on a novel communication protocol among the worker nodes, which we refer to \u201cAsynchronous Iterative Routing\u201d, to process one or more incoming data streams in a parallel and asynchronous manner. AIR has been developed from scratch in C++ and is purely based on the Message Passing Interface (MPI) in order to facilitate a low-level and highly efficient communication protocol among the worker nodes.", "venue": "", "year": 2020, "fieldsOfStudy": null, "publicationTypes": ["Review"], "publicationDate": null, "journal": null, "authors": [{"authorId": "148325532", "name": "V. Venugopal"}, {"authorId": "2288845831", "name": "Martin Theobald"}], "citations": []}
