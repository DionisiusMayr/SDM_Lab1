{"paperId": "b51b58281b3eafffcb93036f3afa32581dbe66a8", "publicationVenue": {"id": "640b2c9a-6fb2-4333-8780-d31aa3c411cf", "name": "International Database Engineering and Applications Symposium", "type": "conference", "alternate_names": ["Int Database Eng Appl Symp", "Ideas", "IDEAS"], "issn": "2338-4778", "alternate_issns": ["1860-6873", "2451-6910"], "url": "http://www.wikicfp.com/cfp/program?id=1525", "alternate_urls": ["https://www.ideas-heilbronn.org/", "http://revistaideas.com.ar/", "https://dialnet.unirioja.es/servlet/revista?codigo=7972", "http://ejournal.iainpalopo.ac.id/index.php/ideas", "http://revistaideas.com.ar/descargas/"]}, "title": "Empowering big data analytics with polystore and strongly typed functional queries", "abstract": "Polystores are of primary importance to tackle the diversity and the volume of Big Data, as they propose to store data according to specific use cases. Nevertheless, analytics frameworks often lack a uniform interface allowing to fully access and take advantage of the various models offered by the polystore. It also should be ensured that the typing of the algebraic expressions built with data manipulation operators can be checked and that schema can be inferred before starting to execute the operators (type-safe). Tensors are good candidates for supporting a pivot data model. They are powerful abstract mathematical objects which can embed complex relationships between entities and that are used in major analytics frameworks. However, they are far away from data models, and lack high level operators to manipulate their content, resulting in bad coding habits and less maintainability, and sometimes poor performances. With TDM (Tensor Data Model), we propose to join the best of both worlds, to take advantage of modeling capabilities of tensors by adding schema and data manipulation operators to them. We developed an implementation in Scala using Spark, providing users with a type-safe and schema inference mechanism that guarantees the technical and functional correctness of composed expressions on tensors at compile time. We show that this extension does not induce overhead and allows to outperform Spark query optimizer using bind join.", "venue": "International Database Engineering and Applications Symposium", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle"], "publicationDate": "2020-08-12", "journal": {"name": "Proceedings of the 24th Symposium on International Database Engineering & Applications"}, "authors": [{"authorId": "2078722372", "name": "Annabelle Gillet"}, {"authorId": "47792304", "name": "\u00c9. Leclercq"}, {"authorId": "3334090", "name": "M. Savonnet"}, {"authorId": "1706642", "name": "N. Cullot"}], "citations": [{"paperId": "26999527406d03de78adc7838ba0506c59e3cbaf", "title": "Discovery of Patent Influence with Directed Acyclic Graph Network Analysis"}, {"paperId": "3afa28fefe1fb78714d49f0daa5341bde5abe7d4", "title": "Explainable Data Analytics for Disease and Healthcare\u00a0Informatics"}]}
