{"paperId": "a361a385cc397f3706f9ed8e4c89eb3a78e58df9", "publicationVenue": {"id": "e247eac1-f527-41a3-af6d-bc6a6fc69de9", "name": "IEEE Conference on High Performance Extreme Computing", "type": "conference", "alternate_names": ["HPEC", "IEEE High Perform Extreme Comput Conf", "IEEE Conf High Perform Extreme Comput", "IEEE High Performance Extreme Computing Conference"]}, "title": "IP Cores for Graph Kernels on FPGAs", "abstract": "Graphs are a powerful abstraction for representing networked data in many real-world applications. The need for performing large scale graph analytics has led to widespread adoption of dedicated hardware accelerators such as FPGA for this purpose. In this work, we develop IP cores for several key graph kernels. Our IP cores use graph processing over partitions (GPOP) programming paradigm to perform computations over graph partitions. Partitioning the input graph into nonoverlapping partitions improves on-chip data reuse. Additional optimizations to exploit intra and interpartition parallelism and to reduce external memory accesses are also discussed. We generate FPGA designs for general graph algorithms with various vertex attributes and update propagation functions, such as Sparse Matrix Vector Multiplication (SpMV), PageRank (PR), Single Source Shortest Path (SSSP), and Weakly Connected Component (WCC). We target a platform consisting of large external DDR4 memory to store the graph data and Intel Stratix FPGA to accelerate the processing. Experimental results show that our accelerators sustain a high throughput of up to 2250, 2300, 3378, and 2178 Million Traversed Edges Per Second (MTEPS) for SpMV, PR, SSSP and WCC, respectively. Compared with several highly-optimized multi-core designs, our FPGA framework achieves up to 20.5\u00d7 speedup for SpMV, 16.4\u00d7 speedup for PR, 3.5\u00d7 speedup for SSSP, and 35.1\u00d7 speedup for WCC, and compared with two state-of-the-art FPGA frameworks, our designs demonstrate up to 5.3\u00d7 speedup for SpMV, 1.64\u00d7 speedup for PR, and 1.8\u00d7 speedup for WCC, respectively. We develop a performance model for our GPOP paradigm. We then perform performance predictions of our designs assuming the graph is stored in HBM2 instead of DRAM. We further discuss extensions to our optimizations to improve the throughput.", "venue": "IEEE Conference on High Performance Extreme Computing", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2019-09-01", "journal": {"name": "2019 IEEE High Performance Extreme Computing Conference (HPEC)", "pages": "1-7"}, "authors": [{"authorId": "2873546", "name": "S. Kuppannagari"}, {"authorId": "1404325909", "name": "Rachit Rajat"}, {"authorId": "2286832947", "name": "R. Kannan"}, {"authorId": "34869107", "name": "A. Dasu"}, {"authorId": "1728271", "name": "V. Prasanna"}], "citations": [{"paperId": "17a7ecded9fabfa66ae44c95e81aee747670f9c7", "title": "Towards Programmable Memory Controller for Tensor Decomposition"}, {"paperId": "1bb06b95afd5515eea1ca02d0e2685d573d48917", "title": "On The Design of a Light-weight FPGA Programming Framework for Graph Applications"}]}
