{"paperId": "a53756a4ed8eb97b78d000563ac304a4be3f0d44", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "Evaluating the Potential of Disaggregated Memory Systems for HPC applications", "abstract": "Disaggregated memory is a promising approach that addresses the limitations of traditional memory architectures by enabling memory to be decoupled from compute nodes and shared across a data center. Cloud platforms have deployed such systems to improve overall system memory utilization, but performance can vary across workloads. High-performance computing (HPC) is crucial in scientific and engineering applications, where HPC machines also face the issue of underutilized memory. As a result, improving system memory utilization while understanding workload performance is essential for HPC operators. Therefore, learning the potential of a disaggregated memory system before deployment is a critical step. This paper proposes a methodology for exploring the design space of a disaggregated memory system. It incorporates key metrics that affect performance on disaggregated memory systems: memory capacity, local and remote memory access ratio, injection bandwidth, and bisection bandwidth, providing an intuitive approach to guide machine configurations based on technology trends and workload characteristics. We apply our methodology to analyze thirteen diverse workloads, including AI training, data analysis, genomics, protein, fusion, atomic nuclei, and traditional HPC bookends. Our methodology demonstrates the ability to comprehend the potential and pitfalls of a disaggregated memory system and provides motivation for machine configurations. Our results show that eleven of our thirteen applications can leverage injection bandwidth disaggregated memory without affecting performance, while one pays a rack bisection bandwidth penalty and two pay the system-wide bisection bandwidth penalty. In addition, we also show that intra-rack memory disaggregation would meet the application's memory requirement and provide enough remote memory bandwidth.", "venue": "arXiv.org", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2023-06-06", "journal": {"name": "ArXiv", "volume": "abs/2306.04014"}, "authors": [{"authorId": "2134926495", "name": "Nan Ding"}, {"authorId": "2203826248", "name": "Pieter Maris"}, {"authorId": "2401987", "name": "H. Nam"}, {"authorId": "2433247", "name": "Taylor L. Groves"}, {"authorId": "3410626", "name": "M. Awan"}, {"authorId": "2189467325", "name": "LeAnn Lindsey"}, {"authorId": "145869234", "name": "C. Daley"}, {"authorId": "66309326", "name": "Oguz Selvitopi"}, {"authorId": "1757847", "name": "L. Oliker"}, {"authorId": "145190114", "name": "N. Wright"}, {"authorId": "145117071", "name": "Samuel Williams"}], "citations": [{"paperId": "d3c76deeb0f066dcef64e9a2a9e492e9c0683838", "title": "INSPIRIT: Optimizing Heterogeneous Task Scheduling through Adaptive Priority in Task-based Runtime Systems"}, {"paperId": "2a59de7c874f6c622082c94db55c6b59664115ab", "title": "Aurelia: CXL Fabric with Tentacle"}, {"paperId": "293229569adf41c5a10f43c3b8df1772b9bb29f1", "title": "CXLMemUring: A Hardware Software Co-design Paradigm for Asynchronous and Flexible Parallel CXL Memory Pool Access"}, {"paperId": "f5e1f75d29021161313ca5853d2cc3cf86457ec9", "title": "CXL Memory as Persistent Memory for Disaggregated HPC: A Practical Approach"}]}
