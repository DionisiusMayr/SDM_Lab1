{"paperId": "e7e335ed18aa181caae403dba65394f0f11bb47c", "publicationVenue": {"id": "58f55ec2-1f5a-4e79-af2a-0046ee1dcd2a", "name": "Journal of functional programming", "type": "journal", "alternate_names": ["J funct program", "Journal of Functional Programming", "J Funct Program"], "issn": "0956-7968", "url": "https://www.cambridge.org/core/journals/journal-of-functional-programming", "alternate_urls": ["http://journals.cambridge.org/jid_JFP"]}, "title": "A SQL to C compiler in 500 lines of code", "abstract": "Abstract We present the design and implementation of a SQL query processor that outperforms existing database systems and is written in just about 500 lines of Scala code \u2013 a convincing case study that high-level functional programming can handily beat C for systems-level programming where the last drop of performance matters. The key enabler is a shift in perspective toward generative programming. The core of the query engine is an interpreter for relational-algebra operations, written in Scala. Using the open-source lightweight modular staging framework, we turn this interpreter into a query compiler with very low effort. To do so, we capitalize on an old and widely known result from partial evaluation: the first Futamura projection, which states that a process that can specialize an interpreter to any given input program is equivalent to a compiler. In this context, we discuss lightweight modular staging programming patterns such as mixed-stage data structures (e.g., data records with static schema and dynamic field components) and techniques to generate low-level C code, including specialized data structures and data loading primitives.", "venue": "Journal of functional programming", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"name": "Journal of Functional Programming", "volume": "29"}, "authors": [{"authorId": "1712987", "name": "Tiark Rompf"}, {"authorId": "2257252224", "name": "Nada Amin"}], "citations": [{"paperId": "95637d34079d3c4ca5bd35c57e0dc1c46ce8c493", "title": "Flan: An Expressive and Efficient Datalog Compiler for Program Analysis"}, {"paperId": "de982779453b2451a0ff220c1379824080c7b669", "title": "Decomposition Without Regret"}, {"paperId": "770911d314dd7866153f2be235607c0eb32255bf", "title": "Rhyme: A Data-Centric Expressive Query Language for Nested Data Structures"}]}
