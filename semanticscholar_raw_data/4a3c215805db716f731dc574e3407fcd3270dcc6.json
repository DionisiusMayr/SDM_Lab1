{"paperId": "4a3c215805db716f731dc574e3407fcd3270dcc6", "publicationVenue": {"id": "c99cfe66-b71c-4ca4-bedd-26267b9cb068", "name": "IEEE Transactions on Software Engineering", "type": "journal", "alternate_names": ["IEEE Trans Softw Eng"], "issn": "0098-5589", "url": "http://ieeexplore.ieee.org/servlet/opac?punumber=32", "alternate_urls": ["http://www.computer.org/portal/web/tse/about"]}, "title": "Evaluating Search-Based Software Microbenchmark Prioritization", "abstract": "Ensuring that software performance does not degrade after a code change is paramount. A solution is to regularly execute software microbenchmarks, a performance testing technique similar to (functional) unit tests, which, however, often becomes infeasible due to extensive runtimes. To address that challenge, research has investigated regression testing techniques, such as test case prioritization (TCP), which reorder the execution within a microbenchmark suite to detect larger performance changes sooner. Such techniques are either designed for unit tests and perform sub-par on microbenchmarks or require complex performance models, drastically reducing their potential application. In this paper, we empirically evaluate single- and multi-objective search-based microbenchmark prioritization techniques to understand whether they are more effective and efficient than greedy, coverage-based techniques. For this, we devise three search objectives, i.e., coverage to maximize, coverage overlap to minimize, and historical performance change detection to maximize. We find that search algorithms (SAs) are only competitive with but do not outperform the best greedy, coverage-based baselines. However, a simple greedy technique utilizing solely the performance change history (without coverage information) is equally or more effective than the best coverage-based techniques while being considerably more efficient, with a runtime overhead of less than 1%. These results show that simple, non-coverage-based techniques are a better fit for microbenchmarks than complex coverage-based techniques.", "venue": "IEEE Transactions on Software Engineering", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2022-11-24", "journal": {"name": "IEEE Transactions on Software Engineering"}, "authors": [{"authorId": "10420961", "name": "Christoph Laaber"}, {"authorId": "145456500", "name": "T. Yue"}, {"authorId": "47495965", "name": "Sajid Ali"}], "citations": []}
