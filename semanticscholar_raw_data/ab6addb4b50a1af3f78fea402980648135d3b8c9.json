{"paperId": "ab6addb4b50a1af3f78fea402980648135d3b8c9", "publicationVenue": null, "title": "On the unusual effectiveness of type-aware operator mutations for testing SMT solvers", "abstract": "We propose type-aware operator mutation, a simple, but unusually effective approach for testing SMT solvers. The key idea is to mutate operators of conforming types within the seed formulas to generate well-typed mutant formulas. These mutant formulas are then used as the test cases for SMT solvers. We realized type-aware operator mutation within the OpFuzz tool and used it to stress-test Z3 and CVC4, two state-of-the-art SMT solvers. Type-aware operator mutations are unusually effective: During one year of extensive testing with OpFuzz, we reported 1092 bugs on Z3\u2019s and CVC4\u2019s respective GitHub issue trackers, out of which 819 unique bugs were confirmed and 685 of the confirmed bugs were fixed by the developers. The detected bugs are highly diverse \u2014 we found bugs of many different types (soundness bugs, invalid model bugs, crashes, etc.), logics and solver configurations. We have further conducted an in-depth study of the bugs found by OpFuzz. The study results show that the bugs found by OpFuzz are of high quality. Many of them affect core components of the SMT solvers\u2019 codebases, and some required major changes for the developers to fix. Among the 819 confirmed bugs found by OpFuzz,184 were soundness bugs, the most critical bugs in SMT solvers,and 489 were in the default modes of the solvers. Notably, OpFuzz found 27 critical soundness bugs in CVC4, which has proved to be a very stable SMT solver.", "venue": "Proc. ACM Program. Lang.", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-04-19", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 25", "volume": "4"}, "authors": [{"authorId": "3431308", "name": "Dominik Winterer"}, {"authorId": "1625425838", "name": "Chengyu Zhang"}, {"authorId": "38319925", "name": "Z. Su"}], "citations": [{"paperId": "d4bdb3ea96026a61ab77e9fd1c96b8ad538009dc", "title": "Large Language Models are Edge-Case Generators: Crafting Unusual Programs for Fuzzing Deep Learning Libraries"}, {"paperId": "422e604aa123b70d06ff9a5d27808d69f47af465", "title": "Creating Thorough Tests for AI-Generated Code is Hard"}, {"paperId": "8dee01e6a622078ec9b4d9b3b8908c373f0b79a1", "title": "A systematic review of fuzzing"}, {"paperId": "776c2547daa30d69c1c437c7953aafba806f3b79", "title": "Mariposa: Measuring SMT Instability in Automated Program Verification"}, {"paperId": "743f2a45902db1c184fa90c4167c9dfbb9461948", "title": "SMT Solver Validation Empowered by Large Pre-Trained Language Models"}, {"paperId": "af700ca0ab7569d22c11fa3075dc4428273cb7ac", "title": "Explicit Refinement Types"}, {"paperId": "9a68e0b4dbc81d8ee1d24c367f555623758cec00", "title": "Fuzz4All: Universal Fuzzing with Large Language Models"}, {"paperId": "df170dd0f26ec903ee0a8d0ad89305ec60a125c5", "title": "Dependency-Aware Metamorphic Testing of Datalog Engines"}, {"paperId": "d6da86019c99888e9ccb6441eaafe2d3a204136b", "title": "HornFuzz: Fuzzing CHC solvers"}, {"paperId": "b45ec1cb2ba6b2d1ac24723fa836aee06a3db97a", "title": "Is Your Code Generated by ChatGPT Really Correct? Rigorous Evaluation of Large Language Models for Code Generation"}, {"paperId": "3af44447a6a7edca327d03ca5f0796885f09d87b", "title": "Validating SMT Solvers via Skeleton Enumeration Empowered by Historical Bug-Triggering Inputs"}, {"paperId": "61bc80a00cc30fe6bf3d0db83d41c1ace5eb37e2", "title": "Diver: Oracle-Guided SMT Solver Testing with Unrestricted Random Mutations"}, {"paperId": "545a5edfac8c72d0474166f95ee33e7a0928f101", "title": "Finding Specification Blind Spots via Fuzz Testing"}, {"paperId": "470754e17de89081f63dde4719922fe9b63251d5", "title": "Large Language Models are Edge-Case Fuzzers: Testing Deep Learning Libraries via FuzzGPT"}, {"paperId": "f84afb046ff36ddface9324536eba5159ac71c28", "title": "Demystifying Performance Regressions in String Solvers"}, {"paperId": "fade2908ce63509851a45c348ffe6428426067cf", "title": "Fuzzing Configurations of Program Options"}, {"paperId": "d7d02c13751c7999870505c4ddedba592edd4a32", "title": "BFF: foundational and automated verification of bitfield-manipulating programs"}, {"paperId": "2616a143f10df0500639a93360521ea2d3706bfc", "title": "Intramorphic Testing: A New Approach to the Test Oracle Problem"}, {"paperId": "8bbd1afd155d8d50eed29fc4b8fcd90afe4e8dea", "title": "Finding and Understanding Incompleteness Bugs in SMT Solvers"}, {"paperId": "caf771360f120f244074e060bd0c21f21f97213e", "title": "Testing Dafny (experience paper)"}, {"paperId": "71dd291b4be0d074982f521ff654468755084a76", "title": "GDsmith: Detecting Bugs in Graph Database Engines"}, {"paperId": "5526e9a0c7f49bffa256430b187d11d983dfc7f8", "title": "Finding typing compiler bugs"}, {"paperId": "32be4167181eaf3d3df4d6a76366b0115b30522b", "title": "EXAMINER: automatically locating inconsistent instructions between real devices and CPU emulators for ARM"}, {"paperId": "2b4d7a4a41fc0d1660d85ed19a91a970dc333b01", "title": "On Re-engineering the X.509 PKI with Executable Specification for Better Implementation Guarantees"}, {"paperId": "9364cf25b00ab901c36df177707d592efcf30e5c", "title": "Feedback-Guided Circuit Structure Mutation for Testing Hardware Model Checkers"}, {"paperId": "7eb4d5ba57f9870f516222bfa60aeb6e28236cca", "title": "Data-Driven Design and Evaluation of SMT Meta-Solving Strategies: Balancing Performance, Accuracy, and Cost"}, {"paperId": "3f650c0d0a046c1fb6c068d636b138e14ded77b9", "title": "Generative type-aware mutation for testing SMT solvers"}, {"paperId": "e6a4ddc65452fb2a01389b6e28e6607b8781710e", "title": "Skeletal approximation enumeration for SMT solver testing"}, {"paperId": "13cf48695d23f7e019d670a1bf059b7f28396992", "title": "Metamorphic testing of Datalog engines"}, {"paperId": "71480b018da385f569fa49b0ac20851f1d7c7c43", "title": "SMT solver testing with type and grammar based mutation"}, {"paperId": "794b91cf1617c622ed26b09aab68e21178326ce6", "title": "Multi-objective Evolutionary Algorithm for String SMT Solver Testing"}, {"paperId": "16e875924810f3ca0e1e6a45fc03515b7ece406c", "title": "Fuzzing SMT solvers via two-dimensional input space exploration"}, {"paperId": "73f9300fc9f23100a3d547d75e29a1f2335e742b", "title": "Automatically Locating ARM Instructions Deviation between Real Devices and CPU Emulators"}, {"paperId": "5ebf08cb76c768c369570d656d92709332a94ef9", "title": "Murxla: A Modular and Highly Extensible API Fuzzer for SMT Solvers"}, {"paperId": "042fe1666c6528947eab96d3f11df443fe069c66", "title": "BanditFuzz: Fuzzing SMT Solvers with Multi-agent Reinforcement Learning"}, {"paperId": "23444360666e6795dac593aa27cf11aef3e4a5e1", "title": "Automatically Testing SMT Solvers"}]}
