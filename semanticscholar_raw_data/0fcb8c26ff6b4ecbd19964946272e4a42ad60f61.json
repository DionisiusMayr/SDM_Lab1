{"paperId": "0fcb8c26ff6b4ecbd19964946272e4a42ad60f61", "publicationVenue": {"id": "138e58fc-8643-41c2-a92c-068ea4f4c607", "name": "PeerJ Computer Science", "alternate_names": ["Peerj Comput Sci"], "issn": "2376-5992", "url": "https://peerj.com/archives/?journal=cs", "alternate_urls": ["https://peerj.com/computer-science/", "http://peerj.com/cs"]}, "title": "Efficient processing of complex XSD using Hive and Spark", "abstract": "The eXtensible Markup Language (XML) files are widely used by the industry due to their flexibility in representing numerous kinds of data. Multiple applications such as financial records, social networks, and mobile networks use complex XML schemas with nested types, contents, and/or extension bases on existing complex elements or large real-world files. A great number of these files are generated each day and this has influenced the development of Big Data tools for their parsing and reporting, such as Apache Hive and Apache Spark. For these reasons, multiple studies have proposed new techniques and evaluated the processing of XML files with Big Data systems. However, a more usual approach in such works involves the simplest XML schemas, even though, real data sets are composed of complex schemas. Therefore, to shed light on complex XML schema processing for real-life applications with Big Data tools, we present an approach that combines three techniques. This comprises three main methods for parsing XML files: cataloging, deserialization, and positional explode. For cataloging, the elements of the XML schema are mapped into root, arrays, structures, values, and attributes. Based on these elements, the deserialization and positional explode are straightforwardly implemented. To demonstrate the validity of our proposal, we develop a case study by implementing a test environment to illustrate the methods using real data sets provided from performance management of two mobile network vendors. Our main results state the validity of the proposed method for different versions of Apache Hive and Apache Spark, obtain the query execution times for Apache Hive internal and external tables and Apache Spark data frames, and compare the query performance in Apache Hive with that of Apache Spark. Another contribution made is a case study in which a novel solution is proposed for data analysis in the performance management systems of mobile networks.", "venue": "PeerJ Computer Science", "year": 2021, "fieldsOfStudy": ["Computer Science", "Medicine"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-08-17", "journal": {"name": "PeerJ Computer Science", "volume": "7"}, "authors": [{"authorId": "1411186760", "name": "Diana Mart\u00ednez-Mosquera"}, {"authorId": "143807211", "name": "Rosa Navarrete"}, {"authorId": "1405522947", "name": "Sergio Luj\u00e1n-Mora"}], "citations": []}
