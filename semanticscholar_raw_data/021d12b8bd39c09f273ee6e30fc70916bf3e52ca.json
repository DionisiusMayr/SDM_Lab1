{"paperId": "021d12b8bd39c09f273ee6e30fc70916bf3e52ca", "publicationVenue": {"id": "57f970eb-366a-4bfa-aa06-2ff70d834806", "name": "IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing", "type": "conference", "alternate_names": ["Clust Comput Grid", "CCGRID", "IEEE/ACM Int Symp Clust Cloud Grid Comput", "IEEE/ACM International Symposium Cluster, Cloud and Grid Computing", "Cluster Computing and the Grid", "IEEE/ACM Int Symp Clust Cloud Internet Comput"], "url": "http://www.buyya.com/ccgrid/"}, "title": "A Distributed Path Query Engine for Temporal Property Graphs", "abstract": "Property graphs are a common form of linked data, with path queries used to traverse and explore them for enterprise transactions and mining. Temporal property graphs are a recent variant where time is a first-class entity to be queried over, and their properties and structure vary over time. These are seen in social, telecom and transit networks. However, current graph databases and query engines have limited support for temporal relations among graph entities, no support for time-varying entities and/or do not scale on distributed resources. We address this gap by extending a linear path query model over property graphs to include intuitive temporal predicates that operate over temporal graphs. We design a distributed execution model for these temporal path queries using the interval-centric computing model, and develop a novel cost model to select an efficient execution plan from several. We perform detailed experiments of our $\\mathcal{G}ranite$ distributed query engine using temporal property graphs as large as 52M vertices, 218M edges and 118M properties, and an 800-query workload, derived from the LDBC benchmark. We offer sub-second query latencies in most cases, which is 149\u00d7-1140\u00d7 faster compared to industry-leading Neo4J shared- memory graph database and the JanusGraph/Spark distributed graph query engine. Further, our cost model selects a query plan that is within 10% of the optimal execution time in 90% of the cases. We also scale well, and complete 100% of the queries for all graphs, compared to only 32-92% by baseline systems.", "venue": "IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-02-09", "journal": {"name": "2020 20th IEEE/ACM International Symposium on Cluster, Cloud and Internet Computing (CCGRID)", "pages": "499-508"}, "authors": [{"authorId": "1491748089", "name": "S. Ramesh"}, {"authorId": "1491747900", "name": "Animesh Baranawal"}, {"authorId": "1761220", "name": "Yogesh L. Simmhan"}], "citations": [{"paperId": "a01fd8bb8b6e3192122da318925c3c8e8f432c12", "title": "Kairos: Efficient Temporal Graph Analytics on a Single Machine"}, {"paperId": "930e95df36e260d4d5e4277c374125646c4dcf65", "title": "LYRIC: Deadline and Budget Aware Spatio-Temporal Query Processing in Cloud"}, {"paperId": "92ccdc6a4118257beeecca835cfa2e32efd7cf65", "title": "Graph data temporal evolutions: From conceptual modelling to implementation"}, {"paperId": "8ce31b2f836a1819754d78ad57da6a24d397c991", "title": "Optimizing the interval-centric distributed computing model for temporal graph algorithms"}, {"paperId": "7f2b9b4cb2d40f501a7605662c4f54448c116bc7", "title": "Granite: A distributed engine for scalable path queries over temporal property graphs"}, {"paperId": "d0c625b81770ed044c23fdc980f78937d4f67cca", "title": "Leveraging Temporal and Topological Selectivities in Temporal-clique Subgraph Query Processing"}, {"paperId": "282ecd6c9774c5bc8192943724b3d941a757b642", "title": "Supporting Dynamic Graphs and Temporal Entity Deletions in the LDBC Social Network Benchmark's Data Generator"}, {"paperId": "3740ab198988df6ee49cf262657ec81b7d446639", "title": "CCGrid 2020 TOC"}, {"paperId": "8672cb2a570c0c1f15490ed5a9d6a896c76ce67e", "title": "Description and evaluation of production goals"}]}
