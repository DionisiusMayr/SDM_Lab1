{"paperId": "d27ed24746f8550a7c38cc2348b887db454470b0", "publicationVenue": {"id": "6f40a31c-16c1-4eed-adaa-7f2dc14bf47a", "name": "International Workshop/Symposium on Database Programming Languages", "type": "conference", "alternate_names": ["Database Program Lang", "Database Programming Languages", "Int Work Database Program Lang", "DBPL"], "url": "http://www.wikicfp.com/cfp/program?id=660"}, "title": "Towards compiling graph queries in relational engines", "abstract": "The increasing demand for graph query processing has prompted the addition of support for graph workloads on top of standard relational database management systems (RDBMS). Although this appears like a good idea --- after all, graphs are just relations --- performance is typically suboptimal since graph workloads are naturally iterative and rely extensively on efficient traversal of adjacency structures that are not typically implemented in an RDBMS. Adding such specialized adjacency structures is not at all straightforward due to the complexity of typical RDBMS implementations. The iterative nature of graph queries also practically requires a form of runtime compilation and native code generation which adds another dimension of complexity to the RDBMS implementation and any potential extensions. In this paper, we demonstrate how the idea of the first Futamura projection, which links interpreted query engines and compilers through specialization, can be applied to compile graph workloads in an efficient way that simplifies the construction of relational engines which also support graph workloads. We extend the LB2 main-memory query compiler with graph adjacency structures and operators. We implement a subset of the Datalog logical query language evaluation to enable processing graph and recursive queries efficiently. The graph extension matches, and sometimes outperforms, best-of-breed low-level graph engines.", "venue": "International Workshop/Symposium on Database Programming Languages", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2019-06-23", "journal": {"name": "Proceedings of the 17th ACM SIGPLAN International Symposium on Database Programming Languages"}, "authors": [{"authorId": "21527679", "name": "Ruby Y. Tahboub"}, {"authorId": "3491668", "name": "Xilun Wu"}, {"authorId": "9931980", "name": "Gr\u00e9gory M. Essertel"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": [{"paperId": "5cf98f3f2a3dd9dc97994eb783190a2f4c91cf00", "title": "Compiling symbolic execution with staging and algebraic effects"}, {"paperId": "0c2ce71fa72cfd2c42fda13de5ef42fb5a250eda", "title": "Efficient Compilation of Regular Path Queries"}, {"paperId": "1200c9ecb97a84ab136290f69c6f6294f6f51aee", "title": "Architecting a Query Compiler for Spatial Workloads"}, {"paperId": "1fa72c835e6b1a38a2549bbbf4f3e9a0f6c9a23d", "title": "The collection Virtual Machine: an abstraction for multi-frontend multi-backend data analysis"}]}
