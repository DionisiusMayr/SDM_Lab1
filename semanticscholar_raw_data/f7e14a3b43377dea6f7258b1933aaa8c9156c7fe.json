{"paperId": "f7e14a3b43377dea6f7258b1933aaa8c9156c7fe", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Simple Adaptive Query Processing vs. Learned Query Optimizers: Observations and Analysis", "abstract": "\n There have been many decades of work on optimizing query processing in database management systems. Recently, modern machine learning (ML), and specifically reinforcement learning (RL), has gained increased attention as a means to develop a query optimizer (QO). In this work, we take a closer look at two recent state-of-the-art (SOTA) RL-based QO methods to better understand their behavior. We find that these RL-based methods do not generalize as well as it seems at first glance. Thus, we ask a simple question:\n How do SOTA RL-based QOs compare to a simple, modern, adaptive query processing approach?\n To answer this question, we choose two simple adaptive query processing techniques and implemented them in PostgreSQL. The first adapts an individual join operation on-the-fly and switches between a Nested Loop Join algorithm and a Hash Join algorithm to avoid sub-optimal join algorithm decisions. The second is a technique called\n Lookahead Information Passing\n (LIP), in which adaptive semijoin techniques are used to make a pipeline of join operations execute efficiently. To our surprise, we find that this simple adaptive query processing approach is not only competitive to the SOTA RL-based approaches but, in some cases, outperforms the RL-based approaches. The adaptive approach is also appealing because it does not require an expensive training step, and it is fully interpretable compared to the RL-based QO approaches. Further, the adaptive method works across complex query constructs that RL-based QO methods currently cannot optimize.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2023-07-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "2962-2975", "volume": "16"}, "authors": [{"authorId": "2145049376", "name": "Yunjia Zhang"}, {"authorId": "3388236", "name": "Yannis Chronis"}, {"authorId": "49111633", "name": "J. Patel"}, {"authorId": "145071799", "name": "Theodoros Rekatsinas"}], "citations": [{"paperId": "5145100a70727643f1104c7155a49ad512062e9b", "title": "TreeTracker Join: Turning the Tide When a Tuple Fails to Join"}, {"paperId": "e967d2838588d8a97a0872f58a8473f77b5f38ea", "title": "Is Your Learned Query Optimizer Behaving As You Expect? A Machine Learning Perspective"}]}
