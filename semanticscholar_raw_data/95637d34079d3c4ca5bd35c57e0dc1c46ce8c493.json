{"paperId": "95637d34079d3c4ca5bd35c57e0dc1c46ce8c493", "publicationVenue": null, "title": "Flan: An Expressive and Efficient Datalog Compiler for Program Analysis", "abstract": "Datalog has gained prominence in program analysis due to its expressiveness and ease of use. Its generic fixpoint resolution algorithm over relational domains simplifies the expression of many complex analyses. The performance and scalability issues of early Datalog approaches have been addressed by tools such as Souffl\u00e9 through specialized code generation. Still, while pure Datalog is expressive enough to support a wide range of analyses, there is a growing need for extensions to accommodate increasingly complex analyses. This has led to the development of various extensions, such as Flix, Datafun, and Formulog, which enhance Datalog with features like arbitrary lattices and SMT constraints. Most of these extensions recognize the need for full interoperability between Datalog and a full-fledged programming language, a functionality that high-performance systems like Souffl\u00e9 lack. Specifically, in most cases, they construct languages from scratch with first-class Datalog support, allowing greater flexibility. However, this flexibility often comes at the cost of performance due to the conflicting requirements of prioritizing modularity and abstraction over efficiency. Consequently, achieving both flexibility and compilation to highly-performant specialized code poses a significant challenge. In this work, we reconcile the competing demands of expressiveness and performance with Flan, a Datalog compiler fully embedded in Scala that leverages multi-stage programming to generate specialized code for enhanced performance. Our approach combines the flexibility of Flix with Souffl\u00e9\u2019s performance, offering seamless integration with the host language that enables the addition of powerful extensions while generating specialized code for the entire computation. Flan\u2019s simple operator interface allows the addition of an extensive set of features, including arbitrary aggregates, user-defined functions, and lattices, with multiple execution strategies such as binary and multi-way joins, supported by different indexing structures like specialized trees and hash tables, with minimal effort. We evaluate our system on a variety of benchmarks and compare it to established Datalog engines. Our results demonstrate competitive performance and speedups in the range of 1.4\u00d7 to 12.5\u00d7 compared to state-of-the-art systems for workloads of practical importance.", "venue": "Proc. ACM Program. Lang.", "year": 2024, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2024-01-05", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "2577 - 2609", "volume": "8"}, "authors": [{"authorId": "51428583", "name": "Supun Abeysinghe"}, {"authorId": "2172636683", "name": "Anxhelo Xhebraj"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": []}
