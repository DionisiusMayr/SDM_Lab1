{"paperId": "bb48df8040e8eddb9a5bc1794bd6cde8afae6b7f", "publicationVenue": {"id": "7bb54772-a70c-44df-9b9d-9f3b5354c0e2", "name": "IEEE International Parallel and Distributed Processing Symposium", "type": "conference", "alternate_names": ["IEEE Int Parallel Distrib Process Symp", "International Parallel and Distributed Processing Symposium", "IPDPS", "Int Parallel Distrib Process Symp"], "url": "http://www.ipdps.org/"}, "title": "Excavating the Potential of GPU for Accelerating Graph Traversal", "abstract": "Graph traversal is an essential procedure for a growing amount of applications today. This type of algorithms typically iterate input graph datasets until convergence and the logic of each iteration is quite simple. GPUs are used extensively as graph traversal accelerators due to the capability of massive parallelism and high-bandwidth memory access. However, existing methods are inefficient in two ways. First, streaming multiprocessors (SMs) are still underutilized due to the unbalanced load allocation and uncoalesced memory access. Second, they use space-inefficient data structures or need auxiliary data to assist traversal. It is undesirable, considering the limited GPU memory capacity. Moreover, existing designs commonly focus on optimizing kernel execution time. Data-transfer time is also notable in the whole procedure. Thus, space-efficient data structure and data-transfer policy should be concerned. In this paper, we propose EtaGraph, a novel GPU graph traversal framework optimized for GPU memory system and execution parallelism. EtaGraph has several features: 1). It uses a frontier-like kernel execution model, featuring a lightweight graph transformation procedure, named Unified Degree Cut, allowing GPU threads to process skewed graph efficiently without modification of raw data or introducing extra space overhead; 2). It uses on-demand data-transfer to overlap computation so that it optimizes the total time of data-transfer and execution; 3). It adopts an explicit utilization of Shared Memory to enhance memory coalescing and to improve effective memory bandwidth. Evaluation of EtaGraph shows significant and consistent speedups over the state-of-the-art GPU-based graph processing frameworks on both real-world and synthetic graphs.", "venue": "IEEE International Parallel and Distributed Processing Symposium", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-05-01", "journal": {"name": "2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)", "pages": "221-230"}, "authors": [{"authorId": "1914624198", "name": "Pengyu Wang"}, {"authorId": "2156144870", "name": "Lu Zhang"}, {"authorId": "46651954", "name": "Chao Li"}, {"authorId": "1697293", "name": "M. Guo"}], "citations": [{"paperId": "ecbfbdae1fad9c146ddb91a76b9a098588cd32f2", "title": "Treelet Prefetching For Ray Tracing"}, {"paperId": "8c428bdc7f49d848e283eabd5363b2bba5adb898", "title": "Path Merging Based Betweenness Centrality Algorithm in Delay Tolerant Networks"}, {"paperId": "e52549fdb6be6d36071143764b8d8862aabb930c", "title": "Optimizing GPU-Based Graph Sampling and Random Walk for Efficiency and Scalability"}, {"paperId": "44628f304bd47212aaa9b4215da53eb67676517f", "title": "Galliot: Path Merging Based Betweenness Centrality Algorithm on GPU"}, {"paperId": "fc821442359c27b85180b75d83633d5f6be4fe40", "title": "DynamAP: Architectural Support for Dynamic Graph Traversal on the Automata Processor"}, {"paperId": "6c60277503db8913a78a081b4e3d8d281f0a1384", "title": "Direct Device-to-Device Physical Page Migrations in Multi-FPGA Shared Virtual Memory Systems"}, {"paperId": "edd6d771e7e06904e8ae7b555a27e7d4b198caec", "title": "Excavating the Potential of Graph Workload on RDMA-based Far Memory Architecture"}, {"paperId": "b7765dc5b7f7216f228459554e534e2330efcdca", "title": "Oversubscribing GPU Unified Virtual Memory: Implications and Suggestions"}, {"paperId": "1bb06b95afd5515eea1ca02d0e2685d573d48917", "title": "On The Design of a Light-weight FPGA Programming Framework for Graph Applications"}, {"paperId": "dfcd4cbd47b17eb60392ff918e2b5191921b503e", "title": "Skywalker: Efficient Alias-Method-Based Graph Sampling and Random Walk on GPUs"}, {"paperId": "b37c5a96fe2f3389d9fe3addb8812634abb82164", "title": "Grus"}, {"paperId": "09e0624775766f9300a09eff2fc1a8efc8a6ee62", "title": "HALCONE : A Hardware-Level Timestamp-based Cache Coherence Scheme for Multi-GPU systems"}, {"paperId": "f5932c579281b63333df77d7b5a2e3bda78ac3e4", "title": "A Heterogeneous PIM Hardware-Software Co-Design for Energy-Efficient Graph Processing"}, {"paperId": "85cfaa2d86f39851573900776487fa95a08bea9d", "title": "PSL: Exploiting Parallelism, Sparsity and Locality to Accelerate Matrix Factorization on x86 Platforms"}]}
