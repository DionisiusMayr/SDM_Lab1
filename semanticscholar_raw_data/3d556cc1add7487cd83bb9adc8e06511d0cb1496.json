{"paperId": "3d556cc1add7487cd83bb9adc8e06511d0cb1496", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "Effective Spatial Data Partitioning for Scalable Query Processing", "abstract": "Recently, MapReduce based spatial query systems have emerged as a cost effective and scalable solution to large scale spatial data processing and analytics. MapReduce based systems achieve massive scalability by partitioning the data and running query tasks on those partitions in parallel. Therefore, effective data partitioning is critical for task parallelization, load balancing, and directly affects system performance. However, several pitfalls of spatial data partitioning make this task particularly challenging. First, data skew is very common in spatial applications. To achieve best query performance, data skew need to be reduced. Second, spatial partitioning approaches generate boundary objects that cross multiple partitions, and add extra query processing overhead. Consequently, boundary objects need to be minimized. Third, the high computational complexity of spatial partitioning algorithms combined with massive amounts of data require an efficient approach for partitioning to achieve overall fast query response. In this paper, we provide a systematic evaluation of multiple spatial partitioning methods with a set of different partitioning strategies, and study their implications on the performance of MapReduce based spatial queries. We also study sampling based partitioning methods and their impact on queries, and propose several MapReduce based high performance spatial partitioning methods. The main objective of our work is to provide a comprehensive guidance for optimal spatial data partitioning to support scalable and fast spatial data processing in massively parallel data processing frameworks such as MapReduce. The algorithms developed in this work are open source and can be easily integrated into different high performance spatial data processing systems.", "venue": "arXiv.org", "year": 2015, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2015-09-03", "journal": {"name": "ArXiv", "volume": "abs/1509.00910"}, "authors": [{"authorId": "1684441", "name": "Ablimit Aji"}, {"authorId": "143791693", "name": "Hoang Vo"}, {"authorId": "143924592", "name": "Fusheng Wang"}], "citations": [{"paperId": "f070526dcaa289f1135244a4308390089f65e830", "title": "GPU-Based Algorithms for Processing the k Nearest-Neighbor Query on Spatial Data Using Partitioning and Concurrent Kernel Execution"}, {"paperId": "2153b357c889842b22196f809ae4000ca7fe7b82", "title": "MIDET: A Method for Indexing Traffic Events"}, {"paperId": "ebbb742a02061b1985130f89d4791242d2b104d0", "title": "Parallel algorithm for improving the performance of spatial queries in SQL: The use cases of SQLite/SpatiaLite and PostgreSQL/PostGIS databases"}, {"paperId": "e2cb5b62596cd7c380538ebd7d78d60b43a0c7e4", "title": "Improving Distance-Join Query processing with Voronoi-Diagram based partitioning in SpatialHadoop"}, {"paperId": "3d877065e079f54ce1a97b6231b94def687dbb76", "title": "Efficient distance join query processing in distributed spatial data management systems"}, {"paperId": "9f08bc890534189eaefa6b41ccd8b1b2f34213e7", "title": "Generalized communication cost efficient multi-way spatial join: revisiting the curse of the last reducer"}, {"paperId": "26d9d6ca2b5944fe0fd37256e311ab964098daa9", "title": "A novel method for parallel indexing of real time geospatial big data generated by IoT devices"}, {"paperId": "588b68a368cc39bc8b49c606c0d1b3d701e2f8ca", "title": "Voronoi-Diagram Based Partitioning for Distance Join Query Processing in SpatialHadoop"}, {"paperId": "74850712a9651aa29754ce9fcca612a4998d9093", "title": "Computing over encrypted spatial data generated by IoT"}, {"paperId": "7d929446603fb80edda8cac361ff727b32ffcbc8", "title": "A framework for annotating OpenStreetMap objects using geo-tagged tweets"}, {"paperId": "bcdb3c295a6876128f48deb341337cff7b5bce56", "title": "Efficient large-scale distance-based join queries in spatialhadoop"}, {"paperId": "9610204f7b0d141dc8897658bda21f6e1098cba9", "title": "SliceNBound: Solving Closest Pairs and Distance Join Queries in Apache Spark"}, {"paperId": "1235bbbef1a710c8f35be450900cabf4b47b882b", "title": "Streaming Data Algorithm Design for Big Trajectory Data Analysis"}, {"paperId": "e8743f25be287451200d27d8c5b1a20276800e32", "title": "Spatial indexing and analytics on Hadoop"}, {"paperId": "b326e950ca86368056d2846444c25c61fedbc111", "title": "Mining Intelligence and Knowledge Exploration: 7th International Conference, MIKE 2019, Goa, India, December 19\u201322, 2019, Proceedings"}, {"paperId": "b78e611a8b6cb6ca898d6ca62d7014477cf1e3e8", "title": "Binary Space Partitioning for Parallel and Distributed Closest-Pairs Query Processing"}, {"paperId": "b0904ea85663d3eba48a29b23e8468e353afa1ae", "title": "Closest-Pairs Query Processing in Apache Spark"}, {"paperId": "79df30c121686e15c92742e0f84d82649365e465", "title": "2016 Ieee International Conference on Big Data (big Data) Implementing Trajectory Data Stream Analysis in Parallel"}, {"paperId": "1b4dbc0ab269ec41b256d973cd97de77cfc8ba27", "title": "2016 Ieee International Conference on Big Data (big Data) Parallel Gathering Discovery over Big Trajectory Data"}, {"paperId": "f410a1e8a96a806c59fa251c9df7d5b2ee08968f", "title": "E\ufb03cient distance join query processing in distributed spatial data management systems"}]}
