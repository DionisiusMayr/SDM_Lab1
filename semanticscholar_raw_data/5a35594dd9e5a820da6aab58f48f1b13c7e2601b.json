{"paperId": "5a35594dd9e5a820da6aab58f48f1b13c7e2601b", "publicationVenue": null, "title": "DiffStream: differential output testing for stream processing programs", "abstract": "High performance architectures for processing distributed data streams, such as Flink, Spark Streaming, and Storm, are increasingly deployed in emerging data-driven computing systems. Exploiting the parallelism afforded by such platforms, while preserving the semantics of the desired computation, is prone to errors, and motivates the development of tools for specification, testing, and verification. We focus on the problem of differential output testing for distributed stream processing systems, that is, checking whether two implementations produce equivalent output streams in response to a given input stream. The notion of equivalence allows reordering of logically independent data items, and the main technical contribution of the paper is an optimal online algorithm for checking this equivalence. Our testing framework is implemented as a library called DiffStream in Flink. We present four case studies to illustrate how our framework can be used to (1) correctly identify bugs in a set of benchmark MapReduce programs, (2) facilitate the development of difficult-to-parallelize high performance applications, and (3) monitor an application for a long period of time with minimal performance overhead.", "venue": "Proc. ACM Program. Lang.", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-11-13", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 29", "volume": "4"}, "authors": [{"authorId": "91973722", "name": "Konstantinos Kallas"}, {"authorId": "2643050", "name": "Filip Niksic"}, {"authorId": "20860470", "name": "C. Stanford"}, {"authorId": "1710176", "name": "R. Alur"}], "citations": [{"paperId": "ca4dac5abfe80563b1e1ae17b5c8c3eb157d1b69", "title": "Stream Types"}, {"paperId": "a2a514ed839dafdd0fb76d6c2615f25f35bf8087", "title": "Testing Graph Database Engines via Query Partitioning"}, {"paperId": "57a5677c71c6e3734476c8ca1a16fad58ff86d51", "title": "Fast Prototyping of Distributed Stream Processing Applications with stream2gym"}, {"paperId": "320d1c1967825833bdecf4062d5c354cd1dbc1aa", "title": "A Grey Literature Review on Data Stream Processing applications testing"}, {"paperId": "d0da09b12d16ea685532cdd47185ad2b888fc03a", "title": "Perfce: Performance Debugging on Databases with Chaos Engineering-Enhanced Causality Analysis"}, {"paperId": "af0ca5070920bd4134206d7ca32b35017e0d7b8c", "title": "Cloudprofiler: TSC-based inter-node profiling and high-throughput data ingestion for cloud streaming workloads"}, {"paperId": "a73256c9c192344902d27248d29c0efec243518c", "title": "SPOT: Testing Stream Processing Programs with Symbolic Execution and Stream Synthesizing"}, {"paperId": "e53df886cdafebf17c5e31792e7c51c54636543d", "title": "Synchronization Schemas"}, {"paperId": "347608eca1d00bacf0d7b24bdd5660ed1baaa342", "title": "s2p: Provenance Research for Stream Processing System"}, {"paperId": "be0675c2d63559d4a4babfcf64b7dbdab1c798be", "title": "Stream processing with dependency-guided synchronization"}, {"paperId": "63ecae5dee4b02fac2bcf0c5ad1e730b76f789d1", "title": "An order-aware dataflow model for parallel Unix pipelines"}, {"paperId": "1534a5716c1df08a24556a62dbf363e0375a4021", "title": "PaSh: light-touch data-parallel shell processing"}, {"paperId": "adf7135a4eaa4dc5457758808d5172d01c3bb188", "title": "DiSh: Dynamic Shell-Script Distribution"}, {"paperId": "f71717006cdcb7182ba450e9e7a6e29f384eaa81", "title": "Correctness in Stream Processing: Challenges and Opportunities"}, {"paperId": "f232b1bd730f6c4d4a48be5f642074dffb7a1ed0", "title": "Differential Monitoring"}, {"paperId": "b6c64dbe0130ef1bf6af12266b958a5d5396101f", "title": "Differential Monitoring - Technical Report \u22c6"}]}
