{"paperId": "a92ac38658b3a7f75e1836b9d9b6c41b21c40d79", "publicationVenue": {"id": "49699a88-4f79-403d-9250-6b3f361e5d7b", "name": "IEEE/ACM International Symposium on Code Generation and Optimization", "type": "conference", "alternate_names": ["CGO", "Symposium on Code Generation and Optimization", "IEEE/ACM Int Symp Code Gener Optim", "Symp Code Gener Optim"], "url": "http://www.cgo.org/"}, "title": "Compiling Graph Applications for GPU s with GraphIt", "abstract": "The performance of graph programs depends highly on the algorithm, the size and structure of the input graphs, as well as the features of the underlying hardware. No single set of optimizations or one hardware platform works well across all settings. To achieve high performance, the programmer must carefully select which set of optimizations and hardware platforms to use. The GraphIt programming language makes it easy for the programmer to write the algorithm once and optimize it for different inputs using a scheduling language. However, GraphIt currently has no support for generating highperformance code for GPUs. Programmers must resort to re-implementing the entire algorithm from scratch in a low-level language with an entirely different set of abstractions and optimizations in order to achieve high performance on GPUs. We propose G2, an extension to the GraphIt compiler framework, that achieves high performance on both CPUs and GPUs using the same algorithm specification. G2 significantly expands the optimization space of GPU graph processing frameworks with a novel GPU scheduling language and compiler that enables combining load balancing, edge traversal direction, active vertexset creation, active vertexset processing ordering, and kernel fusion optimizations. G2 also introduces two performance optimizations, Edge-based Thread Warps CTAs load balancing (ETWC) and EdgeBlocking, to expand the optimization space for GPUs. ETWC improves load balancing by dynamically partitioning the edges of each vertex into blocks that are assigned to threads, warps, and CTAs for execution. EdgeBlocking improves the locality of the program by reordering the edges and restricting random memory accesses to fit within the L2 cache. We evaluate G2 on 5 algorithms and 9 input graphs on both Pascal and Volta generation NVIDIA GPUs, and show that it achieves up to 5.11\u00d7 speedup over state-of-the-art GPU graph processing frameworks, and is the fastest on 66 out of the 90 experiments.", "venue": "IEEE/ACM International Symposium on Code Generation and Optimization", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2021-02-27", "journal": {"name": "2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)", "pages": "248-261"}, "authors": [{"authorId": "8871992", "name": "Ajay Brahmakshatriya"}, {"authorId": "1709150", "name": "Saman P. Amarasinghe"}], "citations": [{"paperId": "5099d7327a5c1551d97afc47f548d0243ea4549f", "title": "Seer: Predictive Runtime Kernel Selection for Irregular Problems"}, {"paperId": "f30c82d5bc12934982d5d6494b7a06553b84000c", "title": "A Bucket-aware Asynchronous Single-Source Shortest Path Algorithm on GPU"}, {"paperId": "548449b18b248f08f851d1ac7123b9d793c526c9", "title": "AdaptGear: Accelerating GNN Training via Adaptive Subgraph-Level Kernels on GPUs"}, {"paperId": "6910d6ea3bcab00af9f8fb943a590de1f148f6b3", "title": "Degree-Aware Kernel Mapping for Graph Processing on GPUs"}, {"paperId": "2d8de1a3a6c1107ff848a8416ee7667af928fa6b", "title": "D2X: An eXtensible conteXtual Debugger for Modern DSLs"}, {"paperId": "9dadfd97013f649fbfa5641ef829cc1d575040e4", "title": "uGrapher: High-Performance Graph Operator Computation via Unified Abstraction for Graph Neural Networks"}, {"paperId": "528a8bcb9a616154090f5bca021fa1b6661f52e4", "title": "A Programming Model for GPU Load Balancing"}, {"paperId": "7c9abae93ee7ff943b3ef5023e655e1ab8abc42a", "title": "Decoupling Schedule, Topology Layout, and Algorithm to Easily Enlarge the Tuning Space of GPU Graph Processing"}, {"paperId": "63b809349666fa571782b08364b68acbb1df0c2d", "title": "GraphIt to CUDA Compiler in 2021 LOC: A Case for High-Performance DSL Implementation via Staging with BuilDSL"}, {"paperId": "52a1f6849fab49681dc4005f176d7443c40e468a", "title": "A Deep Dive Into Understanding The Random Walk-Based Temporal Graph Learning"}, {"paperId": "5d647f9147dd0412cc45a36e40f8562e46988c24", "title": "Taming the Zoo: The Unified GraphIt Compiler Framework for Novel Architectures"}]}
