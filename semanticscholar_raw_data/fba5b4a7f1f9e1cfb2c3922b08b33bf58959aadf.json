{"paperId": "fba5b4a7f1f9e1cfb2c3922b08b33bf58959aadf", "publicationVenue": null, "title": "Automating and Optimizing Data-Centric What-If Analyses on Native Machine Learning Pipelines", "abstract": "Software systems that learn from data with machine learning (ML) are used in critical decision-making processes. Unfortunately, real-world experience shows that the pipelines for data preparation, feature encoding and model training in ML systems are often brittle with respect to their input data. As a consequence, data scientists have to run different kinds of data centric what-if analyses to evaluate the robustness and reliability of such pipelines, e.g., with respect to data errors or preprocessing techniques. These what-if analyses follow a common pattern: they take an existing ML pipeline, create a pipeline variant by introducing a small change, and execute this pipeline variant to see how the change impacts the pipeline's output score. The application of existing analysis techniques to ML pipelines is technically challenging as they are hard to integrate into existing pipeline code and their execution introduces large overheads due to repeated work. We propose mlwhatif to address these integration and efficiency challenges for data-centric what-if analyses on ML pipelines. mlwhatif enables data scientists to declaratively specify what-if analyses for an ML pipeline, and to automatically generate, optimize and execute the required pipeline variants. Our approach employs pipeline patches to specify changes to the data, operators and models of a pipeline. Based on these patches, we define a multi-query optimizer for efficiently executing the resulting pipeline variants jointly, with four subsumption-based optimization rules. Subsequently, we detail how to implement the pipeline variant generation and optimizer of mlwhatif. For that, we instrument native ML pipelines written in Python to extract dataflow plans with re-executable operators. We experimentally evaluate mlwhatif, and find that its speedup scales linearly with the number of pipeline variants in applicable cases, and is invariant to the input data size. In end-to-end experiments with four analyses on more than 60 pipelines, we show speedups of up to 13x compared to sequential execution, and find that the speedup is invariant to the model and featurization in the pipeline. Furthermore, we confirm the low instrumentation overhead of mlwhatif.", "venue": "Proc. ACM Manag. Data", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2023-06-13", "journal": {"name": "Proceedings of the ACM on Management of Data", "pages": "1 - 26", "volume": "1"}, "authors": [{"authorId": "1393463989", "name": "Stefan Grafberger"}, {"authorId": "1727784", "name": "Paul T. Groth"}, {"authorId": "2180399", "name": "Sebastian Schelter"}], "citations": [{"paperId": "81b2834f3f884785e94a8c4c1b0bf66f858e0d97", "title": "The Image Calculator: 10x Faster Image-AI Inference by Replacing JPEG with Self-designing Storage Format"}, {"paperId": "3ebf96c32ab9c46e320bd890eb022685bd93779a", "title": "MLWHATIF: What If You Could Stop Re-Implementing Your Machine Learning Pipeline Analyses Over and Over?"}, {"paperId": "bf614a57d1da7215230f3c167b85091509f381cd", "title": "Towards Declarative Systems for Data-Centric Machine Learning"}]}
