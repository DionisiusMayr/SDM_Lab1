{"paperId": "3b00eaabd4ee4357c6596db53558903e3d81f72b", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Language-Agnostic Integrated Queries in a Managed Polyglot Runtime", "abstract": "\n Language-integrated query (LINQ) frameworks offer a convenient programming abstraction for processing in-memory collections of data, allowing developers to concisely express declarative queries using general-purpose programming languages. Existing LINQ frameworks rely on the well-defined type system of statically-typed languages such as C\n #\n or Java to perform query compilation and execution. As a consequence of this design, they do not support dynamic languages such as Python, R, or JavaScript. Such languages are however very popular among data scientists, who would certainly benefit from LINQ frameworks in data analytics applications.\n \n In this work we bridge the gap between dynamic languages and LINQ frameworks. We introduce DynQ, a novel query engine designed for dynamic languages. DynQ is language-agnostic, since it is able to execute SQL queries in a polyglot language runtime. Moreover, DynQ can execute queries combining data from multiple sources, namely in-memory object collections as well as on-file data and external database systems. Our evaluation of DynQ shows performance comparable with equivalent hand-optimized code, and in line with common data-processing libraries and embedded databases, making DynQ an appealing query engine for standalone analytics applications and for data-intensive server-side workloads.", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-04-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "1414-1426", "volume": "14"}, "authors": [{"authorId": "51044752", "name": "F. Schiavio"}, {"authorId": "2066218", "name": "Daniele Bonetta"}, {"authorId": "144756486", "name": "Walter Binder"}], "citations": [{"paperId": "7bbd1762024afe9d9272eb24c594dfe984e81810", "title": "DynQ: a dynamic query engine with query-reuse capabilities embedded in a polyglot runtime"}, {"paperId": "00240a6dfe4053ab17a11e53dfe96d81083a304e", "title": "SQL to Stream with S2S: An Automatic Benchmark Generator for the Java Stream API"}, {"paperId": "cb65a74cfb043c595569fe76c7eb163bdcc99c87", "title": "Automatic Array Transformation to Columnar Storage at\u00a0Run\u00a0Time"}, {"paperId": "2ce31dc6b51c6540a283106ee7e1f780fdb07fa5", "title": "Columnar Formats for Schemaless LSM-based Document Stores"}, {"paperId": "c9d1833c215b67901422968f08fe795d8995ab7c", "title": "A simplified Architecture for Fast, Adaptive Compilation and Execution of SQL Queries"}]}
