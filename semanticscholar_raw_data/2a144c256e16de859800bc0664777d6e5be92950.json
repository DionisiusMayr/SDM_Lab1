{"paperId": "2a144c256e16de859800bc0664777d6e5be92950", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "The FastLanes Compression Layout: Decoding >100 Billion Integers per Second with Scalar Code", "abstract": "\n The open-source FastLanes project aims to improve big data formats, such as Parquet, ORC and columnar database formats, in multiple ways. In this paper, we significantly accelerate decoding of all common Light-Weight Compression (LWC) schemes: DICT, FOR, DELTA and RLE through better data-parallelism. We do so by re-designing the compression layout using two main ideas: (i) generalizing the\n value interleaving\n technique in the basic operation of bit-(un)packing by targeting a virtual 1024-bits SIMD register, (ii) reordering the tuples in all columns of a table in the same Unified Transposed Layout that puts tuple chunks in a common \"04261537\" order (explained in the paper); allowing for maximum independent work for all possible basic SIMD lane widths: 8, 16, 32, and 64 bits.\n \n We address the software development, maintenance and future-proofness challenges of increasing hardware diversity, by defining a virtual 1024-bits instruction set that consists of simple operators supported by all SIMD dialects; and also, importantly, by scalar code. The interleaved and tuple-reordered layout actually makes scalar decoding faster, extracting more data-parallelism from today's wide-issue CPUs. Importantly, the scalar version can be fully auto-vectorized by modern compilers, eliminating technical debt in software caused by platform-specific SIMD intrinsics.\n Micro-benchmarks on Intel, AMD, Apple and AWS CPUs show that FastLanes accelerates decoding by factors (decoding >40 values per CPU cycle). FastLanes can make queries faster, as compressing the data reduces bandwidth needs, while decoding is almost free.", "venue": "Proceedings of the VLDB Endowment", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2023-05-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "2132-2144", "volume": "16"}, "authors": [{"authorId": "2142247658", "name": "Azim Afroozeh"}, {"authorId": "1687211", "name": "P. Boncz"}], "citations": [{"paperId": "1ae08070d410f6b8e8c421a917984e253625ae6b", "title": "Corra: Correlation-Aware Column Compression"}, {"paperId": "069bceb8a9f88991c68cf04fecdecf79937db766", "title": "Locally-Adaptive Quantization for Streaming Vector Search"}, {"paperId": "80426d73fa4a7d9e2c47477c1fc8430674afa28e", "title": "ALP: Adaptive Lossless floating-Point Compression"}, {"paperId": "29b7849eca377f115e67b80e8fa2840f26e0e842", "title": "An Empirical Evaluation of Columnar Storage Formats"}, {"paperId": "6eea0aeb4045aa8a87012beffc522cbb45c9d844", "title": "Program your (custom) SIMD instruction set on FPGA in C++"}, {"paperId": "46fbdc121d8e6b20251fd12a0496112aa6b1a0bc", "title": "Evaluating SIMD Compiler-Intrinsics for Database Systems"}]}
