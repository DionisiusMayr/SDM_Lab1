{"paperId": "f61a31e2ac8e3de2415321ad63af70a6a8af1fa6", "publicationVenue": null, "title": "LSM-Trees Under (Memory) Pressure", "abstract": "Log-structured merge trees (LSM-trees) are widely used in modern key-value stores since they offer efficient data ingestion. To accelerate point lookups, LSM-trees employ filters such as Bloom filters (BFs) to reduce unnecessary storage accesses to levels that do not contain the desired key. BFs are particularly beneficial for empty queries while they might be a small burden for non-empty queries. Further, with larger datasets, the size of metadata like index and filters also increases, making it less feasible to keep all BFs in cache. Coupling this, with the increasing price of memory and the need to reduce the memory-to-data ratio in many practical deployments, we are seeing an increased memory pressure . In this setting, fewer BF blocks are cached, thus causing additional storage accesses, since they have to be fetched in memory to answer a query. In this paper, we introduce SHaMBa, a new LSM-based key-value engine that addresses the suboptimal performance when BFs do not fit in memory. SHaMBa integrates a new variation of BF, called Modular Bloom filters (MBFs) that replace a single Bloom filter with a set of mini-BFs ( modules ) having the same aggregate size and requiring the same total number of probes, distributed among the modules. Querying MBFs accesses the modules sequentially, resulting in the first module being more frequently in memory while the remaining modules compete with data blocks in case of positive queries. Further, we propose a new memory management policy and two BF-skipping strategies to avoid accessing BFs when they are ineffective. Our evaluation shows that SHaMBa substantially outperforms the state of the art under memory pressure, having the same average number of I/Os, needing only one-third of the memory consumed by the state of the art .", "venue": "ADMS@VLDB", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"pages": "23-35"}, "authors": [{"authorId": "3009412", "name": "J. Mun"}, {"authorId": "2140564220", "name": "Zichen Zhu"}, {"authorId": "2106382791", "name": "Aneesh Raman"}, {"authorId": "1840402", "name": "Manos Athanassoulis"}], "citations": [{"paperId": "49527bc5a3bb8a097bf84e15825f654497b73206", "title": "The LSM Design Space and its Read Optimizations"}]}
