{"paperId": "2bbe7c182af82c09005c32e6692a7de808b48cc3", "publicationVenue": null, "title": "Snek: Overloading Python Semantics via Virtualization", "abstract": "The Python language enjoys widespread adoption in a wide variety of domains spanning machine learning, scientific and high performance computing, and beyond. While implemented as libraries in Python, many Python frameworks aspire to be a domain-specific language (DSL), and often aim to bypass the Python interpreter. However, because Python\u2019s inherent ability to overload built-in structures such as declarations, conditionals, or loops is limited, these frameworks are often constrained to a suboptimal, API-centric interface that replicates these built-ins with framework-specific semantics. Such an approach ultimately yields productivity losses for programmers, especially when switching between or mixing frameworks, as users must memorize an ever-expanding list of method calls for performing even simple tasks such as constructing control flow. Furthermore, API designers are forced to create new, substituting abstractions for traditional programming constructs, forcing a steep learning curve for users. In this paper, we propose a structured methodology to allow DSL developers to use the whole of Python as a front-end, rather than creating equivalent APIs or relying on shims. Our methodology provides an extensive operator overloading and virtualization mechanism through the use of source code transformations, and enables powerful mechanisms like type-based multi-stage programming (which is popular in statically typed languages), without requiring explicit type information (e.g., via type annotations). We implement this methodology in a system called Snek, which represents the first type-driven multi-stage programming framework for a dynamic language which does not require extra-linguistic mechanisms, and demonstrate the ability to quickly and easily provide new semantics for Python constructs.", "venue": "", "year": 2019, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": null, "journal": null, "authors": [{"authorId": "117235241", "name": "James M. Decker"}, {"authorId": "40497400", "name": "D. Moldovan"}, {"authorId": "2115826274", "name": "A. A. Johnson"}, {"authorId": "2113006", "name": "Guannan Wei"}, {"authorId": "2113245767", "name": "Vritant Bhardwaj"}, {"authorId": "9931980", "name": "Gr\u00e9gory M. Essertel"}, {"authorId": "2148955949", "name": "Fei Wang"}, {"authorId": "49398909", "name": "Alexander B. Wiltschko"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": [{"paperId": "a72c5ff8bb28397049dfd49831d3208ed94fe4c2", "title": "Architecting Intermediate Layers for Efficient Composition of Data Management and Machine Learning Systems"}, {"paperId": "803d336ed10e6bf7e1ea7a878bdbe758341fa2f0", "title": "Tuplex: Data Science in Python at Native Code Speed"}]}
