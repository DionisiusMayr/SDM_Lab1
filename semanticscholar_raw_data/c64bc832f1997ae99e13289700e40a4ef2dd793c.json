{"paperId": "c64bc832f1997ae99e13289700e40a4ef2dd793c", "publicationVenue": {"id": "ccd8e532-73c6-414f-bc91-271bbb2933e2", "name": "Electronics", "type": "journal", "issn": "1450-5843", "alternate_issns": ["2079-9292", "0883-4989"], "url": "http://www.electronics.etfbl.net/", "alternate_urls": ["http://www.e-helvetica.nb.admin.ch/directAccess?callnumber=bel-247562", "http://nbn-resolving.de/urn/resolver.pl?urn=urn:nbn:ch:bel-247562", "https://www.mdpi.com/journal/electronics"]}, "title": "Distributed ItemCF Recommendation Algorithm Based on the Combination of MapReduce and Hive", "abstract": "The ItemCF algorithm is currently the most widely used recommendation algorithm in commercial applications. In the early days of recommender systems, most recommendation algorithms were run on a single machine rather than in parallel. This approach, coupled with the rapid growth of massive user behavior data in the current big data era, has led to a bottleneck in improving the execution efficiency of recommender systems. With the vigorous development of distributed technology, distributed ItemCF algorithms have become a research hotspot. Hadoop is a very popular distributed system infrastructure. MapReduce, which provides massive data computing, and Hive, a data warehousing tool, are the two core components of Hadoop, each with its own advantages and applicable scenarios. Scholars have already utilized MapReduce and Hive for the parallelization of the ItemCF algorithm. However, these pieces of literature make use of either MapReduce or Hive alone without fully leveraging the strengths of both. As a result, it has been difficult for parallel ItemCF recommendation algorithms to feature both simple and efficient implementation and high running efficiency. To address this issue, we proposed a distributed ItemCF recommendation algorithm based on the combination of MapReduce and Hive and named it HiMRItemCF. This algorithm divided ItemCF into six steps: deduplication, obtaining the preference matrixes of all users, obtaining the co-occurrence matrixes of all items, multiplying the two matrices to generate a three-dimensional matrix, aggregating the data of the three-dimensional matrix to obtain the recommendation scores of all users for all items, and sorting the scores in descending order, with Hive being used to carry out steps 1 and 6, and MapReduce for the other four steps involving more complex calculations and operations. The Hive jobs and MapReduce jobs are linked through Hive\u2019s external tables. After implementing the proposed algorithm using Java and running the program on three publicly available user shopping behavior datasets, we found that compared to algorithms that only use MapReduce jobs, the program implementing the proposed algorithm has fewer lines of source code, lower cyclomatic complexity and Halstead complexity, and can achieve a higher speedup ratio and parallel computing efficiency when processing all datasets. These experimental results indicate that the parallel and distributed ItemCF algorithm proposed in this paper, which combines MapReduce and Hive, has both the advantages of concise and easy-to-understand code as well as high time efficiency.", "venue": "Electronics", "year": 2023, "fieldsOfStudy": null, "publicationTypes": ["JournalArticle"], "publicationDate": "2023-08-10", "journal": {"name": "Electronics"}, "authors": [{"authorId": "15171729", "name": "Yijia Feng"}, {"authorId": "2152511573", "name": "Lei Wang"}], "citations": []}
