{"paperId": "ab7eac8eacf50dcb03a5b4a0776f1a248811826e", "publicationVenue": {"id": "0be0e7dd-a7b1-46dc-abb3-5226ed0e2289", "name": "IEEE International Conference on Cluster Computing", "type": "conference", "alternate_names": ["Int Conf Clust Comput", "IEEE Int Conf Clust Comput", "International Conference on Cluster Computing", "CLUSTER"], "url": "http://www.clustercomp.org/"}, "title": "Communication-Avoiding Recursive Aggregation", "abstract": "Recursive aggregation has been of considerable interest due to its unifying a wide range of deductive-analytic workloads, including social-media mining and graph analytics. For example, Single-Source Shortest Paths (SSSP), Connected Components (CC), and PageRank may all be expressed via recursive aggregates. Implementing recursive aggregation has posed a serious algorithmic challenge, with state-of-the-art work identifying sufficient conditions (e.g., pre-mappability) under which implementations may push aggregation within recursion, avoiding the serious materialization overhead inherent to traditional reachability-based methods (e.g., Datalog).State-of-the-art implementations of engines supporting recursive aggregates focus on large unified machines, due to the challenges posed by mixing semi-na\u00efve evaluation with distribution. In this work, we present an approach to implementing recursive aggregates on high-performance clusters which avoids the communication overhead inhibiting current-generation distributed systems to scale recursive aggregates to extremely high process counts. Our approach leverages the observation that aggregators form functional dependencies, allowing us to implement recursive aggregates via a high-parallel local aggregation to ensure maximal throughput. Additionally, we present a dynamic join planning mechanism, which customizes join order per-iteration based on dynamic relation sizes. We implemented our approach in PARALAGG, a library which allows the declarative implementation of queries which utilize recursive aggregates and executes them using our MPI-based runtime. We evaluate PARALAGG on a large unified node and leadership-class supercomputers, demonstrating scalability up to 16,384 processes.", "venue": "IEEE International Conference on Cluster Computing", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2023-10-31", "journal": {"name": "2023 IEEE International Conference on Cluster Computing (CLUSTER)", "pages": "197-208"}, "authors": [{"authorId": "2108541295", "name": "Yihao Sun"}, {"authorId": "2247737495", "name": "Sidharth Kumar"}, {"authorId": "2920296", "name": "Thomas Gilray"}, {"authorId": "3148306", "name": "Kristopher K. Micinski"}], "citations": []}
