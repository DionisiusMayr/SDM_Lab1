{"paperId": "e689b89b6de250e676243621d1c2c2a6cc7e2a22", "publicationVenue": {"id": "e35a87a3-a6c4-47bf-acca-3e615ddb9c58", "name": "ACM Transactions on Database Systems", "type": "journal", "alternate_names": ["ACM Trans Database Syst"], "issn": "0362-5915", "url": "http://www.acm.org/pubs/contents/journals/tods/", "alternate_urls": ["http://tods.acm.org/", "http://www.acm.org/tods/", "http://portal.acm.org/tods", "https://tods.acm.org/"]}, "title": "Building a Hybrid Warehouse", "abstract": "The Hadoop Distributed File System (HDFS) has become an important data repository in the enterprise as the center for all business analytics, from SQL queries and machine learning to reporting. At the same time, enterprise data warehouses (EDWs) continue to support critical business analytics. This has created the need for a new generation of a special federation between Hadoop-like big data platforms and EDWs, which we call the hybrid warehouse. There are many applications that require correlating data stored in HDFS with EDW data, such as the analysis that associates click logs stored in HDFS with the sales data stored in the database. All existing solutions reach out to HDFS and read the data into the EDW to perform the joins, assuming that the Hadoop side does not have efficient SQL support. In this article, we show that it is actually better to do most data processing on the HDFS side, provided that we can leverage a sophisticated execution engine for joins on the Hadoop side. We identify the best hybrid warehouse architecture by studying various algorithms to join database and HDFS tables. We utilize Bloom filters to minimize the data movement and exploit the massive parallelism in both systems to the fullest extent possible. We describe a new zigzag join algorithm and show that it is a robust join algorithm for hybrid warehouses that performs well in almost all cases. We further develop a sophisticated cost model for the various join algorithms and show that it can facilitate query optimization in the hybrid warehouse to correctly choose the right algorithm under different predicate and join selectivities.", "venue": "ACM Transactions on Database Systems", "year": 2016, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2016-11-02", "journal": {"name": "ACM Transactions on Database Systems (TODS)", "pages": "1 - 38", "volume": "41"}, "authors": [{"authorId": "1968180", "name": "Yuanyuan Tian"}, {"authorId": "143972996", "name": "Fatma \u00d6zcan"}, {"authorId": "2059112568", "name": "Tao Zou"}, {"authorId": "144121991", "name": "R. Goncalves"}, {"authorId": "2886859", "name": "H. Pirahesh"}], "citations": [{"paperId": "eadc9d297dc924d4c3e16f8a2b1d4606953ed4dd", "title": "Scaling Equi-Joins"}, {"paperId": "5d175f2479960733307f7f92c6fd9e108098753c", "title": "Efficiently Transforming Tables for Joinability"}, {"paperId": "ec2f9076448ba25a225618603adde60caa76c4df", "title": "Big data management challenges in health research - a literature review"}, {"paperId": "f4fb90d390171d98cb8e5c7290b38a89a40f1142", "title": "Distributed Joins and Data Placement for Minimal Network Traffic"}, {"paperId": "922f4b4f93b16d38df7db0f0c001cdd562d76819", "title": "ApproxJoin"}, {"paperId": "758dc18fe6cfff74e4a487612d336a34c8805e61", "title": "Faster Querying for Database Integration and Virtualization with Distributed Semi-Joins"}, {"paperId": "169af5f4513184bc0d34aaaee5e7418cb7fbe47d", "title": "Hybrid Systems Based on Traditional Database Extensions"}, {"paperId": "594431460786e656eb91f88fbccb960aecfedc9e", "title": "Big Data Indexing"}, {"paperId": "788fbf043705998e1c4738949bc54dc7c58b6744", "title": "Automatyczna analiza tre\u015bci nieustrukturyzowanej jako przyk\u0142ad \u017ar\u00f3d\u0142a informacji dla administracji publicznej"}]}
