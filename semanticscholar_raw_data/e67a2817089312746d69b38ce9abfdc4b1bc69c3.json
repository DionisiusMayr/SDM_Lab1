{"paperId": "e67a2817089312746d69b38ce9abfdc4b1bc69c3", "publicationVenue": {"id": "289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0", "name": "International Symposium on Software Testing and Analysis", "type": "conference", "alternate_names": ["ISSTA", "Int Symp Softw Test Anal"], "url": "https://dl.acm.org/conference/issta"}, "title": "Finding bugs in Gremlin-based graph database systems via Randomized differential testing", "abstract": "Graph database systems (GDBs) allow efficiently storing and retrieving graph data, and have become the critical component in many applications, e.g., knowledge graphs, social networks, and fraud detection. It is important to ensure that GDBs operate correctly. Logic bugs can occur and make GDBs return an incorrect result for a given query. These bugs are critical and can easily go unnoticed by developers when the graph and queries become complicated. Despite the importance of GDBs, logic bugs in GDBs have received less attention than those in relational database systems. In this paper, we present Grand, an approach for automatically finding logic bugs in GDBs that adopt Gremlin as their query language. The core idea of Grand is to construct semantically equivalent databases for multiple GDBs, and then compare the results of a Gremlin query on these databases. If the return results of a query on multiple GDBs are different, the likely cause is a logic bug in these GDBs. To effectively test GDBs, we propose a model-based query generation approach to generate valid Gremlin queries that can potentially return non-empty results, and a data mapping approach to unify the format of query results for different GDBs. We evaluate Grand on six widely-used GDBs, e.g., Neo4j and HugeGraph. In total, we have found 21 previously-unknown logic bugs in these GDBs. Among them, developers have confirmed 18 bugs, and fixed 7 bugs.", "venue": "International Symposium on Software Testing and Analysis", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2022-07-18", "journal": {"name": "Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis"}, "authors": [{"authorId": "2158585032", "name": "Yingying Zheng"}, {"authorId": "2964640", "name": "Wensheng Dou"}, {"authorId": "134898163", "name": "Yicheng Wang"}, {"authorId": "2093481779", "name": "Zheng Qin"}, {"authorId": "2131285720", "name": "Leile Tang"}, {"authorId": "2118120527", "name": "Yu Gao"}, {"authorId": "2152692124", "name": "Dong Wang"}, {"authorId": "40231586", "name": "Wei Wang"}, {"authorId": "144525882", "name": "Jun Wei"}], "citations": [{"paperId": "321f669f888e43e8f44390985a5da2d3fabe8a7e", "title": "Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Query Transformation"}, {"paperId": "1072e6d03a19b157356c5da57257b2b92eefc68c", "title": "Effective Bug Detection in Graph Database Engines: An LLM-based Approach"}, {"paperId": "c39d40e3127a56a0abe12f2fb1d698ea6ba1724d", "title": "Finding XPath Bugs in XML Document Processors via Differential Testing"}, {"paperId": "75138d0b517e8c86157548e9dd5429eae4ff3e5a", "title": "On Mutation Testing of Graph Database Queries in the Cypher Language"}, {"paperId": "ac441cb1810dce8e41d9cd554366b72aa182bf41", "title": "Testing Graph Database Systems via Graph-Aware Metamorphic Relations"}, {"paperId": "5ff9885778f8ec824beaeb6802af5c82e299f702", "title": "A Comprehensive Survey on Database Management System Fuzzing: Techniques, Taxonomy and Experimental Comparison"}, {"paperId": "cc095f9ce71982a8dcc0ea1b813a7486b3f6c962", "title": "Retromorphic Testing: A New Approach to the Test Oracle Problem"}, {"paperId": "a2a514ed839dafdd0fb76d6c2615f25f35bf8087", "title": "Testing Graph Database Engines via Query Partitioning"}, {"paperId": "6c755fc901d0b41a5d73c265f64a5aacf62e83b8", "title": "GDsmith: Detecting Bugs in Cypher Graph Database Engines"}, {"paperId": "0b083953239d0617b534a0d76762fa8350db4e6f", "title": "Randomized Differential Testing of RDF Stores"}, {"paperId": "5724e138fc08329e0baa08d2090d9424df1cb945", "title": "Testing Database Systems via Differential Query Execution"}, {"paperId": "a9fa1a56ba118fa3b629fc6308d6b5606751f023", "title": "Detecting Isolation Bugs via Transaction Oracle Construction"}, {"paperId": "b3135c616d6267fe1d2b4ca9d27c8792c0acf3e5", "title": "Differentially Testing Database Transactions for Fun and Profit"}, {"paperId": "5c47e23ec4d2d8c6641ce7671b2054a5fff1911f", "title": "Finding Bugs in Gremlin-Based Graph Database Systems via Randomized Differential Testing Graph database systems, differential testing, Gremlin"}, {"paperId": "c8376be6e5d269467545de4edffe06bb2b74b1c7", "title": "Understanding Transaction Bugs in Database Systems"}]}
