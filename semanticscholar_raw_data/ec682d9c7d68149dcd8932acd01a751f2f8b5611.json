{"paperId": "ec682d9c7d68149dcd8932acd01a751f2f8b5611", "publicationVenue": {"id": "a36dc29e-4ea1-4567-b0fe-1c06daf8bee8", "name": "International Conference on Software Engineering", "type": "conference", "alternate_names": ["Int Conf Softw Eng", "ICSE"], "url": "http://www.icse-conferences.org/"}, "title": "Testing Database Engines via Query Plan Guidance", "abstract": "Database systems are widely used to store and query data. Test oracles have been proposed to find logic bugs in such systems, that is, bugs that cause the database system to compute an incorrect result. To realize a fully automated testing approach, such test oracles are paired with a test case generation technique; a test case refers to a database state and a query on which the test oracle can be applied. In this work, we propose the concept of Query Plan Guidance (QPG) for guiding automated testing towards \u201cinteresting\u201d test cases. SQL and other query languages are declarative. Thus, to execute a query, the database system translates every operator in the source language to one of the potentially many so-called physical operators that can be executed; the tree of physical operators is referred to as the query plan. Our intuition is that by steering testing towards exploring a variety of unique query plans, we also explore more interesting behaviors-some of which are potentially incorrect. To this end, we propose a mutation technique that gradually applies promising mutations to the database state, causing the DBMS to create potentially unseen query plans for subsequent queries. We applied our method to three mature, widely-used, and extensively-tested database systems-SQLite, TiDB, and CockroachDB-and found 53 unique, previously unknown bugs. Our method exercises $4.85-408.48\\times$ more unique query plans than a naive random generation method and $7.46\\times$ more than a code coverage guidance method. Since most database systems-including commercial ones-expose query plans to the user, we consider QPG a generally applicable, black-box approach and believe that the core idea could also be applied in other contexts (e.g., to measure the quality of a test suite).", "venue": "International Conference on Software Engineering", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2023-05-01", "journal": {"name": "2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)", "pages": "2060-2071"}, "authors": [{"authorId": "2161601891", "name": "Jinsheng Ba"}, {"authorId": "2868147", "name": "Manuel Rigger"}], "citations": [{"paperId": "321f669f888e43e8f44390985a5da2d3fabe8a7e", "title": "Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Query Transformation"}, {"paperId": "c39d40e3127a56a0abe12f2fb1d698ea6ba1724d", "title": "Finding XPath Bugs in XML Document Processors via Differential Testing"}, {"paperId": "5ff9885778f8ec824beaeb6802af5c82e299f702", "title": "A Comprehensive Survey on Database Management System Fuzzing: Techniques, Taxonomy and Experimental Comparison"}, {"paperId": "7c4173e9df28137dcf56cfd0f13c1d0dd11908f3", "title": "A Demonstration of DLBD: Database Logic Bug Detection System"}, {"paperId": "0b083953239d0617b534a0d76762fa8350db4e6f", "title": "Randomized Differential Testing of RDF Stores"}, {"paperId": "5724e138fc08329e0baa08d2090d9424df1cb945", "title": "Testing Database Systems via Differential Query Execution"}, {"paperId": "a9fa1a56ba118fa3b629fc6308d6b5606751f023", "title": "Detecting Isolation Bugs via Transaction Oracle Construction"}, {"paperId": "c8376be6e5d269467545de4edffe06bb2b74b1c7", "title": "Understanding Transaction Bugs in Database Systems"}]}
