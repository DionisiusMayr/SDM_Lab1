{"paperId": "5347701b93dfa1342b7b6a4f708e2c504337ed75", "publicationVenue": null, "title": "UDF to SQL translation through compositional lazy inductive synthesis", "abstract": "Many data processing systems allow SQL queries that call user-defined functions (UDFs) written in conventional programming languages. While such SQL extensions provide convenience and flexibility to users, queries involving UDFs are not as efficient as their pure SQL counterparts that invoke SQL\u2019s highly-optimized built-in functions. Motivated by this problem, we propose a new technique for translating SQL queries with UDFs to pure SQL expressions. Unlike prior work in this space, our method is not based on syntactic rewrite rules and can handle a much more general class of UDFs. At a high-level, our method is based on counterexample-guided inductive synthesis (CEGIS) but employs a novel compositional strategy that decomposes the synthesis task into simpler sub-problems. However, because there is no universal decomposition strategy that works for all UDFs, we propose a novel lazy inductive synthesis approach that generates a sequence of decompositions that correspond to increasingly harder inductive synthesis problems. Because most realistic UDF-to-SQL translation tasks are amenable to a fine-grained decomposition strategy, our lazy inductive synthesis method scales significantly better than traditional CEGIS. We have implemented our proposed technique in a tool called CLIS for optimizing Spark SQL programs containing Scala UDFs. To evaluate CLIS, we manually study 100 randomly selected UDFs and find that 63 of them can be expressed in pure SQL. Our evaluation on these 63 UDFs shows that CLIS can automatically synthesize equivalent SQL expressions in 92% of the cases and that it can solve 2.4\u00d7 more benchmarks compared to a baseline that does not use our compositional approach. We also show that CLIS yields an average speed-up of 3.5\u00d7 for individual UDFs and 1.3\u00d7 to 3.1\u00d7 in terms of end-to-end application performance.", "venue": "Proc. ACM Program. Lang.", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-10-15", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 26", "volume": "5"}, "authors": [{"authorId": "2116725626", "name": "Guoqiang Zhang"}, {"authorId": "7870162", "name": "Yuanchao Xu"}, {"authorId": "37914192", "name": "Xipeng Shen"}, {"authorId": "1714075", "name": "I\u015f\u0131l Dillig"}], "citations": [{"paperId": "49d9666d6e3dd5a5a49a9db500c2683c23132b91", "title": "Efficient Execution of User-Defined Functions in SQL Queries"}, {"paperId": "62ab0c752b63393c9462ef2b749cd7545d2b1a49", "title": "Predicate Pushdown for Data Science Pipelines"}, {"paperId": "1327c45d73c5c1e9c7d5de44767f7b1570d0afa5", "title": "Data Extraction via Semantic Regular Expression Synthesis"}, {"paperId": "11b4cda8d6aa5ec48cf99c86ef217d5de9b2a169", "title": "Automated Translation of Functional Big Data Queries to SQL"}, {"paperId": "3fb4813a08ecbbf4ceb31f722713f4bc8366e709", "title": "User-Defined Functions in Modern Data Engines"}, {"paperId": "56dad91744bc4ae8f1eeaf0f41b19ce19b568a95", "title": "Snakes on a Plan: Compiling Python Functions into Plain SQL Queries"}]}
