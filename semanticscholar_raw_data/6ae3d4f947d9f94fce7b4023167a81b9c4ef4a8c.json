{"paperId": "6ae3d4f947d9f94fce7b4023167a81b9c4ef4a8c", "publicationVenue": {"id": "2633f5b2-c15c-49fe-80f5-07523e770c26", "name": "IEEE Access", "type": "journal", "issn": "2169-3536", "url": "http://www.ieee.org/publications_standards/publications/ieee_access.html", "alternate_urls": ["http://ieeexplore.ieee.org/servlet/opac?punumber=6287639"]}, "title": "A Performance Analysis of Fault Recovery in Stream Processing Frameworks", "abstract": "Distributed stream processing frameworks have gained widespread adoption in the last decade because they abstract away the complexity of parallel processing. One of their key features is built-in fault tolerance. In this work, we dive deeper into the implementation, performance, and efficiency of this critical feature for four state-of-the-art frameworks. We include the established Spark Streaming and Flink frameworks and the more novel Spark Structured Streaming and Kafka Streams frameworks. We test the behavior under different types of faults and settings: master failure with and without high-availability setups, driver failures for Spark frameworks, worker failure with or without exactly-once semantics, application and task failures. We highlight differences in behavior during these failures on several aspects, e.g., whether there is an outage, downtime, recovery time, data loss, duplicate processing, accuracy, and the cost and behavior of different message delivery guarantees. Our results highlight the impact of framework design on the speed of fault recovery and explain how different use cases may benefit from different approaches. Due to their task-based scheduling approach, the Spark frameworks can recover within 30 seconds and in most cases without necessitating an application restart. Kafka Streams has only a few seconds of downtime, but is slower at catching up on delays. Finally, Flink can offer end-to-end exactly-once semantics at a low cost but requires job restarts for most failures leading to high recovery times of around 50 seconds.", "venue": "IEEE Access", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"name": "IEEE Access", "pages": "93745-93763", "volume": "9"}, "authors": [{"authorId": "1606011565", "name": "Giselle van Dongen"}, {"authorId": "1741136", "name": "D. V. Poel"}], "citations": [{"paperId": "89e87add8f188fea27767955d3deea851a6f4a29", "title": "ShuffleBench: A Benchmark for Large-Scale Data Shuffling Operations with Distributed Stream Processing Frameworks"}, {"paperId": "d1bd31903dfaca8b60393d141f516ac09588f4c1", "title": "Multi-Objective Optimization of Consumer Group Autoscaling in Message Broker Systems"}, {"paperId": "721747f4479f1fca3c080669f8d9989f3b09bb4f", "title": "A systematic mapping of performance in distributed stream processing systems"}, {"paperId": "f1ce59032afa6ae165e1fec947afe06b80f0d95a", "title": "Streamlining Enterprise Data Processing, Reporting and Realtime Alerting using Apache Kafka"}, {"paperId": "28fd72b687d8292725b03fcf52d2990d9e760c59", "title": "An online and highly-scalable streaming platform for filtering trolls with transfer learning"}, {"paperId": "888e0663a522e9e951dc6a7b0f210ad9ae93da71", "title": "Traveling Back in Time: A Visual Debugger for Stream Processing Applications"}, {"paperId": "8f876c2a8f9766606fe18272535a728f3c04afc0", "title": "Benchmarking scalability of stream processing frameworks deployed as microservices in the cloud"}, {"paperId": "f13822098a392676416a934cb940f13b0d52a1fb", "title": "Region-based Sub-Snapshot (RegSnap): Enhanced Fault Tolerance in Distributed Stream Processing with Partial Snapshot"}, {"paperId": "aedd805e7ce7ec115d0adf420af9303c210b39d8", "title": "Big-Data Platform for Performance Monitoring of Telecom-Service-Provider Networks"}, {"paperId": "f4746891071a1c1de75f1295937ec12ac4f6d7c8", "title": "Benchmarking Apache Kafka under network faults"}, {"paperId": "d01fa90ee9444121aaa3e814e4876598f593cd3f", "title": "Benchmarking scalability of stream processing frameworks deployed as event-driven microservices in the cloud"}, {"paperId": "8a0090a38259d4ee5860354542bb19aecaab24dd", "title": "Influencing Factors in the Scalability of Distributed Stream Processing Jobs"}]}
