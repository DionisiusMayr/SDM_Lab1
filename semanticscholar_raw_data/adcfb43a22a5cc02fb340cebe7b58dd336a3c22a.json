{"paperId": "adcfb43a22a5cc02fb340cebe7b58dd336a3c22a", "publicationVenue": {"id": "d4610af5-85e0-480b-8773-5c71d92a7b99", "name": "International Conference on Architectural Support for Programming Languages and Operating Systems", "type": "conference", "alternate_names": ["ASPLOS", "Int Conf Archit Support Program Lang Oper Syst", "Archit Support Program Lang Oper Syst", "Architectural Support for Programming Languages and Operating Systems"], "url": "http://www.acm.org/sigplan/"}, "title": "TeraHeap: Reducing Memory Pressure in Managed Big Data Frameworks", "abstract": "Big data analytics frameworks, such as Spark and Giraph, need to process and cache massive amounts of data that do not always fit on the managed heap. Therefore, frameworks temporarily move long-lived objects outside the managed heap (off-heap) on a fast storage device. However, this practice results in (1) high serialization/deserialization (S/D) cost and (2) high memory pressure when off-heap objects are moved back to the heap for processing. In this paper, we propose TeraHeap, a system that eliminates S/D overhead and expensive GC scans for a large portion of the objects in big data frameworks. TeraHeap relies on three concepts. (1) It eliminates S/D cost by extending the managed runtime (JVM) to use a second high-capacity heap (H2) over a fast storage device. (2) It offers a simple hint-based interface, allowing big data analytics frameworks to leverage knowledge about objects to populate H2. (3) It reduces GC cost by fencing the garbage collector from scanning H2 objects while maintaining the illusion of a single managed heap. We implement TeraHeap in OpenJDK and evaluate it with 15 widely used applications in two real-world big data frameworks, Spark and Giraph. Our evaluation shows that for the same DRAM size, TeraHeap improves performance by up to 73% and 28% compared to native Spark and Giraph, respectively. Also, it provides better performance by consuming up to 4.6\u00d7 and 1.2\u00d7 less DRAM capacity than native Spark and Giraph, respectively. Finally, it outperforms Panthera, a state-of-the-art garbage collector for hybrid memories, by up to 69%.", "venue": "International Conference on Architectural Support for Programming Languages and Operating Systems", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2023-03-25", "journal": {"name": "Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 3"}, "authors": [{"authorId": "41019190", "name": "Iacovos G. Kolokasis"}, {"authorId": "2141573730", "name": "Giannos Evdorou"}, {"authorId": "2966695", "name": "Shoaib Akram"}, {"authorId": "3221688", "name": "C. Kozanitis"}, {"authorId": "40504832", "name": "Anastasios Papagiannis"}, {"authorId": "3204611", "name": "Foivos S. Zakkak"}, {"authorId": "2385564", "name": "Polyvios Pratikakis"}, {"authorId": "1805177", "name": "A. Bilas"}], "citations": [{"paperId": "6efe672f20ab649641d55b202b24a70b6b19e340", "title": "Accelerating Multilingual Applications with In-memory Array Sharing"}, {"paperId": "1aa236c29ecb81e613604eb7546b372551cf9c12", "title": "AltOOM: A Data-driven Out of Memory Root Cause Identification Strategy"}, {"paperId": "0099573e4bee3a1c83c46b20bd0e6bf4a1f0cc13", "title": "Analyzing and Improving the Scalability of In-Memory Indices for Managed Search Engines"}]}
