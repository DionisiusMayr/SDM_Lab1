{"paperId": "b4a7c65ae255ffd2acc44c38fa1f3b6d85b12bc9", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "StreamOps: Cloud-Native Runtime Management for Streaming Services in ByteDance", "abstract": "Stream processing is widely used for real-time data processing and decision-making, leading to tens of thousands of streaming jobs deployed in ByteDance cloud. Since those streaming jobs usually run for several days or longer and the input workloads vary over time, they usually face diverse runtime issues such as processing lag and varying failures. This requires runtime management to resolve such runtime issues automatically. However, designing a runtime management service on the ByteDance scale is challenging. In particular, the service has to concurrently manage cluster-wide streaming jobs in a scalable and extensible manner. Furthermore, it should also be able to manage diverse streaming jobs effectively.\n \n To this end, we propose\n StreamOps\n to enable cloud-native runtime management for streaming jobs in ByteDance.\n StreamOps\n has three main designs to address the challenges. 1) To allow for scalability,\n StreamOps\n is running as a standalone lightweight control plane to manage cluster-wide streaming jobs. 2) To enable extensible runtime management,\n StreamOps\n abstracts control policies to identify and resolve runtime issues. New control policies can be implemented with a detect-diagnose-resolve programming paradigm. Each control policy is also configurable for different streaming jobs according to the performance requirements. 3) To mitigate processing lag and handling failures effectively,\n StreamOps\n features three control policies, i.e., auto-scaler, straggler detector, and job doctor, that are inspired by state-of-the-art research and production experiences at ByteDance. In this paper, we introduce the design decisions we made and the experiences we learned from building\n StreamOps.\n We evaluate\n StreamOps\n in our production environment, and the experiment results have further validated our system design.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2023-08-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "3501-3514", "volume": "16"}, "authors": [{"authorId": "2152119732", "name": "Yancan Mao"}, {"authorId": "2242467785", "name": "Zhanghao Chen"}, {"authorId": "2242326588", "name": "Yifan Zhang"}, {"authorId": "2243853128", "name": "Meng Wang"}, {"authorId": "2242328884", "name": "Yong Fang"}, {"authorId": "2242724289", "name": "Guanghui Zhang"}, {"authorId": "2242269365", "name": "Rui Shi"}, {"authorId": "2242397702", "name": "Richard T. B. Ma"}], "citations": []}
