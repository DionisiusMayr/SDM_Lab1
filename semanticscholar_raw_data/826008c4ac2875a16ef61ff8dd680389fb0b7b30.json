{"paperId": "826008c4ac2875a16ef61ff8dd680389fb0b7b30", "publicationVenue": {"id": "764e3630-ddac-4c21-af4b-9d32ffef082e", "name": "IEEE International Conference on Data Engineering", "type": "conference", "alternate_names": ["ICDE", "Int Conf Data Eng", "IEEE Int Conf Data Eng", "International Conference on Data Engineering"], "url": "http://www.wikicfp.com/cfp/program?id=1331"}, "title": "Regular Path Query Evaluation Sharing a Reduced Transitive Closure Based on Graph Reduction", "abstract": "Regular path queries (RPQs) find pairs of vertices of paths satisfying given regular expressions on an edge-labeled, directed multigraph. When evaluating an RPQ, the evaluation of a Kleene closure is very expensive. Furthermore, when multiple RPQs include a Kleene closure as a common sub-query, repeated evaluations of the common sub-query cause serious performance degradation. In this paper, we present a novel concept of RPQ-based graph reduction, which significantly simplifies the original graph through edge-level and vertex-level reductions. Interestingly, RPQ-based graph reduction can replace the evaluation of the Kleene closure on the large original graph to that of the transitive closure to the small reduced graph. We then propose a reduced transitive closure (RTC) as a lightweight structure for efficiently sharing the result of a Kleene closure. We also present an RPQ evaluation algorithm, RTCSharing, which treats each clause in the disjunctive normal form of the given RPQ as a batch unit. If the batch units include a Kleene closure as a common sub-query, we share the lightweight RTC instead of the heavyweight result of the Kleene closure. RPQ-based graph reduction further enables us to formally represent the result of an RPQ including a Kleene closure as a relational algebra expression including the RTC. Through the formal expression, we optimize the evaluation of the batch unit by eliminating useless and redundant operations of the previous method. Experiments show that RTCSharing improves the performance significantly by up to 73.86 times compared with existing methods in terms of query response time.", "venue": "IEEE International Conference on Data Engineering", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2021-11-12", "journal": {"name": "2022 IEEE 38th International Conference on Data Engineering (ICDE)", "pages": "1675-1686"}, "authors": [{"authorId": "1388303443", "name": "Inju Na"}, {"authorId": "7226593", "name": "Ilyeop Yi"}, {"authorId": "145686495", "name": "K. Whang"}, {"authorId": "1752894", "name": "Yang-Sae Moon"}, {"authorId": "1772372", "name": "S. Hyun"}], "citations": [{"paperId": "ba9698f045a6f404201be5c067c5190b6bfb5c72", "title": "Integrating Connection Search in Graph Queries"}, {"paperId": "e7b360f2e9358b641bf8e1f28ab6278de3f66620", "title": "LM-SRPQ: Efficiently Answering Regular Path Query in Streaming Graphs"}, {"paperId": "b038ec466e222dc5b2ab2ac6e67a32c8ddf40450", "title": "Towards Speeding Up Graph-Relational Queries in RDBMSs"}]}
