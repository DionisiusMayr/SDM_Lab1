{"paperId": "480a3b0007a86df860d30b1670874c76824b0d11", "publicationVenue": {"id": "7bb54772-a70c-44df-9b9d-9f3b5354c0e2", "name": "IEEE International Parallel and Distributed Processing Symposium", "type": "conference", "alternate_names": ["IEEE Int Parallel Distrib Process Symp", "International Parallel and Distributed Processing Symposium", "IPDPS", "Int Parallel Distrib Process Symp"], "url": "http://www.ipdps.org/"}, "title": "Efficient Parallel and Adaptive Partitioning for Load-balancing in Spatial Join", "abstract": "Due to the developments of topographic techniques, clear satellite imagery, and various means for collecting information, geospatial datasets are growing in volume, complexity, and heterogeneity. For efficient execution of spatial computations and analytics on large spatial data sets, parallel processing is required. To exploit fine-grained parallel processing in large scale compute clusters, partitioning in a load-balanced way is necessary for skewed datasets. In this work, we focus on spatial join operation where the inputs are two layers of geospatial data. Our partitioning method for spatial join uses Adaptive Partitioning (ADP) technique, which is based on Quadtree partitioning. Unlike existing partitioning techniques, ADP partitions the spatial join workload instead of partitioning the individual datasets separately to provide better load-balancing. Based on our experimental evaluation, ADP partitions spatial data in a more balanced way than Quadtree partitioning and Uniform grid partitioning. ADP uses an output-sensitive duplication avoidance technique which minimizes duplication of geometries that are not part of spatial join output. In a distributed memory environment, this technique can reduce data communication and storage requirements compared to traditional methods.To improve the performance of ADP, an MPI+Threads based parallelization is presented. With ParADP, a pair of real world datasets, one with 717 million polylines and another with 10 million polygons, is partitioned into 65,536 grid cells within 7 seconds. ParADP performs well with both good weak scaling up to 4,032 CPU cores and good strong scaling up to 4,032 CPU cores.", "venue": "IEEE International Parallel and Distributed Processing Symposium", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-05-01", "journal": {"name": "2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS)", "pages": "810-820"}, "authors": [{"authorId": "2118579557", "name": "Jie Yang"}, {"authorId": "2871863", "name": "S. Puri"}], "citations": [{"paperId": "fd14ce90cd74e39c9015d993557a5ad5baa5ea38", "title": "Social Media Driven Big Data Analysis for Disaster Situation Awareness: A Tutorial"}, {"paperId": "797601c1b73acc8d98046281383bb63f80fbb42d", "title": "Improving the Efficiency of the EMS-Based Smart City: A Novel Distributed Framework for Spatial Data"}, {"paperId": "2d1018d09152cb23c4e9917218ef7b05997fed8d", "title": "Fine-grained dynamic load balancing in spatial join by work stealing on distributed memory"}, {"paperId": "d3a55f1c9b15781c0515caff24742f8b63ae1563", "title": "Accelerating Spatial Autocorrelation Computation with Parallelization, Vectorization and Memory Access Optimization: With a focus on rapid recalculation of COVID related spatial statistics for faster geospatial analysis and response"}, {"paperId": "124b7b7134ee5feab97b2187390c04eaf06d51b2", "title": "Efficient Filters for Geometric Intersection Computations using GPU"}, {"paperId": "c68cd169e8aa67943c43138f9eacc8c05b4c3178", "title": "IPDPS 2020 TOC"}, {"paperId": "40fee24d6ff7657afd05108f8384843f2ec51a47", "title": "Enabling NUMA-aware Main Memory Spatial Join Processing: An Experimental Study"}]}
