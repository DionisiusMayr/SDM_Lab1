{"paperId": "f4e42c15a7a35a198a04a74cbdbe19d360a2d00c", "publicationVenue": {"id": "d65e8b4a-f9c2-45ae-9b87-090db7e872f1", "name": "International Conference on Parallel Architectures and Compilation Techniques", "type": "conference", "alternate_names": ["Int Conf Parallel Archit Compil Tech", "PACT", "Parallel Comput Technol", "Parallel Computing Technologies", "Pan African Conference Science, Computing and Telecommunications", "PaCT", "Pan Afr Conf Sci Comput Telecommun"], "url": "http://www.pactconf.org/", "alternate_urls": ["http://ssd.sscc.ru/en/conference"]}, "title": "Graphie: Large-Scale Asynchronous Graph Traversals on Just a GPU", "abstract": "Most GPU-based graph systems cannot handle large-scale graphs that do not fit in the GPU memory. The ever-increasing graph size demands a scale-up graph system, which can run on a single GPU with optimized memory access efficiency and well-controlled data transfer overhead. However, existing systems either incur redundant data transfers or fail to use shared memory. In this paper we present Graphie, a systemto efficiently traverse large-scale graphs on a single GPU. Graphie stores the vertex attribute data in the GPU memory and streams edge data asynchronously to the GPU for processing. Graphie's high performance relies on two renaming algorithms. The first algorithm renames the vertices so that the source vertices can be easily loaded to the shared memory to reduce global memory accesses. The second algorithm inserts virtual vertices into the vertex set to rename real vertices, which enables the use of a small boolean array to track active partitions. The boolean array also resides in shared memory and can be updated in constant time. The renaming algorithms do not introduce any extra overhead in the GPU memory or graph storage on disk. Graphie's runtime overlaps data transfer with kernel execution and reuses transferred data in the GPU memory. The evaluation of Graphie on 7 real-world graphs with up to 1.8 billion edgesdemonstrates substantial speedups over X-Stream, a state-of-theart edge-centric graph processing framework on the CPU, and GraphReduce, an out-of-memory graph processing systems on GPUs.", "venue": "International Conference on Parallel Architectures and Compilation Techniques", "year": 2017, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2017-09-01", "journal": {"name": "2017 26th International Conference on Parallel Architectures and Compilation Techniques (PACT)", "pages": "233-245"}, "authors": [{"authorId": "144004011", "name": "Wei Han"}, {"authorId": "27998850", "name": "Daniel Mawhirter"}, {"authorId": "144397979", "name": "Bo Wu"}, {"authorId": "28028789", "name": "Matthew Buland"}], "citations": [{"paperId": "439f218381f0569f4c660b56e8685ca345e2c744", "title": "Reduce, Reuse, and Adapt: Accelerating Graph Processing on GPUs"}, {"paperId": "de2057a4615c6f2d04a5b179bffd0287670aebd3", "title": "Accelerating GNN Training by Adapting Large Graphs to Distributed Heterogeneous Architectures"}, {"paperId": "b026fa23f0f73e18004a0ac909476cb205ff967e", "title": "EGraph: Efficient Concurrent GPU-Based Dynamic Graph Processing"}, {"paperId": "be2f8368f414c4806b37bcf2d2283391d3680ca3", "title": "Liberator: A Data Reuse Framework for Out-of-Memory Graph Computing on GPUs"}, {"paperId": "457bbb0f64729dcfb15fe11be2b7fce91fcb1243", "title": "CompressGraph: Efficient Parallel Graph Analytics with Rule-Based Compression"}, {"paperId": "1d4f8f69f90f5479d1dff65fa10650b449fae3e2", "title": "End-to-End LU Factorization of Large Matrices on GPUs"}, {"paperId": "35cb6c17693ddec0d3ceaa598f3cd451637f08ea", "title": "iQAN: Fast and Accurate Vector Search with Efficient Intra-Query Parallelism on Multi-Core Architectures"}, {"paperId": "3b9e59e91d99a49122124b25d58e8a1a887e448b", "title": "HyTGraph: GPU-Accelerated Graph Processing with Hybrid Transfer Management"}, {"paperId": "6ec6d79e896bd5d544e0c154d6851b8320f8cab5", "title": "Survey on storage-accelerator data movement"}, {"paperId": "2cf170d49339371e93c4b050de09bb8f979369b6", "title": "Scaling and Selecting GPU Methods for All Pairs Shortest Paths (APSP) Computations"}, {"paperId": "63b809349666fa571782b08364b68acbb1df0c2d", "title": "GraphIt to CUDA Compiler in 2021 LOC: A Case for High-Performance DSL Implementation via Staging with BuilDSL"}, {"paperId": "8760d27c5697974db936022fb3a9a98df6d8be6d", "title": "Speed-ANN: Low-Latency and High-Accuracy Nearest Neighbor Search via Intra-Query Parallelism"}, {"paperId": "f2259b785c76fdd285ae574ba38dd56ca6900865", "title": "Unified-memory-based hybrid processing for partition-oriented subgraph matching on GPU"}, {"paperId": "4595404a30579368ffb6f15f0b96cf346c5d0658", "title": "LargeGraph"}, {"paperId": "dfcd4cbd47b17eb60392ff918e2b5191921b503e", "title": "Skywalker: Efficient Alias-Method-Based Graph Sampling and Random Walk on GPUs"}, {"paperId": "63a6fddd6ef73cf0594bfe2bde58a31a804de1b2", "title": "Ascetic: Enhancing Cross-Iterations Data Efficiency in Out-of-Memory Graph Processing on GPUs"}, {"paperId": "27f155758647e9dcd296f003b78dd21de60017bb", "title": "Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan"}, {"paperId": "5d647f9147dd0412cc45a36e40f8562e46988c24", "title": "Taming the Zoo: The Unified GraphIt Compiler Framework for Novel Architectures"}, {"paperId": "a92ac38658b3a7f75e1836b9d9b6c41b21c40d79", "title": "Compiling Graph Applications for GPU s with GraphIt"}, {"paperId": "b37c5a96fe2f3389d9fe3addb8812634abb82164", "title": "Grus"}, {"paperId": "7c94bed289c35c10841674edc4aa4b9056b21545", "title": "Feluca: A Two-Stage Graph Coloring Algorithm With Color-Centric Paradigm on GPU"}, {"paperId": "76031ea3119e840798d4aef5cfe3c55814077698", "title": "Compliation Techniques for Graphs Algorithms on GPUs"}, {"paperId": "974a06b07fc2d51b14a37d1fca5cb16ee1fef306", "title": "Compilation Techniques for Graph Algorithms on GPUs"}, {"paperId": "465df6e7ac6d4c9afd23759a01ae2fb530ce4dbb", "title": "WolfGraph: The edge-centric graph processing on GPU"}, {"paperId": "6d31f0391547e6a56e63cf88948807c675650a5b", "title": "AsynGraph"}, {"paperId": "5496654b0e517cc0a3c37786011d651c86425e45", "title": "C-SAW: A Framework for Graph Sampling and Random Walk on GPUs"}, {"paperId": "b73288113f61193b4735a2d9d3b06c9635922039", "title": "ezLDA: Efficient and Scalable LDA on GPUs"}, {"paperId": "6510ef26ad1da6c9c8863a8dc0428d122bb17c81", "title": "Parallelizing pruned landmark labeling: dealing with dependencies in graph algorithms"}, {"paperId": "d5ecc3b3380d8d20637ded5101f4a1caff8d4840", "title": "Groute"}, {"paperId": "465a768ffbf42834d07168e40bf6f657ed7e3e0d", "title": "EMOGI: Efficient Memory-access for Out-of-memory Graph-traversal In GPUs"}, {"paperId": "8691eeb5bb957050c69bd698b96e050bbe78aaba", "title": "Subway: minimizing data transfer during out-of-GPU-memory graph processing"}, {"paperId": "531fae3bdc785b89bda7b86b969fb4a54afb0731", "title": "An Adaptive Load Balancer For Graph Analytical Applications on GPUs"}, {"paperId": "c20d9cf0df9e6a3d35cc27015aece9d3031f9135", "title": "AutoMine: harmonizing high-level abstraction and high performance for graph mining"}, {"paperId": "b333be37cc7e11ca5429a1ace443f244bd94d240", "title": "HitGraph: High-throughput Graph Processing Framework on FPGA"}, {"paperId": "a361a385cc397f3706f9ed8e4c89eb3a78e58df9", "title": "IP Cores for Graph Kernels on FPGAs"}, {"paperId": "83a27858be6d9ae55acb64f7f5ba8fb0b5d3c1fb", "title": "Pruned Landmark Labeling Meets Vertex Centric Computation: A Surprisingly Happy Marriage!"}, {"paperId": "9852d8c1fff0afbd01b32ee8b72ce6b2de974c6b", "title": "XBFS: eXploring Runtime Optimizations for Breadth-First Search on GPUs"}, {"paperId": "bb48df8040e8eddb9a5bc1794bd6cde8afae6b7f", "title": "Excavating the Potential of GPU for Accelerating Graph Traversal"}, {"paperId": "33558f35e826af941c4c919cb50fb75a265f4879", "title": "DiGraph: An Efficient Path-based Iterative Directed Graph Processing System on Multiple GPUs"}, {"paperId": "28c04ab5ae0ec0815e480b318e6363632289163d", "title": "Graphphi: efficient parallel graph processing on emerging throughput-oriented architectures"}, {"paperId": "2a05cb8677128664a80e1b225125e31d8cc91cc9", "title": "Towards Efficient Large-Scale Graph Neural Network Computing"}, {"paperId": "dcfd0402e90a3321ad212cd8b325f450a344f129", "title": "Gluon: a communication-optimizing substrate for distributed heterogeneous graph analytics"}, {"paperId": "ac74b11933eeee93357a4527c2d322cb2f0d7eda", "title": "Scaling Up Large-Scale Graph Processing for GPU-Accelerated Heterogeneous Systems"}, {"paperId": "5045484d9947ecaedb116ad6c36b59e0f200b8da", "title": "An FPGA framework for edge-centric graph processing"}, {"paperId": "1f0572f47be66c2c0fbf3fd0f98f25e5b5f88361", "title": "Tigr: Transforming Irregular Graphs for GPU-Friendly Graph Processing"}, {"paperId": "c5269518351196e2d6a653b60fa7b024d329b95d", "title": "Fast and Efficient Update Handling for Graph H2TAP"}, {"paperId": "4b30d6d47152c171ee4f3544f375bf9cb4e5cf75", "title": "Memory Harvesting in Multi-GPU Systems with Hierarchical Unified Virtual Memory"}, {"paperId": "1ebef4a2c67a1678add9eebe051b0cc5b6ef26a4", "title": "Scaph: Scalable GPU-Accelerated Graph Processing with Value-Driven Differential Scheduling"}, {"paperId": "c169a83ff4ea85362a83b0c78f1460ebfcd0444c", "title": "FLARE: Flexibly Sharing Commodity GPUs to Enforce QoS and Improve Utilization"}, {"paperId": "096819782ce34058faa7ad3d81c9b3d49a5cf527", "title": "Core Graph: Exploiting Edge Centrality to Speedup the Evaluation of Iterative Graph Queries"}]}
