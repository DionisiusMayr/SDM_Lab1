{"paperId": "6eed456b892fb3ad529e1f0cdf3285230d209d85", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Hazelcast Jet: Low-latency Stream Processing at the 99.99th Percentile", "abstract": "Jet is an open-source, high-performance, distributed stream processor built at Hazelcast during the last five years. Jet was engineered with millisecond latency on the 99.99th percentile as its primary design goal. Originally Jet's purpose was to be an execution engine that performs complex business logic on top of streams generated by Hazelcast's In-memory Data Grid (IMDG): a set of high-performance, in-memory, partitioned and replicated data structures. With time, Jet evolved into a full-fledged, scale-out stream processor that can handle out-of-order streams and exactly-once processing guarantees. Jet's end-to-end latency lies in the order of milliseconds, and its throughput in the order of millions of events per CPU-core. This paper presents main design decisions we made in order to maximize the performance per CPU-core, alongside lessons learned, and an empirical performance evaluation.", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-03-18", "journal": {"name": "Proc. VLDB Endow.", "pages": "3110-3121", "volume": "14"}, "authors": [{"authorId": "2055027557", "name": "Can Gencer"}, {"authorId": "2138736132", "name": "Marko Topolnik"}, {"authorId": "2055027878", "name": "Viliam vDurina"}, {"authorId": "115936983", "name": "Emin Demirci"}, {"authorId": "2055027477", "name": "Ensar B. Kahveci"}, {"authorId": "2055027471", "name": "Ali Gurbuz Ondvrej Luk'avs"}, {"authorId": "2055027461", "name": "J'ozsef Bart'ok"}, {"authorId": "2084189021", "name": "Grzegorz Gierlach"}, {"authorId": "2055027500", "name": "Frantivsek Hartman"}, {"authorId": "2072889019", "name": "Ufuk Y\u0131lmaz"}, {"authorId": "2055027502", "name": "Mehmet Dougan"}, {"authorId": "77271391", "name": "M. Mandouh"}, {"authorId": "1792039", "name": "Marios Fragkoulis"}, {"authorId": "1680579", "name": "Asterios Katsifodimos"}], "citations": [{"paperId": "747665a7adf385d9d8b5a9a6bd27d7a35d58a4b2", "title": "CheckMate: Evaluating Checkpointing Protocols for Streaming Dataflows"}, {"paperId": "89e87add8f188fea27767955d3deea851a6f4a29", "title": "ShuffleBench: A Benchmark for Large-Scale Data Shuffling Operations with Distributed Stream Processing Frameworks"}, {"paperId": "96e2e053296df52d919563297a2400540f14c99a", "title": "Scheduling Garbage Collection for Energy Efficiency on Asymmetric Multicore Processors"}, {"paperId": "71ea127e53bcfb85de6bc47708d325297680b04c", "title": "Heap Size Adjustment with CPU Control"}, {"paperId": "721747f4479f1fca3c080669f8d9989f3b09bb4f", "title": "A systematic mapping of performance in distributed stream processing systems"}, {"paperId": "e25a4ece79160c9817a38e80f77d729ca7487d48", "title": "GeaFlow: A Graph Extended and Accelerated Dataflow System"}, {"paperId": "8f876c2a8f9766606fe18272535a728f3c04afc0", "title": "Benchmarking scalability of stream processing frameworks deployed as microservices in the cloud"}, {"paperId": "f135b6ecffb81b5981d464b4992a0353d711c6d8", "title": "Portals: An Extension of Dataflow Streaming for Stateful Serverless"}, {"paperId": "161411caa8e894c255ec2080050a0c8bb657fb57", "title": "Colocating Real-time Storage and Processing: An Analysis of Pull-based versus Push-based Streaming"}, {"paperId": "91ad187743d70fcabfa932c3ee6d671a8a82efc1", "title": "Analysing and Predicting Energy Consumption of Garbage Collectors in OpenJDK"}, {"paperId": "c44b7daae56d24698201ec543dbd1895abded214", "title": "S-QUERY: Opening the Black Box of Internal Stream Processor State"}, {"paperId": "476fbfd0af34ca6df8f35e610936772a3d74a3f2", "title": "Transactions across serverless functions leveraging stateful dataflows"}, {"paperId": "6e6145e1a4f4f0b8fdd71d5f54e09a90564518fc", "title": "Stateful Entities: Object-oriented Cloud Applications as Distributed Dataflows"}, {"paperId": "b52d58ac0891eb836b198f15360be1556ad1d7ef", "title": "Clamor: Extending Functional Cluster Computing Frameworks with Fine-Grained Remote Memory Access"}, {"paperId": "dee9e4bd93cbe0dfba77902a227d5e53fca31059", "title": "Distributed transactions on serverless stateful functions"}, {"paperId": "046d13759a4f0f7e410e6909d6276924af3bbe65", "title": "Clonos: Consistent Causal Recovery for Highly-Available Streaming Dataflows"}, {"paperId": "21da1ee785c91c832f68a9f18e4d7eda41c1cbd6", "title": "A Survey on the Evolution of Stream Processing Systems"}, {"paperId": "be15a49d58ab996865013a4d752abc311e1cf91a", "title": "Raising the Level of Abstraction for Time-State Analytics With the Timeline Framework"}, {"paperId": "d01fa90ee9444121aaa3e814e4876598f593cd3f", "title": "Benchmarking scalability of stream processing frameworks deployed as event-driven microservices in the cloud"}, {"paperId": "d1b9738ca93a6f5579744ae5278c02d3996dea45", "title": "Darwin: Scale-In Stream Processing"}, {"paperId": "f1ddf757d3dd8c5263607d5e6103a2a218bebe86", "title": "Meces: Latency-efficient Rescaling via Prioritized State Migration for Stateful Distributed Stream Processing Systems"}, {"paperId": "6ae3d4f947d9f94fce7b4023167a81b9c4ef4a8c", "title": "A Performance Analysis of Fault Recovery in Stream Processing Frameworks"}, {"paperId": "2dd0f8d71aa49dbc378fc07152ed12e4e00c0dee", "title": "Scalability Benchmarking of Stream Processing Engines with Apache Beam"}]}
