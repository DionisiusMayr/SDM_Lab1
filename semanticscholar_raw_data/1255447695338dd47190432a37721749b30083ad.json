{"paperId": "1255447695338dd47190432a37721749b30083ad", "publicationVenue": null, "title": "When life gives you oranges: detecting and diagnosing intermittent job failures at Mozilla", "abstract": "Continuous delivery of cloud systems requires constant running of jobs (build processes, tests, etc.). One issue that plagues this continuous integration (CI) process are intermittent failures - non-deterministic, false alarms that do not result from a bug in the software or job specification, but rather from issues in the underlying infrastructure. At Mozilla, such intermittent failures are called oranges as a reference to the color of the build status indicator. As such intermittent failures disrupt CI and lead to failures, they erode the developers' trust in the jobs. We present a novel approach that automatically classifies failing jobs to determine whether job execution failures arise from an actual software bug or were caused by flakiness in the job (e.g., test) or the underlying infrastructure. For this purpose, we train classification models using job telemetry data to diagnose failure patterns involving features such as runtime, cpu load, operating system version, or specific platform with high precision. In an evaluation on a set of Mozilla CI jobs, our approach achieves precision scores of 73%, on average, across all data sets with some test suites achieving precision scores good enough for fully automated classification (i.e., precision scores of up to 100%), and recall scores of 82% on average (up to 94%).", "venue": "ESEC/SIGSOFT FSE", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle"], "publicationDate": "2021-08-18", "journal": {"name": "Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering"}, "authors": [{"authorId": "50404832", "name": "J. Lampel"}, {"authorId": "39855161", "name": "Sascha Just"}, {"authorId": "1721771", "name": "S. Apel"}, {"authorId": "145594351", "name": "A. Zeller"}], "citations": [{"paperId": "91268487574aa76bac86a45db8bbbaa923039073", "title": "230, 439 Test Failures Later: An Empirical Evaluation of Flaky Failure Classifiers"}, {"paperId": "f12370f8a13c7df5dcfde85c29c68f347a28e71d", "title": "A Systematic Literature Review on Explainability for Machine/Deep Learning-based Software Engineering Research"}, {"paperId": "b255db1529fe6cedb8b3e5847e50641de2eec19c", "title": "Test Code Flakiness in Mobile Apps: The Developer's Perspective"}, {"paperId": "3e5700be0abe9a35c24214dc0e189762d4aeddae", "title": "Systematically Producing Test Orders to Detect Order-Dependent Flaky Tests"}, {"paperId": "ef4184bec9406f3ac3c14511800d7a6a67f9f834", "title": "Performance-Driven Metamorphic Testing of Cyber-Physical Systems"}, {"paperId": "3f06dcb2a0a153658dd894adfa8f1a2c5b598012", "title": "Systematic Literature Review on Application of Machine Learning in Continuous Integration"}, {"paperId": "7fec4eae407a1747fd69586e115818f6ba17555b", "title": "On the Costs and Benefits of Adopting Lifelong Learning for Software Analytics -- Empirical Study on Brown Build and Risk Prediction"}, {"paperId": "d31866614382293a9b42d7be7531af2afecec542", "title": "What Warnings Do Engineers Really Fix? The Compiler That Cried Wolf"}, {"paperId": "f5d0bf2d59260d6164f93dbf2980f5aba0b23cb8", "title": "The Importance of Discerning Flaky from Fault-triggering Test Failures: A Case Study on the Chromium CI"}, {"paperId": "05ae14563cd3bda8eb0691d35f02e54c0f56ccf3", "title": "Continuous Integration and Delivery Practices for Cyber-Physical Systems: An Interview-Based Study"}, {"paperId": "cd01cb39aa26b81e965a8e7fa05df11e4015e3ae", "title": "Static test flakiness prediction: How Far Can We Go?"}, {"paperId": "610baa54a4013f0bb31ad796981a831b9d2505bd", "title": "Flaky Test Sanitisation via On-the-Fly Assumption Inference for Tests with Network Dependencies"}, {"paperId": "504703660bd55b53663b969a7fa0ad9b3828d128", "title": "Towards language-independent Brown Build Detection"}, {"paperId": "cf6230ed8b600c38d9ca4eaadde6e1ad6fac3e16", "title": "Preempting Flaky Tests via Non-Idempotent-Outcome Tests"}, {"paperId": "28e418b8854c51638f518135adb8bc5eeacf6226", "title": "FlakiMe: Laboratory-Controlled Test Flakiness Impact Assessment"}, {"paperId": "7006c481e07cf0c71d93d82f8cfbafc5ffac8913", "title": "Flakify: A Black-Box, Language Model-Based Predictor for Flaky Tests"}, {"paperId": "8c6864b80dd47fbf82026839a62d1b7735ca5b95", "title": "What Warnings Do Engineers Really Fix? The Compiler That Cried Wolf"}, {"paperId": "15c73cff6a30c818e66b16f9a0dd3ad9c96aaaf0", "title": "Cost of Flaky Tests in Continuous Integration: An Industrial Case Study"}, {"paperId": "ea99bfdb9b008eb1b6ba3140e642ef24a13828dc", "title": "The Need for Speed: Increasing the Code Review Velocity"}, {"paperId": "14ba3188ef538eaf88b1df683c4412d2bf5272e2", "title": "Automatically Reproducing Timing-Dependent Flaky-Test Failures"}]}
