{"paperId": "80b3c885415573cbdb33cd7ebd275db46ec3ea45", "publicationVenue": {"id": "c99cfe66-b71c-4ca4-bedd-26267b9cb068", "name": "IEEE Transactions on Software Engineering", "type": "journal", "alternate_names": ["IEEE Trans Softw Eng"], "issn": "0098-5589", "url": "http://ieeexplore.ieee.org/servlet/opac?punumber=32", "alternate_urls": ["http://www.computer.org/portal/web/tse/about"]}, "title": "Accelerating Continuous Integration by Caching Environments and Inferring Dependencies", "abstract": "To facilitate the rapid release cadence of modern software (on the order of weeks, days, or even hours), software development organizations invest in practices like Continuous Integration (CI), where each change submitted by developers is built (e.g., compiled, tested, linted) to detect problematic changes early. A fast and efficient build process is crucial to provide timely CI feedback to developers. If CI feedback is too slow, developers may switch contexts to other tasks, which is known to be a costly operation for knowledge workers. Thus, minimizing the build execution time for CI services is an important task. While recent work has made several important advances in the acceleration of CI builds, optimizations often depend upon explicitly defined build dependency graphs (e.g., make, Gradle, CloudBuild, Bazel). These hand-maintained graphs may be (a) underspecified, leading to incorrect build behaviour; or (b) overspecified, leading to missed acceleration opportunities. In this paper, we propose Kotinos\u2014a language-agnostic approach to infer data from which build acceleration decisions can be made without relying upon build specifications. After inferring this data, our approach accelerates CI builds by caching the build environment and skipping unaffected build steps. Kotinos is at the core of a commercial CI service with a growing customer base. To evaluate Kotinos, we mine 14,364 historical CI build records spanning three proprietary and seven open-source software projects. We find that: (1) at least 87.9 percent of the builds activate at least one Kotinos acceleration; and (2) 74 percent of accelerated builds achieve a speed-up of two-fold with respect to their non-accelerated counterparts. Moreover, (3) the benefits of Kotinos can also be replicated in open source software systems; and (4) Kotinos imposes minimal resource overhead (i.e., $<$<</mml:mo> 1 percent median CPU usage, 2 MB \u2013 2.2 GB median memory usage, and 0.4 GB \u2013 5.2 GB median storage overhead) and does not compromise build outcomes. Our results suggest that migration to Kotinos yields substantial benefits with minimal investment of effort (e.g., no migration of build systems is necessary).", "venue": "IEEE Transactions on Software Engineering", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2022-06-01", "journal": {"name": "IEEE Transactions on Software Engineering", "pages": "2040-2052", "volume": "48"}, "authors": [{"authorId": "2063714", "name": "Keheliya Gallaba"}, {"authorId": "65756619", "name": "J. Ewart"}, {"authorId": "2101884578", "name": "Yves Junqueira"}, {"authorId": "1725534", "name": "Shane McIntosh"}], "citations": [{"paperId": "636cb1d19992772265309a2b2c853272eca317e9", "title": "Resource Usage and Optimization Opportunities in Workflows of GitHub Actions"}, {"paperId": "b79c577ea0b3f1b3477e3268a19b06a50e9782d1", "title": "Accelerating Continuous Integration with Parallel Batch Testing"}, {"paperId": "a1fb9327089adaef4d09c496b8dd10183378dda5", "title": "Studying the Interplay Between the Durations and Breakages of Continuous Integration Builds"}, {"paperId": "1a8ef041082ff117a0af3c2000ea402672bab239", "title": "On the usage, co-usage and migration of CI/CD tools: A qualitative analysis"}, {"paperId": "9e88a6e3f1068fd4c265966167919d5de70feb55", "title": "HybridCISave: A Combined Build and Test Selection Approach in Continuous Integration"}, {"paperId": "dea3cac9612d5681f0b30579b6df9532ee1548e6", "title": "BuildSonic: Detecting and Repairing Performance-Related Configuration Smells for Continuous Integration Builds"}, {"paperId": "d571264556e6d5b88bf2856ce0bd1756b1bbb545", "title": "Lessons from Eight Years of Operational Data from a Continuous Integration Service: An Exploratory Case Study of CircleCI"}, {"paperId": "a5938f7eb8ed337b51c414ff268d0c86f473dd52", "title": "Change Is the Only Constant: Dynamic Updates for Workflows"}, {"paperId": "c9bb656aeb2adc0df89de74ebbe9427c73bfdbcd", "title": "Towards Incremental Build of Software Configurations"}, {"paperId": "687b3fafae28b5dc9de6ee14aad9c234b8a2854d", "title": "Integrating Multi-Disciplinary Offline and Online Engineering in Industrial Cyber-Physical Systems through DevOps"}, {"paperId": "eea24a35352d7a80305f189064593dbe76708a40", "title": "Trade-Off Exploration for Acceleration of Continuous Integration"}, {"paperId": "20d6ae48cd20fe34b42dd6982e9fa4380e0e1904", "title": "PyroBuildS: Enabling Efficient Exploration of Linux Configuration Space with Incremental Build"}, {"paperId": "3d3b30841757426b0bac0e677a46bca05e244db5", "title": "Incremental Build of Linux Kernel Configurations"}]}
