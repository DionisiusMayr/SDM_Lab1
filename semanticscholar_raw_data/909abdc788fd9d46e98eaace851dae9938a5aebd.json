{"paperId": "909abdc788fd9d46e98eaace851dae9938a5aebd", "publicationVenue": {"id": "7bb54772-a70c-44df-9b9d-9f3b5354c0e2", "name": "IEEE International Parallel and Distributed Processing Symposium", "type": "conference", "alternate_names": ["IEEE Int Parallel Distrib Process Symp", "International Parallel and Distributed Processing Symposium", "IPDPS", "Int Parallel Distrib Process Symp"], "url": "http://www.ipdps.org/"}, "title": "FP4S: Fragment-based Parallel State Recovery for Stateful Stream Applications", "abstract": "Streaming computations are by nature long-running. They run in highly dynamic distributed environments where many stream operators may leave or fail at the same time. Most of them are stateful, in which stream operators need to store and maintain large-sized state in memory, resulting in expensive time and space costs to recover them. The state-of-the-art stream processing systems offer failure recovery mainly through three approaches: replication recovery, checkpointing recovery, and DStream-based lineage recovery, which are either slow, resource-expensive or fail to handle many simultaneous failures.We present FP4S, a novel fragment-based parallel state recovery mechanism that can handle many simultaneous failures for a large number of concurrently running stream applications. The novelty of FP4S is that we organize all the application\u2019s operators into a distributed hash table (DHT) based consistent ring to associate each operator with a unique set of neighbors. Then we divide each operator\u2019s in-memory state into many fragments and periodically save them in each node\u2019s neighbors, ensuring that different sets of available fragments can reconstruct lost state in parallel. This approach makes this failure recovery mechanism extremely scalable, and allows it to tolerate many simultaneous operator failures. We apply FP4S on Apache Storm and evaluate it using large-scale real-world experiments, which demonstrate its scalability, efficiency, and fast failure recovery features. When compared to the state-of-the-art solutions (Apache Storm), FP4S reduces 37.8% latency of state recovery and saves more than half of the hardware costs. It can scale to many simultaneous failures and successfully recover the states when up to 66.6% of states fail or get lost.", "venue": "IEEE International Parallel and Distributed Processing Symposium", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-05-01", "journal": {"name": "2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS)", "pages": "1102-1111"}, "authors": [{"authorId": "51308947", "name": "Pinchao Liu"}, {"authorId": "9127578", "name": "Hailu Xu"}, {"authorId": "145308335", "name": "D. D. Silva"}, {"authorId": "2115979102", "name": "Qingyang Wang"}, {"authorId": "2220549", "name": "Sarker Tanzir Ahmed"}, {"authorId": "2303604", "name": "Liting Hu"}], "citations": [{"paperId": "4f19f63fe79861bcefcaacb764b818f4144b8968", "title": "Adaptive Fragment-Based Parallel State Recovery for Stream Processing Systems"}, {"paperId": "e603147e665047984b7fb0f7a82def32f80ea7eb", "title": "ShadowSync: latency long tail caused by hidden synchronization in real-time LSM-tree based stream processing systems"}, {"paperId": "795e2aa8382ac65da0b1f5db5efe4ce26fb4d285", "title": "A state lossless scheduling strategy in distributed stream computing systems"}, {"paperId": "e3c31765a3f742a86e4dc338bd7786e0889f15e4", "title": "The Challenges and Prerequisites of Data Stream Processing in Fog Environment for Digital Twin in Smart Industry"}, {"paperId": "638e19891fe03571eed0086cd926701d7e449f76", "title": "SR3: Customizable Recovery for Stateful Stream Processing Systems"}, {"paperId": "c68cd169e8aa67943c43138f9eacc8c05b4c3178", "title": "IPDPS 2020 TOC"}, {"paperId": "e441f3a899ad9397016d3134b70c4152401cbd63", "title": "DART: A Scalable and Adaptive Edge Stream Processing Engine"}]}
