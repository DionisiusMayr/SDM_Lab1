{"paperId": "cf8f781f37e6edf5d3b957f7704a9d84b3f377a8", "publicationVenue": {"id": "0730105a-4941-449f-9450-28cba8ae056b", "name": "ACM Transactions on Software Engineering and Methodology", "type": "journal", "alternate_names": ["ACM Trans Softw Eng Methodol"], "issn": "1049-331X", "url": "http://www.acm.org/pubs/contents/journals/tosem/", "alternate_urls": ["https://tosem.acm.org/", "http://tosem.acm.org/", "http://www.acm.org/pubs/tosem/", "http://portal.acm.org/tosem"]}, "title": "Understanding and Combating Memory Bloat in Managed Data-Intensive Systems", "abstract": "The past decade has witnessed increasing demands on data-driven business intelligence that led to the proliferation of data-intensive applications. A managed object-oriented programming language such as Java is often the developer\u2019s choice for implementing such applications, due to its quick development cycle and rich suite of libraries and frameworks. While the use of such languages makes programming easier, their automated memory management comes at a cost. When the managed runtime meets large volumes of input data, memory bloat is significantly magnified and becomes a scalability-prohibiting bottleneck. This article first studies, analytically and empirically, the impact of bloat on the performance and scalability of large-scale, real-world data-intensive systems. To combat bloat, we design a novel compiler framework, called Facade, that can generate highly efficient data manipulation code by automatically transforming the data path of an existing data-intensive application. The key treatment is that in the generated code, the number of runtime heap objects created for data classes in each thread is (almost) statically bounded, leading to significantly reduced memory management cost and improved scalability. We have implemented Facade and used it to transform seven common applications on three real-world, already well-optimized data processing frameworks: GraphChi, Hyracks, and GPS. Our experimental results are very positive: the generated programs have (1) achieved a 3% to 48% execution time reduction and an up to 88\u00d7 GC time reduction, (2) consumed up to 50% less memory, and (3) scaled to much larger datasets.", "venue": "ACM Transactions on Software Engineering and Methodology", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2018-01-03", "journal": {"name": "ACM Transactions on Software Engineering and Methodology (TOSEM)", "pages": "1 - 41", "volume": "26"}, "authors": [{"authorId": "2055541087", "name": "Khanh Nguyen"}, {"authorId": "2148896568", "name": "Kai Wang"}, {"authorId": "1925686", "name": "Yingyi Bu"}, {"authorId": "2153680310", "name": "Lu Fang"}, {"authorId": "38394648", "name": "G. Xu"}], "citations": [{"paperId": "ed4e968fd307d763179e64535bdb04540ccf936b", "title": "XDebloat: Towards Automated Feature-Oriented App Debloating"}, {"paperId": "fca3e9b15de68a3b14bdd5f4f8983bfb5c8b6b2f", "title": "Prioritising test scripts for the testing of memory bloat in web applications"}, {"paperId": "c38c807392aed7d4939686a7e492edd8138e6dcc", "title": "Coverage-Based Debloating for Java Bytecode"}, {"paperId": "3b56d271cb56af34f6c7742693e9a37d52e24c83", "title": "PolyDroid: Learning-Driven Specialization of Mobile Applications"}, {"paperId": "a44efd9fe36cb5d01f8c7e2d3084c4369f4a107d", "title": "Effective Program Debloating via Reinforcement Learning"}]}
