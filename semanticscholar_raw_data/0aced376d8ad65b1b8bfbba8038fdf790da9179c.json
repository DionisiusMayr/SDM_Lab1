{"paperId": "0aced376d8ad65b1b8bfbba8038fdf790da9179c", "publicationVenue": null, "title": "2015 Ieee International Conference on Big Data (big Data) a Scalable Parallel Xquery Processor", "abstract": "\u2014The wide use of XML for document management and data exchange has created the need to query large repositories of XML data. To efficiently query such large data and take advantage of parallelism, we have implemented Apache VXQuery, an open-source scalable XQuery processor. The system builds upon two other open-source frameworks: Hyracks, a parallel execution engine, and Algebricks, a language agnostic compiler toolbox. Apache VXQuery extends these frameworks and provides an implementation of the XQuery specifics (data model, data-model dependent functions and optimizations, and a parser). We describe the architecture of Apache VXQuery, its integration with Hyracks and Algebricks, and the XQuery optimization rules applied to the query plan to improve path expression efficiency and to enable query parallelism. An experimental evaluation using a real 500GB dataset with various selection, aggregation and join XML queries shows that Apache VXQuery performs well both in terms of scale-up and speed-up. Our experiments show that it is about 3.5x faster than Saxon (an open-source and commercial XQuery processor) on a 4-core, single node implementation, and around 2.5x faster than Apache MRQL (a MapReduce-based parallel query processor) on an eight (4-core) node cluster. I. INTRODUCTION The widespread acceptance of XML as a standard for document management and data exchange has enabled the creation of large repositories of XML data. To efficiently query such large data collections, a scalable implementation of XQuery is needed that can take advantage of parallelism. While there are various native open-source XQuery processors (Saxon [1], Galax [2], etc.) they have been optimized for single-node processing and do not support scaling to many nodes. To create a scalable XQuery processor, one could: 1) add scalability to an existing XQuery processor, 2) start from scratch, or 3) extend an existing scalable query framework to support XQuery. Unfortunately, existing XQuery processors would require extensive rewriting of their core architecture features to add parallelism. Similarly, building an XQuery processor from scratch would involve the same complex scalable programming (some unrelated to the XML data model). The last option, extending an existing scalable framework to support XQuery, seems advantageous since it combines the benefits of proven parallel technology with a shorter time to implementation. Among the several scalable frameworks available, one could use a relational parallel database engine and take", "venue": "", "year": null, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": null, "journal": null, "authors": [{"authorId": "144206370", "name": "E. Carman"}, {"authorId": "2830802", "name": "T. Westmann"}, {"authorId": "1860208", "name": "V. Borkar"}, {"authorId": "1703347", "name": "M. Carey"}, {"authorId": "1761528", "name": "V. Tsotras"}], "citations": [{"paperId": "c01a8d75ca9266265a6c34763c6d6d61909d6ff7", "title": "Parallelization of XPath Queries using Modern XQuery Processors"}, {"paperId": "9c101403691505e6423122f185d55a26b7d74a81", "title": "Scalable and Declarative Information Extraction in a Parallel Data Analytics System"}, {"paperId": "327c4c7dc9b27c2dc0c1cd2760b037e200d2b77c", "title": "Optimization of Complex Dataflows with User-Defined Functions"}, {"paperId": "37471d99fae96d539d40f9c3bca2e675949d63fc", "title": "A Dual-Index Based Representation for Processing XPath Queries on Very Large XML Documents"}, {"paperId": "80307e5e8f19051e58a5bd98a9014ebd3f31f7d8", "title": "A Parallel and Scalable Processor for JSON Data"}]}
