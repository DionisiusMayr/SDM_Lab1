{"paperId": "5a4122add1e631ffc45367a1467e2693e28fb6b5", "publicationVenue": {"id": "1a5858d9-edfe-4a1b-ae39-60020748678f", "name": "ACM Transactions on Architecture and Code Optimization (TACO)", "type": "journal", "alternate_names": ["ACM Transactions on Architecture and Code Optimization", "ACM Trans Archit Code Optim", "ACM Trans Archit Code Optim (TACO"], "issn": "1544-3566", "url": "http://www.acm.org/taco", "alternate_urls": ["http://portal.acm.org/taco/", "https://taco.acm.org/"]}, "title": "Optimizing the SSD Burst Buffer by Traffic Detection", "abstract": "Currently, HPC storage systems still use hard disk drive (HDD) as their dominant storage device. Solid state drive (SSD) is widely deployed as the buffer to HDDs. Burst buffer has also been proposed to manage the SSD buffering of bursty write requests. Although burst buffer can improve I/O performance in many cases, we find that it has some limitations such as requiring large SSD capacity and harmonious overlapping between computation phase and data flushing phase. In this article, we propose a scheme, called SSDUP+.1 SSDUP+ aims to improve the burst buffer by addressing the above limitations. First, to reduce the demand for the SSD capacity, we develop a novel method to detect and quantify the data randomness in the write traffic. Further, an adaptive algorithm is proposed to classify the random writes dynamically. By doing so, much less SSD capacity is required to achieve the similar performance as other burst buffer schemes. Next, to overcome the difficulty of perfectly overlapping the computation phase and the flushing phase, we propose a pipeline mechanism for the SSD buffer, in which data buffering and flushing are performed in pipeline. In addition, to improve the I/O throughput, we adopt a traffic-aware flushing strategy to reduce the I/O interference in HDD. Finally, to further improve the performance of buffering random writes in SSD, SSDUP+ transforms the random writes to sequential writes in SSD by storing the data with a log structure. Further, SSDUP+ uses the AVL tree structure to store the sequence information of the data. We have implemented a prototype of SSDUP+ based on OrangeFS and conducted extensive experiments. The experimental results show that our proposed SSDUP+ can save an average of 50% SSD space while delivering almost the same performance as other common burst buffer schemes. In addition, SSDUP+ can save about 20% SSD space compared with the previous version of this work, SSDUP, while achieving 20\u201330% higher I/O throughput than SSDUP.", "venue": "ACM Transactions on Architecture and Code Optimization (TACO)", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-02-15", "journal": {"name": "ACM Transactions on Architecture and Code Optimization (TACO)", "pages": "1 - 26", "volume": "17"}, "authors": [{"authorId": "1678835", "name": "Xuanhua Shi"}, {"authorId": "2279694190", "name": "Wei Liu"}, {"authorId": "1683219", "name": "Ligang He"}, {"authorId": "145914256", "name": "Hai Jin"}, {"authorId": "35834541", "name": "Ming Li"}, {"authorId": "47557631", "name": "Yong Chen"}], "citations": [{"paperId": "d81a1943b424f205a10f23b78035643bf04dafc9", "title": "Design and Performance Analysis of Modern Computational Storage Devices: A Systematic Review"}, {"paperId": "8b9caa7b4770a97b3783dfc2e297063b569687ff", "title": "Clustering based Probabilistic I/O Scheduling for Burst-Buffers Equipped HPC"}, {"paperId": "7156e3d27d3c7dc97e1bb87f1644a5b1a478a09c", "title": "QoS-pro: A QoS-enhanced Transaction Processing Framework for Shared SSDs"}, {"paperId": "b3ad97f01f06d40059c0be5e0c827bf4c097f05f", "title": "Cache eviction for SSD-HDD hybrid storage based on sequential packing"}, {"paperId": "1a6fb925152d9933dbc1e8eed9661e26631ee5b2", "title": "I/O Access Patterns in HPC Applications: A 360-Degree Survey"}, {"paperId": "38f4f18a9a470a7c4b7033f7a0d024055906935b", "title": "Probabilistic Scheduling of Dynamic I/O Requests via Application Clustering for Burst-Buffer Equipped HPC"}, {"paperId": "fc1cd4fb416c009f0ad32ac72e75f53739e9f57a", "title": "Adaptively Periodic I/O Scheduling for Concurrent HPC Applications"}, {"paperId": "be7551f87d26a018cac206fdd1e96a39eedb81fa", "title": "Efficient Garbage Collection Algorithm for Low Latency SSD"}, {"paperId": "f31947be8cc5ef9299671881c0211f6405949228", "title": "Degraded Mode-benefited I/O Scheduling to Ensure I/O Responsiveness in RAID-enabled SSDs"}, {"paperId": "1216dc872cfe0263abb28244d05412563cc1a840", "title": "Improved probabilistic I/O scheduling for limited-size Burst-Buffers deployed HPC"}, {"paperId": "b727601daef392280d0d8659bd70b6b5d7214b18", "title": "Sunway supercomputer architecture towards exascale computing: analysis and practice"}, {"paperId": "2f858ee7466008e5e6e4878b36e7adb8b4886ff2", "title": "Enhancing Endurance of SSD Based high-performance Storage Systems using Emerging NVM Technologies"}, {"paperId": "ffc9aff36a100350736edec9f9c1747a8fe068cc", "title": "Advanced Computer Architecture: 13th Conference, ACA 2020, Kunming, China, August 13\u201315, 2020, Proceedings"}, {"paperId": "23de91d7a2653bfb7c56a6b95dfcb444c380c654", "title": "NV-BSP: A Burst I/O Storage Pool Based on NVMe SSDs"}]}
