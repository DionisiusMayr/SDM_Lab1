{"paperId": "a873933b2a7eeb38b64402131a1033556547ec6e", "publicationVenue": null, "title": "Uma compara\u00e7\u00e3o entre MapReduce e Tez para segmenta\u00e7\u00e3o de imagens em ambientes de computa\u00e7\u00e3o em nuvem", "abstract": "Driven mainly by the modern advances in the Earth Observation technology in the last years, the increase of the remote sensing data volume represents a new challenge. The current available image processing solutions fail to deliver the expected performance and scalability required to deal with this large volume of data. Aiming to face this problem, the authors proposed, in a recent work, a distributed strategy for region growing segmentation of arbitrarily large images. The presented strategy is able to perform in cloud-computing environments and most of the distributed architectures. The original implementation is based on the MapReduce model, which offers a highly scalable and reliable framework for storing and processing massive data in cloud computing environments. However, MapReduce is losing popularity lately and it is being slowly replaced by different engines that have been emerged. Since the distributed image segmentation is a method independent from its implementation, this paper aim to compare the original implementation using MapReduce to a new implementation using a different distributed framework. In this work, the new implementation is based on Apache Tez. Tez enhances the MapReduce paradigm by improving its speed while maintaining MapReduce's ability to scale to petabytes of data. The experiments carried out on a virtual cluster in a commercial cloudcomputing infrastructure demonstrated that both implementations present a potential scalable and efficient solution, with Tez achieving a better performance. Palavras-chave: remote sensing, image segmentation, distributed processing, cloud computing, sensoriamento remoto, segmenta\u00e7\u00e3o de imagens, processamento distribu\u00eddo, computa\u00e7\u00e3o em nuvem. 1. Introdu\u00e7\u00e3o A an\u00e1lise de dados de sensoriamento \u00e9 de extrema import\u00e2ncia para os pesquisadores em diversas \u00e1reas de aplica\u00e7\u00e3o, como agricultura, resposta a desastres, planejamento urbano e opera\u00e7\u00f5es de minera\u00e7\u00e3o, entre outras. Os avan\u00e7os recentes nas tecnologias de observa\u00e7\u00e3o da Terra, bem como o aumento do n\u00famero de sistemas a\u00e9reos e orbitais em atividade t\u00eam fornecido uma maior quantidade de insumo para este fim. Exemplos ilustrativos s\u00e3o o Sentinel-1 da ESA que produz em torno de 1,5 GB por dia (Grabak, 2014) e o projeto EOSDIS da NASA gera cerca de 16 TB por dia (NASA Earthdata, 2015). Adicionalmente, a redu\u00e7\u00e3o consider\u00e1vel dos custos de aquisi\u00e7\u00e3o de imagens junto a empresas privadas e o crescimento de conjuntos de dados de livre acesso difundidos nos \u00faltimos anos tamb\u00e9m contribu\u00edram para o acesso a um volume maior de dados. Este cen\u00e1rio \u00e9 pr\u00f3digo em informa\u00e7\u00f5es estrat\u00e9gicas que podem ser usadas pelos respectivos tomadores de decis\u00e3o. Lidar com estes grandes volumes de dados, no entanto, representa um desafio principalmente quando estas informa\u00e7\u00f5es devem ser obtidas em um curto prazo. De fato, este cen\u00e1rio revela grandes desafios para a comunidade de sensoriamento remoto relacionados principalmente \u00e0 capacidade de processamento desse grande volume de dados (Lee et al., 2015). H\u00e1, portanto, uma demanda por ferramentas autom\u00e1ticas para interpreta\u00e7\u00e3o de imagens altamente escal\u00e1veis. Neste sentido, a computa\u00e7\u00e3o distribu\u00edda \u00e9 uma alternativa comumente adotada quando se faz necess\u00e1rio o processamento de grandes conjuntos de dados. De forma mais espec\u00edfica, a computa\u00e7\u00e3o em nuvem \u00e9 uma tend\u00eancia, pois pode fornecer uma infraestrutura escal\u00e1vel para suportar diferentes necessidades de processamento (Fern\u00e1ndez et al., 2014). Al\u00e9m disso, a exist\u00eancia de diferentes provedores de infraestrutura de computa\u00e7\u00e3o em nuvem que oferecem um modelo de pay-per-use proporciona grande poder de computa\u00e7\u00e3o aos usu\u00e1rios ao mesmo tempo em que os livra de preocupa\u00e7\u00f5es com a aquisi\u00e7\u00e3o ou manuten\u00e7\u00e3o de um hardware complexo. Em um recente trabalho (Happ et al., 2016) foram apresentadas estrat\u00e9gias para segmenta\u00e7\u00e3o por crescimento de regi\u00f5es utilizando computa\u00e7\u00e3o em nuvem. Estas solu\u00e7\u00f5es possibilitam o processamento distribu\u00eddo de imagens muito grandes em um cluster f\u00edsico ou virtual. As estrat\u00e9gias s\u00e3o baseadas na divis\u00e3o da imagem em tiles e utilizam um mecanismo de indexa\u00e7\u00e3o espec\u00edfico junto a um m\u00e9todo de costura hier\u00e1rquica para suprimir os artefatos que podem ser gerados ao longo das bordas. Experimentos conduzidos em uma implementa\u00e7\u00e3o baseada no paradigma de programa\u00e7\u00e3o distribu\u00edda MapReduce (Dean e Ghemawa, 2008) demonstraram um elevado potencial de escalabilidade. As estrat\u00e9gias mencionadas s\u00e3o independentes do modelo de programa\u00e7\u00e3o adotado. Ao mesmo tempo, alternativas ao MapReduce em c\u00f3digo aberto v\u00eam sendo propostas, em particular o Apache Tez (Saha et al., 2015) tem atra\u00eddo muita aten\u00e7\u00e3o recentemente. Trata-se de uma plataforma de c\u00f3digo aberto para constru\u00e7\u00e3o de processos dirigidos por fluxos de dados. O objetivo deste trabalho \u00e9 comparar a efici\u00eancia computacional do MapReduce com o Apache Tez, tomando como base o algoritmo de segmenta\u00e7\u00e3o distribu\u00edda supracitado. Uma das vantagens de utilizar Tez \u00e9 a sua compatibilidade e integra\u00e7\u00e3o com outras solu\u00e7\u00f5es consagradas como Pig (Olston, 2008) e Hive (Thusoo, 2009). Al\u00e9m disso, Tez tem sido considerado superior ao MapReduce por utilizar o sistema distribu\u00eddo de arquivos de forma mais efetiva e processar v\u00e1rias fases de reduce sem a necessidade de fases de map, entre outros benef\u00edcios (Singh, 2016). O restante deste artigo est\u00e1 organizado da seguinte forma. Na pr\u00f3xima se\u00e7\u00e3o as estrat\u00e9gias de segmenta\u00e7\u00e3o distribu\u00edda s\u00e3o descritas de forma breve. Na se\u00e7\u00e3o seguinte, define-se a arquitetura geral e uma implementa\u00e7\u00e3o da solu\u00e7\u00e3o apresentada. Na se\u00e7\u00e3o 4, apresentam-se a an\u00e1lise experimental e os resultados. Por fim, o trabalho \u00e9 conclu\u00eddo na Se\u00e7\u00e3o 5 e poss\u00edveis trabalhos futuros s\u00e3o indicados. 2. Segmenta\u00e7\u00e3o por Crescimento de Regi\u00f5es na Nuvem Entre as etapas da an\u00e1lise de imagens, a segmenta\u00e7\u00e3o geralmente \u00e9 associada a um alto custo computacional. Apesar da exist\u00eancia de diversas solu\u00e7\u00f5es paralelas com a finalidade de acelerar esta tarefa, o problema recai sobre a capacidade de processar imagens muito grandes. A solu\u00e7\u00e3o adotada neste artigo se baseia nas estrat\u00e9gias apresentadas por Happ et al. (2016), que consistem uma solu\u00e7\u00e3o escal\u00e1vel e eficiente para processar imagens de grandes tamanhos em um ambiente em nuvem. Uma breve explica\u00e7\u00e3o dos m\u00e9todos apresenta-se a seguir. O crescimento de regi\u00f5es \u00e9 um processo iterativo constitu\u00eddo de verifica\u00e7\u00e3o constante de vizinhan\u00e7a e possui fortes depend\u00eancias entre segmentos adjacentes. A divis\u00e3o de imagens em tiles \u00e9 uma solu\u00e7\u00e3o potencial que requer algum mecanismo espec\u00edfico para lidar com os segmentos localizados nas bordas dos tiles. Em suma, a estrat\u00e9gia proposta por Happ et al. (2016) lida com o problema por meio de tr\u00eas etapas. Inicialmente a imagem \u00e9 dividida em tiles de forma a gerar conjuntos de dados independentes pass\u00edveis de distribui\u00e7\u00e3o. Em seguida, o algoritmo de segmenta\u00e7\u00e3o propriamente dito \u00e9 executado em cada um dos tiles de forma independente. Por fim, um m\u00e9todo de p\u00f3s-processamento \u00e9 utilizado para costurar os segmentos adjacentes que tocam as bordas de diferentes tiles com a finalidade de suprimir os artefatos gerados pelas segmenta\u00e7\u00f5es independentes. Para o funcionamento correto destas etapas, pressup\u00f5e-se que os segmentos internos, os que n\u00e3o tocam nas bordas dos tiles, est\u00e3o corretamente delineados, isto \u00e9, n\u00e3o sofrem com a divis\u00e3o da imagem. Embora essa suposi\u00e7\u00e3o n\u00e3o seja necessariamente verdadeira em todos os casos, ela faz sentido basicamente porque esses segmentos est\u00e3o menos sujeitos \u00e0 potencial influ\u00eancia de pixels em tiles adjacentes. Esta hip\u00f3tese implica em uma quantidade muito menor de processamento durante o processo de costura, e permite que segmentos de tiles diferentes sejam agrupados sem problemas cr\u00edticos de mem\u00f3ria. Al\u00e9m disso, um eficiente esquema de indexa\u00e7\u00e3o espacial com diferentes n\u00edveis hier\u00e1rquicos \u00e9 utilizado para determinar as extens\u00f5es geogr\u00e1ficas dos tiles de imagem e rotular os segmentos. Este esquema de indexa\u00e7\u00e3o suporta o agrupamento de segmentos numa etapa de p\u00f3s-processamento de acordo com a sua localiza\u00e7\u00e3o espacial, de modo que segmentos adjacentes fa\u00e7am parte da mesma distribui\u00e7\u00e3o de dados no p\u00f3s-processamento. Tr\u00eas estrat\u00e9gias de p\u00f3s-processamento s\u00e3o definidas no trabalho de Happ et al. (2016): P\u00f3s-Processamento Simples (SPP), P\u00f3s-Processamento Hier\u00e1rquico (HPP) e P\u00f3sProcessamento Hier\u00e1rquico com Re-segmenta\u00e7\u00e3o (HPPR). A primeira \u00e9 a mais r\u00e1pida, por\u00e9m produz artefatos no resultado. J\u00e1 a \u00faltima consome mais tempo, mas fornece resultados sem artefatos. Neste trabalho, o interesse recai sobre a primeira estrat\u00e9gia, a SPP, que \u00e9 utilizada para a execu\u00e7\u00e3o dos experimentos. A SPP possui um \u00fanico passo de p\u00f3s-processamento, mas que \u00e9 suficiente para permitir que segmentos de tiles adjacentes sejam fundidos. 3. Defini\u00e7\u00e3o da Arquitetura e Implementa\u00e7\u00e3o De maneira geral, pode-se definir uma arquitetura para a segmenta\u00e7\u00e3o distribu\u00edda composta por tr\u00eas camadas em diferentes n\u00edveis de abstra\u00e7\u00e3o (Figura 1). A primeira camada est\u00e1 relacionada com a defini\u00e7\u00e3o das entradas e par\u00e2metros de segmenta\u00e7\u00e3o e configura\u00e7\u00f5es do ambiente distribu\u00eddo. Por esta raz\u00e3o, \u00e9 conhecida como camada de defini\u00e7\u00e3o. A segunda camada \u00e9 chamada de camada de segmenta\u00e7\u00e3o e \u00e9 organizada em uma estrutura de alto n\u00edvel a fim de esconder a complexidade da programa\u00e7\u00e3o distribu\u00edda propriamente dita. Esta camada permite incluir novos algoritmos de segmenta\u00e7\u00e3o e outros m\u00e9todos desejados, al\u00e9m de alterar o fluxo de execu\u00e7\u00e3o. A terceira camada \u00e9 a camada de distribui\u00e7\u00e3o. Por estar relacionada com o processamento distribu\u00eddo de fato, somente programadores com habilidades de programa\u00e7\u00e3o distribu\u00edda ser\u00e3o capazes de interagir com essa camada. A liga\u00e7\u00e3o entre as camadas de segmenta\u00e7\u00e3o e de distribui\u00e7\u00e3o \u00e9 definida por uma tradu\u00e7\u00e3o, onde as instru\u00e7\u00f5es de alto n\u00edvel s\u00e3o compiladas em c\u00f3digo de processamento distribu\u00eddo. Figura 1. Arquitetura da segmenta\u00e7\u00e3o distribu\u00edda. 3.1 Implementa\u00e7\u00e3o Original com MapReduce Tomando como base a arquitetura descri", "venue": "", "year": 2017, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": "2017-02-13", "journal": {"name": "", "pages": "60164", "volume": ""}, "authors": [{"authorId": "12712049", "name": "P. N. Happ"}, {"authorId": "151008301", "name": "G. Costa"}, {"authorId": "2066979023", "name": "Raul Queiroz Feitosa"}], "citations": []}
