{"paperId": "e248079fd2706e432dc8c8774fd7f37b94ced7ca", "publicationVenue": {"id": "d13e941e-4cac-4f1d-bdca-77d927e31f1b", "name": "ACM Symposium on Cloud Computing", "type": "conference", "alternate_names": ["System-on-Chip Conference", "ACM Symp Cloud Comput", "Syst Conf", "Symp Cloud Comput", "Annual IEEE International System-on-Chip Conference", "Symposium on Cloud Computing", "Annu IEEE Int Syst Conf", "SoCC"], "url": "http://www.ieee-socc.org/"}, "title": "ApproxJoin: Approximate Distributed Joins", "abstract": "A distributed join is a fundamental operation for processing massive datasets in parallel. Unfortunately, computing an equi-join over such datasets is very resource-intensive, even when done in parallel. Given this cost, the equi-join operator becomes a natural candidate for optimization using approximation techniques, which allow users to trade accuracy for latency. Finding the right approximation technique for joins, however, is a challenging task. Sampling, in particular, cannot be directly used in joins; na\u00efvely performing a join over a sample of the dataset will not preserve statistical properties of the query result. To address this problem, we introduce ApproxJoin. We interweave Bloom filter sketching and stratified sampling with the join computation in a new operator that preserves statistical properties of an aggregation over the join output. ApproxJoin leverages Bloom filters to avoid shuffling non-joinable data items around the network, and then applies stratified sampling to obtain a representative sample of the join output. We implemented ApproxJoin in Apache Spark, and evaluated it using microbenchmarks and real-world workloads. Our evaluation shows that ApproxJoin scales well and significantly reduces data movement, without sacrificing tight error bounds on the accuracy of the final results. ApproxJoin achieves a speedup of up to 9x over unmodified Spark-based joins with the same sampling ratio. Furthermore, the speedup is accompanied by a significant reduction in the shuffled data volume, which is up to 82x less than unmodified Spark-based joins.", "venue": "ACM Symposium on Cloud Computing", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2018-10-11", "journal": {"name": "Proceedings of the ACM Symposium on Cloud Computing"}, "authors": [{"authorId": "2265023", "name": "D. Quoc"}, {"authorId": "2282441", "name": "Istemi Ekin Akkus"}, {"authorId": "3025359", "name": "Pramod Bhatotia"}, {"authorId": "3264757", "name": "Spyros Blanas"}, {"authorId": "2042672", "name": "Ruichuan Chen"}, {"authorId": "145494211", "name": "C. Fetzer"}, {"authorId": "143850196", "name": "T. Strufe"}], "citations": [{"paperId": "e31288cc06ee057ac26ef07e2904e5fdbb920982", "title": "Seesaw Counting Filter: A Dynamic Filtering Framework for Vulnerable Negative Keys"}, {"paperId": "b06e2791108cd160b9d0a244e086c9dff1ad97ce", "title": "Plexus: Optimizing Join Approximation for Geo-Distributed Data Analytics"}, {"paperId": "fe81557cb5e2d67303528f0139f75daf300334ba", "title": "AggFirstJoin: Optimizing Geo-Distributed Joins using Aggregation-Based Transformations"}, {"paperId": "2d1dc3af8028d98ee72a854ce1698477d5f89ef7", "title": "Scaling and Load-Balancing Equi-Joins"}, {"paperId": "4cfb281b959f257374cb60f5a3e86893a7a938ca", "title": "Efficient Transmission and Reconstruction of Dependent Data Streams via Edge Sampling"}, {"paperId": "eadc9d297dc924d4c3e16f8a2b1d4606953ed4dd", "title": "Scaling Equi-Joins"}, {"paperId": "f032cd555b945b60e636e67a312aa485525754f6", "title": "Seesaw Counting Filter: An Efficient Guardian for Vulnerable Negative Keys During Dynamic Filtering"}, {"paperId": "c6002247dee39ff91db2b646d8f2dd375cbb0a43", "title": "Towards WAN-aware join sampling over geo-distributed data"}, {"paperId": "a97b2ed4207da2817f419b67ed3fb285911ef401", "title": "ProSPECT: Proactive Storage Using Provenance for Efficient Compute and Tiering"}, {"paperId": "8415c70cac4ef21936bd6cf182dc85cc0b7ec384", "title": "Stretching your data with taffy filters"}, {"paperId": "10e81e763aa43457478269c5495d56155af8cea2", "title": "Spark SQL Query Optimization Based on Runtime Statistics Collection"}, {"paperId": "2752a6b3e588e91ab047bed8d20551db2816f480", "title": "Stacked Filters: Learning to Filter by Structure"}, {"paperId": "b1f8df6e9768fb9274bc4e05da18a7f04056e1eb", "title": "General Model for Index Recommendation Based on Convolutional Neural Network"}, {"paperId": "9e2f0e874f42d54ab5b15dc9d4789e8a725cd4f7", "title": "Conditional Cuckoo Filters"}, {"paperId": "56b9add097943ce1dcd686643a5d3e48f839db70", "title": "Scaling Out Schema-free Stream Joins"}, {"paperId": "e07f7b953ace121daed07224bcd38f3e9b226c72", "title": "Join on Samples: A Theoretical Guide for Practitioners"}, {"paperId": "e4c3ee7c672f7b4ff12c611806c08ecd64897d3d", "title": "CS*: Approximate Query Processing on Big Data using Scalable Join Correlated Sample Synopsis"}, {"paperId": "088f9d080f041c0c27a22fd9eba66b2cc5feb9ba", "title": "Quality-Elasticity: Improved Resource Utilization, Throughput, and Response Times Via Adjusting Output Quality to Current Operating Conditions"}, {"paperId": "a96405df7f3b6318d31f088e3988fe93dbecc949", "title": "TensorSCONE: A Secure TensorFlow Framework using Intel SGX"}, {"paperId": "5ca0cadf12cef2908c636d64da225e168273ca90", "title": "Exploiting Network Loss for Distributed Approximate Computing with NetApprox"}, {"paperId": "ea6fa05b09711501c3d65b03933ca46162393b0b", "title": "Research on Runtime Query Optimization Technology of Spark SQL"}, {"paperId": "2d727c808a080ea0d10386130b84a13a32513f6b", "title": "AdCom: Adaptive Combiner for Streaming Aggregations"}, {"paperId": "1f905c53cff4390690c49e7a89890468d5ada11f", "title": "Managing cloud resource scarcity"}, {"paperId": "6996c5bb049b06914701a8e7d81d13f65bf6b72e", "title": "Online Adaptive Approximate Stream Processing With Customized Error Control"}]}
