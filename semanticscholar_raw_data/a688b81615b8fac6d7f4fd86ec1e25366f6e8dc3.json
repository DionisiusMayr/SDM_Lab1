{"paperId": "a688b81615b8fac6d7f4fd86ec1e25366f6e8dc3", "publicationVenue": {"id": "5545566b-c0b8-418c-83a5-a986a4657572", "name": "ACM-SIAM Symposium on Discrete Algorithms", "type": "conference", "alternate_names": ["Symposium on Discrete Algorithms", "ACM-SIAM Symp Discret Algorithm", "Symp Discret Algorithm", "SODA"], "url": "https://en.wikipedia.org/wiki/Symposium_on_Discrete_Algorithms"}, "title": "Parallel Batch-Dynamic Graphs: Algorithms and Lower Bounds", "abstract": "In this paper we study the problem of dynamically maintaining graph properties under batches of edge insertions and deletions in the massively parallel model of computation. In this setting, the graph is stored on a number of machines, each having space strongly sublinear with respect to the number of vertices, that is, $n^\\epsilon$ for some constant $0 < \\epsilon < 1$. Our goal is to handle batches of updates and queries where the data for each batch fits onto one machine in constant rounds of parallel computation, as well as to reduce the total communication between the machines. This objective corresponds to the gradual buildup of databases over time, while the goal of obtaining constant rounds of communication for problems in the static setting has been elusive for problems as simple as undirected graph connectivity. \nWe give an algorithm for dynamic graph connectivity in this setting with constant communication rounds and communication cost almost linear in terms of the batch size. Our techniques combine a new graph contraction technique, an independent random sample extractor from correlated samples, as well as distributed data structures supporting parallel updates and queries in batches. \nWe also illustrate the power of dynamic algorithms in the MPC model by showing that the batched version of the adaptive connectivity problem is $\\mathsf{P}$-complete in the centralized setting, but sub-linear sized batches can be handled in a constant number of rounds. Due to the wide applicability of our approaches, we believe it represents a practically-motivated workaround to the current difficulties in designing more efficient massively parallel static graph algorithms.", "venue": "ACM-SIAM Symposium on Discrete Algorithms", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2019-08-06", "journal": {"name": "ArXiv", "volume": "abs/1908.01956"}, "authors": [{"authorId": "34751162", "name": "D. Durfee"}, {"authorId": "35221280", "name": "Laxman Dhulipala"}, {"authorId": "2876647", "name": "Janardhan Kulkarni"}, {"authorId": "2910492", "name": "Richard Peng"}, {"authorId": "2533470", "name": "Saurabh Sawlani"}, {"authorId": "1743608", "name": "Xiaorui Sun"}], "citations": [{"paperId": "0c100a01457991731a1991e529d6f4f1cb358418", "title": "GPU-Accelerated Batch-Dynamic Subgraph Matching"}, {"paperId": "096b8cd9a97045e89023ee76b67df926647d0ccb", "title": "Dynamic Maximal Matching in Clique Networks"}, {"paperId": "d68010be660d49235fc7c8214b3730bd85140449", "title": "The Parallel Dynamic Complexity of the Abelian Cayley Group Membership Problem"}, {"paperId": "ee7b0b9c6134d9d05ff72af0610a391c9ac55325", "title": "CPMA: An Efficient Batch-Parallel Compressed Set Without Pointers"}, {"paperId": "f722a9daf418bfa3780e5cd4d9f5cc2d9707c329", "title": "Fully Scalable Massively Parallel Algorithms for Embedded Planar Graphs"}, {"paperId": "a90a0e83734e1c51261ce025fe57e4f950406ee3", "title": "Improving Dual-Encoder Training through Dynamic Indexes for Negative Mining"}, {"paperId": "2145cc07488bd4fcd42cf371ccaf2759f5e7cc1b", "title": "BatchHL: Answering Distance Queries on Batch-Dynamic Networks at Scale"}, {"paperId": "047f5bd4619f74ec175924dc37e39c079caf7006", "title": "Terrace: A Hierarchical Graph Container for Skewed Dynamic Graphs"}, {"paperId": "960fe38eee72c8bbd7cbb8eab33840d3ba3ecdc8", "title": "Input-Dynamic Distributed Algorithms for Communication Networks"}, {"paperId": "25623db3866eefa418a24387d5abde6dbf0c3af9", "title": "HyPR: Hybrid Page Ranking on Evolving Graphs"}, {"paperId": "2c8192801736f9744f238851bb3ccc467e40d0a1", "title": "Exploring the Design Space of Static and Incremental Graph Connectivity Algorithms on GPUs"}, {"paperId": "1fc8d4d0528992a8710b596e20e547eb5420f07f", "title": "ConnectIt: A Framework for Static and Incremental Parallel Graph Connectivity Algorithms"}, {"paperId": "a659ec7e8f97c9e43adc81ac0b8606fcce4c9f90", "title": "How Fast Can You Update Your MST?"}, {"paperId": "cf290cba70066818524275b5a27ea35fdd483e04", "title": "Input-dynamic distributed graph algorithms for congested networks"}, {"paperId": "81adc1096930cc3b278fc0b9d216c1adce41d2d2", "title": "Fully Dynamic c-Edge Connectivity in Subpolynomial Time"}, {"paperId": "dc995967e5a2181fbf13100bd4a9f297b3070b7e", "title": "Parallel Batch-Dynamic k-Clique Counting"}, {"paperId": "0bb5ea9a11d23cfbfdc8939b7fdaa015b8415beb", "title": "Dynamic Graph Algorithms with Batch Updates in the Massively Parallel Computation Model"}, {"paperId": "9f9ebac01bba2949078d5a81904e537b0f4dd129", "title": "How fast can you update your MST? (Dynamic algorithms for cluster computing)"}, {"paperId": "3fb133c3dd37113aafc9aae90c3abcee15e3165a", "title": "Batch-dynamic Algorithms via Parallel Change Propagation and Applications to Dynamic Trees"}, {"paperId": "f9f73147522ae9684b1ef89bb2d6f3fa4466fbd6", "title": "Parallel Batch-Dynamic Trees via Change Propagation"}, {"paperId": "a8b26718d629024b1823b36a3b4881b8c4a6dc26", "title": "Equivalence classes and conditional hardness in massively parallel computations"}, {"paperId": "db0b44855b14533a22dbbd09f24f62a08cedef80", "title": "Practice of Streaming Processing of Dynamic Graphs: Concepts, Models, and Systems"}, {"paperId": "1d7e36762ba7cda0231ff6f64d33f3c324f5d48b", "title": "Practice of Streaming and Dynamic Graphs: Concepts, Models, Systems, and Parallelism"}, {"paperId": "dd187ac5e70aee0a6ddac744ee78a4e119a7691a", "title": "Theoretically Efficient Parallel Graph Algorithms Can Be Fast and Scalable"}, {"paperId": "b5a3e41790ddd2bbbfc843ca8d2c5d23f6972140", "title": "Fully Dynamic Sequential and Distributed Algorithms for MAX-CUT"}, {"paperId": "9bcf28c51114c3a81e348ebb89416bd3bf6527c6", "title": "Provably Efficient and Scalable Shared-Memory Graph Algorithms"}]}
