{"paperId": "3a7373bd891702ae93d7e058241a7e8be25e89eb", "publicationVenue": {"id": "54649c1d-6bcc-4232-9cd1-aa446867b8d0", "name": "USENIX Security Symposium", "type": "conference", "alternate_names": ["USENIX Secur Symp"], "url": "http://www.usenix.org/events/bytopic/security.html"}, "title": "DynSQL: Stateful Fuzzing for Database Management Systems with Complex and Valid SQL Query Generation", "abstract": "Database management systems (DBMSs) are essential parts of modern software. To ensure the security of DBMSs, recent approaches apply fuzzing to testing DBMSs by automatically generating SQL queries. However, existing DBMS fuzzers are limited in generating complex and valid queries, as they heavily rely on their prede\ufb01ned grammar models and \ufb01xed knowledge about DBMSs, but do not capture DBMS-speci\ufb01c state information. As a result, these approaches miss many deep bugs in DBMSs. In this paper, we propose a novel stateful fuzzing approach to effectively test DBMSs and \ufb01nd deep bugs. Our basic idea is that after DBMSs process each SQL statement, there is useful state information that can be dynamically collected to facilitate later query generation. Based on this idea, our approach performs dynamic query interaction to incrementally generate complex and valid SQL queries, using the captured state information. To further improve the validity of generated queries, our approach uses the error status of query processing to \ufb01lter out invalid test cases. We implement our approach as a fully automatic fuzzing framework, DynSQL. DynSQL is evaluated on 6 widely-used DBMSs (including SQLite, MySQL, MariaDB, PostgreSQL, MonetDB, and ClickHouse) and \ufb01nds 40 unique bugs. Among these bugs, 38 have been con\ufb01rmed, 21 have been \ufb01xed, and 19 have been assigned with CVE IDs. In our evaluation, DynSQL outperforms other state-of-the-art DBMS fuzzers, achieving 41% higher code coverage and \ufb01nding many bugs missed by other fuzzers.", "venue": "USENIX Security Symposium", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"pages": "4949-4965"}, "authors": [{"authorId": "32352436", "name": "Zu-Ming Jiang"}, {"authorId": "2865534", "name": "Jia-Ju Bai"}, {"authorId": "38319925", "name": "Z. Su"}], "citations": [{"paperId": "321f669f888e43e8f44390985a5da2d3fabe8a7e", "title": "Detecting Logic Bugs in Graph Database Management Systems via Injective and Surjective Graph Query Transformation"}, {"paperId": "c39d40e3127a56a0abe12f2fb1d698ea6ba1724d", "title": "Finding XPath Bugs in XML Document Processors via Differential Testing"}, {"paperId": "5ff9885778f8ec824beaeb6802af5c82e299f702", "title": "A Comprehensive Survey on Database Management System Fuzzing: Techniques, Taxonomy and Experimental Comparison"}, {"paperId": "340c2942dafb7f889fbbd3a682d04ef343794ec3", "title": "Fuzzing for Power Grids: A Comparative Study of Existing Frameworks and a New Method for Detecting Silent Crashes in Control Devices"}, {"paperId": "a4ec52e8b18e41359cf87097efae760905c27115", "title": "CERT: Finding Performance Issues in Database Systems Through the Lens of Cardinality Estimation"}, {"paperId": "0b083953239d0617b534a0d76762fa8350db4e6f", "title": "Randomized Differential Testing of RDF Stores"}, {"paperId": "a9fa1a56ba118fa3b629fc6308d6b5606751f023", "title": "Detecting Isolation Bugs via Transaction Oracle Construction"}, {"paperId": "5724e138fc08329e0baa08d2090d9424df1cb945", "title": "Testing Database Systems via Differential Query Execution"}, {"paperId": "ec682d9c7d68149dcd8932acd01a751f2f8b5611", "title": "Testing Database Engines via Query Plan Guidance"}, {"paperId": "c8376be6e5d269467545de4edffe06bb2b74b1c7", "title": "Understanding Transaction Bugs in Database Systems"}]}
