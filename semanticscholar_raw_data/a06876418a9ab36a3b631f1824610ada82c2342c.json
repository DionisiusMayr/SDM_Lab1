{"paperId": "a06876418a9ab36a3b631f1824610ada82c2342c", "publicationVenue": {"id": "6a1abd85-3eca-4491-ac76-0134749a10fc", "name": "International Workshop on Data Warehousing and OLAP", "type": "conference", "alternate_names": ["Data Warehousing and OLAP", "Int Workshop Data Warehous L", "DOLAP", "Data Warehous L"], "url": "http://www.wikicfp.com/cfp/program?id=748"}, "title": "Large Scale Querying and Processing for Property Graphs", "abstract": "Recently, large scale graph data management, querying and processing have experienced a renaissance in several timely application domains (e.g., social networks, bibliographical networks and knowledge graphs). However, these applications still introduce new challenges with large-scale graph processing. Therefore, recently, we have witnessed a remarkable growth in the prevalence of work on graph processing in both academia and industry. Querying and processing large graphs is an interesting and challenging task. Recently, several centralized/distributed large-scale graph processing frameworks have been developed. However, they mainly focus on batch graph analytics. On the other hand, the state-of-the-art graph databases can\u2019t sustain for distributed efficient querying for large graphs with complex queries. In particular, online large scale graph querying engines are still limited. In this paper, we present a research plan shipped with the state-of-the-art techniques for large-scale property graph querying and processing. We present our goals and initial results for querying and processing large property graphs based on the emerging and promising Apache Spark framework, a defacto standard platform for big data processing. In principle, the design of this research plan is revolving around two main goals. The first goal focuses on designing an adequate and efficient graph-based storage backend that can be integrated with the Apache Spark framework. The second goal focuses on developing various Graph-aware optimization techniques (e.g., graph indexing, graph materialized views), and extending the default relational Spark Catalyst optimizer with Graph-aware cost-based optimizations. Achieving these contributions can significantly enhance the performance of executing graph queries on top of Apache Spark .", "venue": "International Workshop on Data Warehousing and OLAP", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"pages": "79-83"}, "authors": [{"authorId": "2065777089", "name": "Mohamed Ragab"}], "citations": [{"paperId": "1848fd7dc64e9cd99ebe7a67dd3672907ca851fb", "title": "PAPAYA: A library for performance analysis of SQL-based RDF processing systems"}, {"paperId": "c03aafc6b9178c1403b8ecf178d7bee4f6839fa6", "title": "Schema-Based Query Optimisation for Graph Databases"}]}
