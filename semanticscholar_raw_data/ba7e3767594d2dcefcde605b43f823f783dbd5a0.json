{"paperId": "ba7e3767594d2dcefcde605b43f823f783dbd5a0", "publicationVenue": {"id": "7ed86435-f510-45fe-b582-c212782023aa", "name": "International Conference on Software Composition", "type": "conference", "alternate_names": ["SC", "Int Conf Softw Compos", "Software Composition", "Conf High Perform Comput (supercomputing", "ITG Symp Speech Commun", "Conference on High Performance Computing (Supercomputing)", "ITG Symposium of Speech Communication", "Softw Compos"]}, "title": "GraphM: an efficient storage system for high throughput of concurrent graph processing", "abstract": "With the rapidly growing demand of graph processing in the real world, a large number of iterative graph processing jobs run concurrently on the same underlying graph. However, the storage engines of existing graph processing frameworks are mainly designed for running an individual job. Our studies show that they are inefficient when running concurrent jobs due to the redundant data storage and access overhead. To cope with this issue, we develop an efficient storage system, called GraphM. It can be integrated into the existing graph processing systems to efficiently support concurrent iterative graph processing jobs for higher throughput by fully exploiting the similarities of the data accesses between these concurrent jobs. GraphM regularizes the traversing order of the graph partitions for concurrent graph processing jobs by streaming the partitions into the main memory and the Last-Level Cache (LLC) in a common order, and then processes the related jobs concurrently in a novel fine-grained synchronization. In this way, the concurrent jobs share the same graph structure data in the LLC/memory and also the data accesses to the graph, so as to amortize the storage consumption and the data access overhead. To demonstrate the efficiency of GraphM, we plug it into state-of-the-art graph processing systems, including GridGraph, GraphChi, PowerGraph, and Chaos. Experiments results show that GraphM improves the throughput by 1.73~13 times.", "venue": "International Conference on Software Composition", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2019-11-17", "journal": {"name": "Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis"}, "authors": [{"authorId": "2109972322", "name": "Jin Zhao"}, {"authorId": "72095113", "name": "Yu Zhang"}, {"authorId": "144925807", "name": "Xiaofei Liao"}, {"authorId": "1683219", "name": "Ligang He"}, {"authorId": "143824511", "name": "Bingsheng He"}, {"authorId": "145914256", "name": "Hai Jin"}, {"authorId": "2109500825", "name": "Haikun Liu"}, {"authorId": "2130496757", "name": "Yicheng Chen"}], "citations": [{"paperId": "eed65a4f88a51070241068cf9059a4026cc8615e", "title": "A disk I/O optimized system for concurrent graph processing jobs"}, {"paperId": "4533045a6e550796638c0d2d8b51237d0a2a45c5", "title": "MEGA Evolving Graph Accelerator"}, {"paperId": "1f6ee51e6af8faec6cc5faff712edd4ee1ed03a4", "title": "Taming Misaligned Graph Traversals in Concurrent Graph Processing (Abstract)"}, {"paperId": "5b36dfc37ae7149936ad05e6575800dece051630", "title": "Design and Implementation of External Storage Large-Scale Graph Computing System"}, {"paperId": "8bf5d3643a9d2b637d6f57ac5512e9ca54a51dbf", "title": "TurboMGNN: Improving Concurrent GNN Training Tasks on GPU With Fine-Grained Kernel Fusion"}, {"paperId": "384867889160fde9383dd7f3650e2befc3e069c7", "title": "MITra: A Framework for Multi-Instance Graph Traversal"}, {"paperId": "d9f1ae12e9a9d5b8eec465b4127285bae265112b", "title": "GraphTune: An Efficient Dependency-Aware Substrate to Alleviate Irregularity in Concurrent Graph Processing"}, {"paperId": "231b88e974b3117fbbeade9fa4f758ed4f15369b", "title": "NosWalker: A Decoupled Architecture for Out-of-Core Random Walk Processing"}, {"paperId": "3f5701f0b8ae2a039635d2486123f52bb6a1711c", "title": "Glign: Taming Misaligned Graph Traversals in Concurrent Graph Processing"}, {"paperId": "17f3d9b84c21cfc313d5c11f9efba37605cade94", "title": "Software Systems Implementation and Domain-Specific Architectures towards Graph Analytics"}, {"paperId": "d46a10610ed00bb41c65870137a8f07d63cf109a", "title": "GGraph: An Efficient Structure-Aware Approach for Iterative Graph Processing"}, {"paperId": "05f587341a403ba2efb8836d5dc89fad16a29f77", "title": "Krill: A Compiler and Runtime System for Concurrent Graph Processing"}, {"paperId": "f624bfc432f5ed9350125de1500e4e02baaf841b", "title": "LCCG: A Locality-Centric Hardware Accelerator for High Throughput of Concurrent Graph Processing"}, {"paperId": "659119a006d5a93b461bf132aa28df57ed5c88f5", "title": "Scheduling of Graph Queries: Controlling Intra- and Inter-query Parallelism for a High System Throughput"}, {"paperId": "4595404a30579368ffb6f15f0b96cf346c5d0658", "title": "LargeGraph"}, {"paperId": "5697ffe4883a6d72dbf6c9847f08c723bc84738f", "title": "GraphCP: An I/O-Efficient Concurrent Graph Processing Framework"}, {"paperId": "50e2627877a66f916556f6760ac63267b4c6a11e", "title": "Massively Parallel Algorithms for Personalized PageRank"}, {"paperId": "ab722a9ee7c45e2bfda50f9d87eb32d538501153", "title": "Cache-Efficient Fork-Processing Patterns on Large Graphs"}, {"paperId": "c130448814f002df3d82df61533d7f8a1d434e68", "title": "DepGraph: A Dependency-Driven Accelerator for Efficient Iterative Graph Processing"}, {"paperId": "62e54bfd61ddac57743b23f0be4dd096e4897f1f", "title": "Fast and efficient parallel breadth-first search with power-law graph transformation"}, {"paperId": "5a47391366199055620169e271cc551b79f75571", "title": "PartitionedVC: Partitioned External Memory Graph Analytics Framework for SSDs"}, {"paperId": "2ae7261d1dc8108bdc23a90efdeb9ed143d7e191", "title": "Non-Blocking Dynamic Unbounded Graphs with Worst-Case Amortized Bounds"}]}
