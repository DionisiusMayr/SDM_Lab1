{"paperId": "a7655a9801083b84c2d78a3b952e4acdc9bfa37a", "publicationVenue": null, "title": "Hybrid storage engine for geospatial data using NoSQL and SQL paradigms", "abstract": "The design and implementation of services to handle geospatial data involves thinking about storage engine performance and optimization for the desired use. NoSQL and relational databases bring their own advantages; therefore, it is necessary to choose one of these options according to the requirements of the solution. These requirements can change, or some operations may be performed in a more efficient way on another database engine, so using just one engine means being tied to its features and work model. This paper presents a hybrid approach (NoSQL-SQL) to store geospatial data on MongoDB, which are replicated and mapped on a PostgreSQL database, using an open source tool called ToroDB Stampede; solutions then can take advantage from either NoSQL or SQL features, to satisfy most of the requirements associated to the storage engine performance. A descriptive analysis to explain the workflow of the replication and synchronization in both engines precedes the quantitative analysis by which it was possible to determine that a normal database in PostgreSQL has a shorter response time than to perform the query in PostgreSQL with the hybrid database. In addition, the type of geometry increases the update response time of a materialized view. Palabras clave Base de datos; SQL; NoSQL; ToroDB; MongoDB; PostgreSQL; replicaci\u00f3n; base de datos espejo. Resumen El dise\u00f1o e implementaci\u00f3n de servicios para el manejo de datos geoespaciales implica pensar en el rendimiento del motor de almacenamiento y su optimizaci\u00f3n para cada uso deseado. Las bases de datos relacionales y no relacionales aportan sus propias funcionalidades, por lo tanto, es necesario elegir una de estas opciones de acuerdo con los requisitos de la soluci\u00f3n. Estos requisitos pueden cambiar o tal vez algunas operaciones puedan realizarse de manera m\u00e1s eficiente en otro motor de base de datos, por lo que usar solo un motor significa estar vinculado a sus caracter\u00edsticas y modelo de trabajo. Este art\u00edculo presenta un enfoque h\u00edbrido (NoSQL-SQL) para almacenar datos geoespaciales en MongoDB, estos datos son replicados y mapeados en una base de datos PostgreSQL, utilizando una herramienta de c\u00f3digo abierto llamada ToroDB Stampede; las soluciones pueden aprovechar las funciones NoSQL o SQL para satisfacer la mayor\u00eda de los requisitos asociados con el rendimiento del motor de almacenamiento. Aqu\u00ed se presenta un an\u00e1lisis descriptivo para explicar el flujo de trabajo de la replicaci\u00f3n y sincronizaci\u00f3n en ambos motores; adem\u00e1s, el an\u00e1lisis cuantitativo, mediante el cual se logr\u00f3 determinar que una base de datos normal en PostgreSQL tiene un tiempo de respuesta menor que realizar la consulta en PostgreSQL con la base de datos h\u00edbrida; asimismo, que el tipo de geometr\u00eda incrementa el tiempo de respuesta de actualizaci\u00f3n de una vista materializada. Introduction Finding the proper database for a solution can be vital when talking about performance or any other specific requirement. The set of database engines that support geographic data is limited on both relational and non-relational paradigms, so every key aspect is important when deciding between multiple options: \u201c... the success of geospatial application in any project depends upon Tecnolog\u00eda en Marcha, Vol. 34, N.\u00b0 1, Enero-Marzo 2021 42 the selection, collection, sorting and end-usage of data\u201d [1]. Therefore, the database engine features are an important aspect when deciding which one to use in order to satisfy the data management requirements. In general, NoSQL databases in the non-relational databases paradigm are effective when handling huge amounts of data due to their ability to scale horizontally, the speed of simple operations, the facility to replicate and distribute data between several servers, and the fact of not being tied to a rigid defined structure, which gives them flexibility, among other aspects [2]. In the last years, these databases have been growing with support on geospatial data handling [3], implementing features such as geographic indexing and some usual spatial operations, also increasing compatibility with external geographic tools such as GeoServer. On the other hand, relational databases are efficient when handling large amounts of data that have a fixed structure and guarantee ACID (atomicity, consistency, isolation, durability) properties in transactions [4]. Some of them also have better geospatial support than most NoSQL engines, providing more complex spatial operations and indexes; they are more easily compatible with other geospatial tools like Mapserver and QGIS [5]. Knowing the main features of both paradigms could help when making a decision to define a storage engine for a specific solution, but the requirements might change as this solution evolves in time, demanding more needs that the current paradigm could not support at his best. Being tied to just relational or non-relational paradigms means that solutions cannot take advantage from the features of the other one, so it would be helpful to achieve a hybrid approach to benefit from both paradigms\u2019 features [4]. A hybrid database model is a database system that uses two or more different database models in a system [6] and functions as an abstraction layer that sits on top of databases, for example in the paradigms SQL and NoSQL [7]. Some benefits in using multiple database models in a system are flexibility [8], increased performance [9, 10, 11], logical distribution [12], their design conceived for the web [6, 13]. Actually, there are some approaches that integrate the SQL and NoSQL paradigms in a hybrid database [6, 9, 14, 15]. However, there are very few papers proposing hybrid databases that work with PostgreSQL and MongoDB. The properties of these databases make them stand out in each of their respective paradigms. PostgreSQL was one of the first databases to address spatial issues [16]. PostgreSQL\u2019s extension, PostGIS [17], is highly optimized for spatial queries [18], and its large quantity of spatial functions make it very relevant. Meanwhile, there are currently over 225 NoSQL databases [19]; in contrast MongoDB, to date, is the only documentbased NoSQL database that supports line intersection and point containment queries [18]. Also, both Database Management Systems (DBMS) are open code, and Geoserver (an open source server for sharing geospatial data) [20] is enabled to give them support, because in its version 2.11.4 this tool includes a data connection and publication component from MongoDB. Another trend in the storage of spatial data is the big data [21, 22, 23, 24]. However, this type of implementation requires very good computing conditions for data storage and processing. In addition, it is necessary to analyze the issue of costs of the different technologies. The intention of this paper is to provide a descriptive analysis of an hybrid (NoSQL/SQL) storage engine\u2019s setting up approach, supported by MongoDB and PostgreSQL engines, to serve as backend for any WebGIS implementation or other desired use. The approach is based on a MongoDB replica set, that is mapped and maintains a live mirror on a PostgreSQL database, with help of a tool called ToroDB Stampede; the restructuring of mapped data in PostgreSQL through materialized views to be used with PostGIS extension. Tecnolog\u00eda en Marcha, Vol. 34, N.\u00b0 1, Enero-Marzo 2021 43 An implementation example is explained in the discussion. In the example, 52 geographic shapes are stored in two different MongoDB databases and replicated on PostgreSQL; the results obtained are 294 tables, 52 materialized views and 294 triggers linked to each table. We also intend to analyze the performance characteristics of the relational side of the proposed environment against other PostgreSQL database with geographic shapes imported from QGIS on Shapefile format, by making a statistic from a set of test samples designed with Apache JMeter tool [25]. There are three test scenarios: the first consist on a performance comparation of both PostgreSQL databases with a \u201cselect *\u201d operation from a multipolygon shape with 21 616 tuples; the second is another comparation with a \u201cselect Points within a Polygon\u201d operation, where the query results in 47 records; the third scenario is to analyze the time taken to refresh the materialized views on the hybrid approach PostgreSQL database. The main results allowed to determine that a normal database in PostgreSQL has a shorter response time than performing the query in PostgreSQL with the hybrid database. The type of geometry also increases the update response time of a materialized view.", "venue": "", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": null, "publicationDate": "2021-02-11", "journal": {"name": "", "volume": ""}, "authors": [{"authorId": "1489448645", "name": "J. A. Herrera-Ramirez"}, {"authorId": "2099530949", "name": "Marlen Trevi\u00f1o-Villalobos"}, {"authorId": "2103192993", "name": "Leonardo V\u00edquez-Acu\u00f1a"}], "citations": [{"paperId": "e500967568830df4b5e731a83d30b2a028ce820d", "title": "Cloud based evaluation of databases for stock market data"}, {"paperId": "67f39b74ae3e86d2893ad6b08f01bece01abf022", "title": "Evaluation of the response time of a geoservice using a hybrid and distributed database"}, {"paperId": "15d1d695e32f04820c044c22efddcf22c7f03bee", "title": "Indonesian Journal of Electrical Engineering and Computer Science"}]}
