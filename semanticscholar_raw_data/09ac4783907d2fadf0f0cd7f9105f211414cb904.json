{"paperId": "09ac4783907d2fadf0f0cd7f9105f211414cb904", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "A Practical Approach to Groupjoin and Nested Aggregates", "abstract": "Groupjoins, the combined execution of a join and a subsequent group by, are common in analytical queries, and occur in about 1/8 of the queries in TPC-H and TPC-DS. While they were originally invented to improve performance, efficient parallel execution of groupjoins can be limited by contention, which limits their usefulness in a many-core system. Having an efficient implementation of groupjoins is highly desirable, as groupjoins are not only used to fuse group by and join but are also introduced by the unnesting component of the query optimizer to avoid nested-loops evaluation of aggregates. Furthermore, the query optimizer needs be able to reason over the result of aggregation in order to schedule it correctly. Traditional selectivity and cardinality estimations quickly reach their limits when faced with computed columns from nested aggregates, which leads to poor cost estimations and thus, suboptimal query plans.\n \n In this paper, we present techniques to efficiently estimate, plan, and execute groupjoins and nested aggregates. We propose two novel techniques,\n aggregate estimates\n to predict the result distribution of aggregates, and\n parallel groupjoin execution\n for a scalable execution of groupjoins. The resulting system has significantly better estimates and a contention-free evaluation of groupjoins, which can speed up some TPC-H queries up to a factor of 2.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-07-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "2383-2396", "volume": "14"}, "authors": [{"authorId": "1703871325", "name": "Philipp Fent"}, {"authorId": "143993045", "name": "Thomas Neumann"}], "citations": [{"paperId": "0971c3ac656043fa0af0f0689b6821dab581667e", "title": "Building a Compiled Query Engine in Python"}, {"paperId": "1e4a4f00bed29338820b923bd3bfb35e16992fc6", "title": "A Scalable and Generic Approach to Range Joins"}, {"paperId": "fcd167bb8f2ee8119f052da3afb835dcbd7ea389", "title": "Fine-Tuning Data Structures for Analytical Query Processing"}, {"paperId": "c9e6c348af17abce7472c552107efc2ca24c5704", "title": "Database Technology for the Masses: Sub-Operators as First-Class Entities"}, {"paperId": "ce71be82ff41e0849f09cf337faa943989dd9c08", "title": "Incremental Fusion: Unifying Compiled and Vectorized Query Execution"}]}
