{"paperId": "30b19680d378594f0dd9a99b2720d404795d4b82", "publicationVenue": {"id": "8bc59e8b-e251-4201-839a-ec83ae78859d", "name": "Complex", "type": "conference", "alternate_names": ["Int Conf Complex Sci", "International Conference on Complex Sciences"], "issn": "0806-1912", "alternate_issns": ["1538-6848"], "url": "http://wo.uio.no/as/WebObjects/nettlogg.woa/1/wa/logg?logg=5904", "alternate_urls": ["http://www.wikicfp.com/cfp/program?id=545", "https://www.complex.com/"]}, "title": "Solving the Fragment Complexity of Official, Social, and Sensorial Urban Data", "abstract": "Cities in the big data era hold the massive urban data to create valuable information and digitally enhanced services. Sources of urban data are generally categorized as one of the three types: official, social, and sensorial, which are from the government and enterprises, social networks of citizens, and the sensor network. These types typically differ significantly from each other but are consolidated together for the smart urban services. Based on the sophisticated consolidation approaches, we argue that a new challenge, fragment complexity that represents a well-integrated data has appropriate but fragmentary schema and difficult to be queried, is ignored in the state-of-art urban data management. Comparing with predefined and rigid schema, fragmentary schema means a dataset contains millions of attributes but nonorthogonally distributed among tables, and of course, values of these attributes are even massive. As far as a query is concerned, locating where these attributes are being stored is the first encountered problem, while traditional value-based query optimization has no contributions. To address this problem, we propose an index on massive attributes as an attributes-oriented optimization, namely, attribute index. Attribute index is a secondary index for locating files in which the target attributes are stored. It contains three parts: ATree for searching keys, DTree for locating keys among files, and ADLinks as a mapping table between ATree and DTree. In this paper, the index architecture, logical structure and algorithms, the implementation details, the creation process, the integration to the existing key-value store, and the urban application scenario are described. Experiments show that, in comparison with B + -Tree, LSM-Tree, and AVL-Tree, the query time of ATree is 1.1x, 1.5x, and 1.2x faster, respectively. Finally, we integrate our proposition with HBase, namely, UrbanBase, whose query performance is 1.3x faster than the original HBase.", "venue": "Complex", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-10-15", "journal": {"name": "Complex.", "pages": "8914757:1-8914757:14", "volume": "2020"}, "authors": [{"authorId": "2146673478", "name": "Hui Liu"}, {"authorId": "1777689", "name": "Jing-qing Jiang"}, {"authorId": "2118739695", "name": "Yaowei Hou"}, {"authorId": "145898693", "name": "Jie Song"}], "citations": []}
