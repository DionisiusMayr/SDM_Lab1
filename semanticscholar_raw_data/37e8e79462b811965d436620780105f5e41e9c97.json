{"paperId": "37e8e79462b811965d436620780105f5e41e9c97", "publicationVenue": {"id": "0471222d-7141-46cf-8bf3-e7e1676553d1", "name": "IEEE International Symposium on Software Reliability Engineering", "type": "conference", "alternate_names": ["IEEE Int Symp Softw Reliab Eng", "Int Symp Softw Reliab Eng", "International Symposium on Software Reliability Engineering", "ISSRE"], "url": "http://www.wikicfp.com/cfp/program?id=1756"}, "title": "Evaluating Regression Test Selection Opportunities in a Very Large Open-Source Ecosystem", "abstract": "Regression testing in very large software ecosystems is notoriously costly, requiring computational resources that even large corporations struggle to cope with. Very large ecosystems contain thousands of rapidly evolving, interconnected projects where client projects transitively depend on library projects. Regression test selection (RTS) reduces regression testing costs by rerunning only tests whose pass/fail behavior may flip after code changes. For single projects, researchers showed that class-level RTS is more effective than lower method-or statement-level RTS. Meanwhile, several very large ecosystems in industry, e.g., at Facebook, Google, and Microsoft, perform project-level RTS, rerunning tests in a changed library and in all its transitive clients. However, there was no previous study of the comparative benefits of class-level and project-level RTS in such ecosystems. We evaluate RTS opportunities in the MAVEN Central opensource ecosystem. There, some popular libraries have up to 924589 clients; in turn, clients can depend on up to 11190 libraries. We sampled 408 popular projects and found that 202 (almost half) cannot update to latest library versions without breaking compilation or tests. If developers want to detect these breakages earlier, they need to run very many tests. We compared four variants of class-level RTS with project-level RTS in MAVEN Central. The results showed that class-level RTS may be an order of magnitude less costly than project-level RTS in very large ecosystems. Specifically, various class-level RTS variants select, on average, 7.8%-17.4% of tests selected by project-level RTS.", "venue": "IEEE International Symposium on Software Reliability Engineering", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2018-10-01", "journal": {"name": "2018 IEEE 29th International Symposium on Software Reliability Engineering (ISSRE)", "pages": "112-122"}, "authors": [{"authorId": "2280378", "name": "A. Gyori"}, {"authorId": "3023790", "name": "Owolabi Legunsen"}, {"authorId": "3252860", "name": "Farah Hariri"}, {"authorId": "1718171", "name": "D. Marinov"}], "citations": [{"paperId": "c5e4d3ef6d61cbeea895863856501e2e35a67dd0", "title": "Optimizing Continuous Development by Detecting and Preventing Unnecessary Content Generation"}, {"paperId": "fdff5c66b2f4ce9f129bcdbcf0577f0aaff9a1e7", "title": "Extracting Inline Tests from Unit Tests"}, {"paperId": "00cf787add0f7b31f5ddf41d8d9ece1eb4af46ca", "title": "More Precise Regression Test Selection via Reasoning about Semantics-Modifying Changes"}, {"paperId": "5f5824a34dc96e89954519c69e9931e963ce4c32", "title": "Compsuite: A Dataset of Java Library Upgrade Incompatibility Issues"}, {"paperId": "6cc9e567fab368ded8824901a0c8dedaeb338265", "title": "pytest-inline: An Inline Testing Tool for Python"}, {"paperId": "773fee6fb9b9231c3973113ae944464f3bec5986", "title": "Client-Specific Upgrade Compatibility Checking via Knowledge-Guided Discovery"}, {"paperId": "e9a71e07318e4a27880aaaa5e9212332fe53877b", "title": "Evolution-aware detection of order-dependent flaky tests"}, {"paperId": "b2f8399dc3423e4bac9300174b01a55ab1c81f85", "title": "Comparing and Combining Analysis-Based and Learning-Based Regression Test Selection"}, {"paperId": "b821a3defc52bafd2cb439e3696e12ca498d1029", "title": "An empirical comparison of four Java-based regression test selection techniques"}, {"paperId": "d420f9639f87564b713444f5fbcd83f0c39d1576", "title": "REPFINDER: Finding Replacements for Missing APIs in Library Update"}, {"paperId": "622fe022a2686c94e939b456ba323ca9b6588206", "title": "DIFFBASE: a differential factbase for effective software evolution management"}, {"paperId": "bc95c88191bef5bc909bdfb7051d49b7208eaf5c", "title": "Data-driven test selection at scale"}, {"paperId": "6e55debb0c1e699519f42b0fafafa864a81e02e4", "title": "Bridging the model-to-code abstraction gap with fuzzy logic in model-based regression test selection"}, {"paperId": "3d707e77c5c491664d689eae485c6c08c521eb0d", "title": "Regression Test Selection Tool for Python in Continuous Integration Process"}, {"paperId": "2e1607893fed0bd907e3ab947a3f07b4ca8e3997", "title": "Interactive, effort-aware library version harmonization"}, {"paperId": "68eb91188d4b34073224b5aadf214396fd2cfba5", "title": "Reflection-aware static regression test selection"}, {"paperId": "a861ac528b24b92c75b91369ec05fb4f12a3b730", "title": "Understanding and Improving Regression Test Selection in Continuous Integration"}, {"paperId": "3daf9b286aba6cd74b8b1201887715344dd179cb", "title": "Model-based testing of breaking changes in Node.js libraries"}, {"paperId": "ce02260b57e29c880cd4b16e9871fe38453e0075", "title": "Failure clustering without coverage"}, {"paperId": "5144026b171c782785a030b43d7aef7a6d93c029", "title": "Runtime Verification During Testing"}]}
