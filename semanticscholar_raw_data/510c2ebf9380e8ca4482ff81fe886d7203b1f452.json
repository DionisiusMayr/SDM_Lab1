{"paperId": "510c2ebf9380e8ca4482ff81fe886d7203b1f452", "publicationVenue": null, "title": "Parallel Query Processing: To Separate Communication from Computation", "abstract": "In this paper, we study parallel query processing with a focus on reducing the communication cost, which is the dominating factor in parallel query processing. The communication cost becomes large if the intermediate results between operators are large in intra-operator parallelism. In the existing approaches, it optimizes an SQL query by arranging relational algebra operators to reduce the total cost, where, for each operator, it involves (i) distribution of data partitioned to computing nodes by communication, and (ii)computation on computing nodes locally. The communication and computation are dealt with inside an operator and are not separable. In other words, it is difficult to avoid large intermediate results and hence reduce the communication cost. To reduce communication cost, we separate communication from computation using several new operators proposed in this paper. One is a pair operator () to pair the partitions of a relation R with the partitions of a relation S, where a partition is specified by a hash function. With the pair operator defined, we can explicitly deal with communication to deliver pairs of partitions to computing nodes. Together with , we can also explicitly treat the local computation on a computing node as op for any RA (relational algebra) operator op. We give a merge operator (U), to collect all partial results from computing nodes as they are. In short, with , op, and U, we are able to explicitly specify communication and computation for RA operators. Furthermore, we propose new techniques, namely, partitioning push-down and computation push-up to separate communication from computation for RA expressions. We prove that we can push-down/up for a wide range of relational expressions. We have developed a distributed system named Secco (Separate Communication from Computation) by revamping SparkSQL on Spark, and confirmed the efficiency of our approach in our performance studies using real datasets.", "venue": "SIGMOD Conference", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2022-06-10", "journal": {"name": "Proceedings of the 2022 International Conference on Management of Data"}, "authors": [{"authorId": "2144612100", "name": "Hao Zhang"}, {"authorId": "144666776", "name": "J. Yu"}, {"authorId": "2108547806", "name": "Yikai Zhang"}, {"authorId": "8599669", "name": "Kangfei Zhao"}], "citations": [{"paperId": "5c0a9d7f5ed0897d2a190a20050a2fd5a2dd13f0", "title": "Joining Entities Across Relation and Graph with a Unified Model"}, {"paperId": "89eef831b36deecaf7fc4d7de3a6d6aa1910c9e0", "title": "QaaD (Query-as-a-Data): Scalable Execution of Massive Number of Small Queries in Spark"}, {"paperId": "67464b0e8208870baf8f88059b5b7f6a73d1f8ba", "title": "Scaling Distributed Database Joins by Decoupling Computation and Communication"}]}
