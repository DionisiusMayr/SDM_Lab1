{"paperId": "6d31f0391547e6a56e63cf88948807c675650a5b", "publicationVenue": {"id": "1a5858d9-edfe-4a1b-ae39-60020748678f", "name": "ACM Transactions on Architecture and Code Optimization (TACO)", "type": "journal", "alternate_names": ["ACM Transactions on Architecture and Code Optimization", "ACM Trans Archit Code Optim", "ACM Trans Archit Code Optim (TACO"], "issn": "1544-3566", "url": "http://www.acm.org/taco", "alternate_urls": ["http://portal.acm.org/taco/", "https://taco.acm.org/"]}, "title": "AsynGraph", "abstract": "Recently, iterative graph algorithms are proposed to be handled by GPU-accelerated systems. However, in iterative graph processing, the parallelism of GPU is still underutilized by existing GPU-based solutions. In fact, because of the power-law property of the natural graphs, the paths between a small set of important vertices (e.g., high-degree vertices) play a more important role in iterative graph processing\u2019s convergence speed. Based on this fact, for faster iterative graph processing on GPUs, this article develops a novel system, called AsynGraph, to maximize its data parallelism. It first proposes an efficient structure-aware asynchronous processing way. It enables the state propagations of most vertices to be effectively conducted on the GPUs in a concurrent way to get a higher GPU utilization ratio through efficiently handling the paths between the important vertices. Specifically, a graph sketch (consisting of the paths between the important vertices) is extracted from the original graph to serve as a fast bridge for most state propagations. Through efficiently processing this sketch more times within each round of graph processing, higher parallelism of GPU can be utilized to accelerate most state propagations. In addition, a forward-backward intra-path processing way is also adopted to asynchronously handle the vertices on each path, aiming to further boost propagations along paths and also ensure smaller data access cost. In comparison with existing GPU-based systems, i.e., Gunrock, Groute, Tigr, and DiGraph, AsynGraph can speed up iterative graph processing by 3.06\u201311.52, 2.47\u20135.40, 2.23\u20139.65, and 1.41\u20134.05 times, respectively.", "venue": "ACM Transactions on Architecture and Code Optimization (TACO)", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-09-30", "journal": {"name": "ACM Transactions on Architecture and Code Optimization (TACO)", "pages": "1 - 21", "volume": "17"}, "authors": [{"authorId": "72095113", "name": "Yu Zhang"}, {"authorId": "144925807", "name": "Xiaofei Liao"}, {"authorId": "144204231", "name": "Lin Gu"}, {"authorId": "145914256", "name": "Hai Jin"}, {"authorId": "34876760", "name": "Kan Hu"}, {"authorId": "2109500825", "name": "Haikun Liu"}, {"authorId": "143824511", "name": "Bingsheng He"}], "citations": [{"paperId": "17f3d9b84c21cfc313d5c11f9efba37605cade94", "title": "Software Systems Implementation and Domain-Specific Architectures towards Graph Analytics"}, {"paperId": "4595404a30579368ffb6f15f0b96cf346c5d0658", "title": "LargeGraph"}, {"paperId": "b37c5a96fe2f3389d9fe3addb8812634abb82164", "title": "Grus"}]}
