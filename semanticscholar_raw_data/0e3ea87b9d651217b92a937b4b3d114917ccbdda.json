{"paperId": "0e3ea87b9d651217b92a937b4b3d114917ccbdda", "publicationVenue": {"id": "0b633ca7-6ee5-4042-8a7a-a38d8892ec16", "name": "International Symposium on Mathematical Morphology and Its Application to Signal and Image Processing", "type": "conference", "alternate_names": ["Int Semin Metall Mater", "International Seminar Metallurgy and Materials", "International Symposium on Memory Management", "ISMM", "Int Symp Mem Manag", "Int Symp Math Morphol It Appl Signal Image Process"], "url": "http://www.wikicfp.com/cfp/program?id=1729", "alternate_urls": ["https://en.wikipedia.org/wiki/International_Symposium_on_Memory_Management"]}, "title": "ZipKV: In-Memory Key-Value Store with Built-In Data Compression", "abstract": "This paper studies how to mitigate the speed performance loss caused by integrating block data compression into in-memory key-value\u2004(KV) stores. Despite extensive prior research on in-memory KV stores, little focus has been given to memory usage reduction via block data compression (e.g., LZ4, ZSTD) due to potential performance degradation. This paper introduces design techniques to mitigate compression-induced performance degradation by utilizing decompression streaming, latency differences between compression and decompression, and data access locality in real-world workloads. These techniques can be incorporated into conventional hash or B+-tree indexing structures, enabling integration with most in-memory KV stores without altering their core indexing data structures. For demonstration, we implemented ZipKV that incorporates the developed design techniques. Compared with RocksDB\u2004(in-memory mode) that employs the log-structured merge tree indexing data structure with natural support of block data compression, ZipKV realizes similar memory usage reduction via block data compression, reduces the point query latency by 68%\u2004(LZ4) and 58%\u2004(ZSTD), and achieves up to 3.8\u00d7\u2004(LZ4) and 2.7\u00d7\u2004(ZSTD) point query throughput.", "venue": "International Symposium on Mathematical Morphology and Its Application to Signal and Image Processing", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2023-06-06", "journal": {"name": "Proceedings of the 2023 ACM SIGPLAN International Symposium on Memory Management"}, "authors": [{"authorId": "2219049758", "name": "Linsen Ma"}, {"authorId": "2219558493", "name": "Rui Xie"}, {"authorId": "38144094", "name": "T. Zhang"}], "citations": [{"paperId": "50c7fe0bde7c1a3311e744136c56620e87405909", "title": "Requirements and Trade-Offs of Compression Techniques in Key\u2013Value Stores: A Survey"}]}
