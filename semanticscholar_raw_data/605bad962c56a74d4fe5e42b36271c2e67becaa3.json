{"paperId": "605bad962c56a74d4fe5e42b36271c2e67becaa3", "publicationVenue": {"id": "7bb54772-a70c-44df-9b9d-9f3b5354c0e2", "name": "IEEE International Parallel and Distributed Processing Symposium", "type": "conference", "alternate_names": ["IEEE Int Parallel Distrib Process Symp", "International Parallel and Distributed Processing Symposium", "IPDPS", "Int Parallel Distrib Process Symp"], "url": "http://www.ipdps.org/"}, "title": "Incrementalization of Vertex-Centric Programs", "abstract": "As the graphs in our world become ever larger, the need for programmable, easy to use, and highly scalable graph processing has become ever greater. One such popular graph processing model\u2014the vertex-centric computational model\u2014does precisely this by distributing computations across the vertices of the graph being computed over. Due to this distribution of the program to the vertices of the graph, the programmer \"thinks like a vertex\" when writing their graph computation, with limited to no sense of shared memory and where almost all communication between each on-vertex computation must be sent over the network. Because of this inherent communication overhead in the computational model, reducing the number of messages sent while performing a given computation is a central aspect of any efforts to optimize vertex-centric programs. While previous work has focused on reducing communication overhead by directly changing communication patterns\u2014by altering the way the graph is partitioned and distributed, or by altering the graph topology itself\u2014in this paper we present a different optimization strategy based on a family of complementary compile-time program transformations in order to minimize communication overhead by changing both the messaging and computational structures of programs. Particularly, we present and formalize a method by which a compiler can automatically incrementalize a vertex-centric program through a series of compile-time program transformations\u2014by modifying the on-vertex computation and messaging between vertices so that messages between vertices represent patches to be applied to the other vertex's local state. We empirically evaluate these transformations on a set of common vertex-centric algorithms and graphs and achieve an average reduction of 2.7X in total computational time, and 2.9X in the number of messages sent across all programs in the benchmark suite. Furthermore, since these are compile-time program transformations alone, other prior optimization strategies for vertex-centric programs can work with the resulting vertex-centric program just as they would a non-incrementalized program.", "venue": "IEEE International Parallel and Distributed Processing Symposium", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-05-20", "journal": {"name": "2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)", "pages": "1019-1029"}, "authors": [{"authorId": "2520685", "name": "Timothy A. K. Zakian"}, {"authorId": "51153010", "name": "L. Capelli"}, {"authorId": "34667855", "name": "Zhenjiang Hu"}], "citations": [{"paperId": "67a6f91179cc1fcc8408c26ab9b90e5c38ab0d7f", "title": "Layph: Making Change Propagation Constraint in Incremental Graph Processing by Layering Graph"}, {"paperId": "3a64f4551ad5297ff6d89e9464c9cccb72b464bb", "title": "Big Graphs: Challenges and Opportunities"}, {"paperId": "b0160ffbfeeb2b8593e1f31fb149acde5d24b6b6", "title": "iTurboGraph: Scaling and Automating Incremental Graph Analytics"}, {"paperId": "47d6afe5756109d7090b1c3f821d9e10ebc714b8", "title": "Incrementalizing Graph Algorithms"}, {"paperId": "3895eda45dc64171dd9617af18561b9a8b193252", "title": "Automating Incremental Graph Processing with Flexible Memoization"}, {"paperId": "021d12b8bd39c09f273ee6e30fc70916bf3e52ca", "title": "A Distributed Path Query Engine for Temporal Property Graphs"}, {"paperId": "66d6b08cbf221c66a0d0f48dba69df0b6bc434eb", "title": "iPregel: Strategies to Deal with an Extreme Form of Irregularity in Vertex-Centric Graph Processing"}, {"paperId": "b6dd86dfe33849c5d5084f53e77bf03f40281704", "title": "Adaptive Asynchronous Parallelization of Graph Algorithms"}]}
