{"paperId": "eabe46c64755c83f27fb6b97e29bf87213425f39", "publicationVenue": {"id": "6c6fcaa9-fd25-488b-8050-995227ac671c", "name": "Symposium on Operating Systems Principles", "type": "conference", "alternate_names": ["Symp Oper Syst Princ", "SOSP"], "url": "http://sosp.org/"}, "title": "Efficient scalable thread-safety-violation detection: finding thousands of concurrency bugs during testing", "abstract": "Concurrency bugs are hard to find, reproduce, and debug. They often escape rigorous in-house testing, but result in large-scale outages in production. Existing concurrency-bug detection techniques unfortunately cannot be part of industry's integrated build and test environment due to some open challenges: how to handle code developed by thousands of engineering teams that uses a wide variety of synchronization mechanisms, how to report little/no false positives, and how to avoid excessive testing resource consumption. This paper presents TSVD, a thread-safety violation detector that addresses these challenges through a new design point in the domain of active testing. Unlike previous techniques that inject delays randomly or employ expensive synchronization analysis, TSVD uses lightweight monitoring of the calling behaviors of thread-unsafe methods, not any synchronization operations, to dynamically identify bug suspects. It then injects corresponding delays to drive the program towards thread-unsafe behaviors, actively learns from its ability or inability to do so, and persists its learning from one test run to the next. TSVD is deployed and regularly used in Microsoft and it has already found over 1000 thread-safety violations from thousands of projects. It detects more bugs than state-of-the-art techniques, mostly with just one test run.", "venue": "Symposium on Operating Systems Principles", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2019-10-27", "journal": {"name": "Proceedings of the 27th ACM Symposium on Operating Systems Principles"}, "authors": [{"authorId": "120045289", "name": "Guangpu Li"}, {"authorId": "144134982", "name": "Shan Lu"}, {"authorId": "1702346", "name": "M. Musuvathi"}, {"authorId": "39496676", "name": "Suman Nath"}, {"authorId": "3130527", "name": "Rohan Padhye"}], "citations": [{"paperId": "1baeaf34dcffc77e74b6f40df0725b18e33f4624", "title": "CSSTs: A Dynamic Data Structure for Partial Orders in Concurrent Execution Analysis"}, {"paperId": "8db3e32063f38528a01d471db5a8b1f4c63e4477", "title": "Reorder Pointer Flow in Sound Concurrency Bug Prediction"}, {"paperId": "9a5711594a565dc489f2b882a8bb5c3152b2d087", "title": "Snowcat: Efficient Kernel Concurrency Testing using a Learned Coverage Predictor"}, {"paperId": "2d406284296499409247c706756343efd18e926d", "title": "Vicious Cycles in Distributed Software Systems"}, {"paperId": "13207e4824560ae6504badd13dcf5a500e419e4a", "title": "Effective Concurrency Testing for Go via Directional Primitive-Constrained Interleaving Exploration"}, {"paperId": "dca46b540bda7d95a4805af7bc9951e71c985afb", "title": "Detection of Java Basic Thread Misuses Based on Static Event Analysis"}, {"paperId": "60eb986e6742417e3c209feb71579e26755ace16", "title": "WAFFLE: Exposing Memory Ordering Bugs Efficiently with Active Delay Injection"}, {"paperId": "916557d95f3d95a83d3f3503350c05c42e8c2272", "title": "Fail through the Cracks: Cross-System Interaction Failures in Modern Cloud Systems"}, {"paperId": "bcb3656fe90509e8bf8db8b5b93c78d05d97e1e5", "title": "TSVD4J: Thread-Safety Violation Detection for Java"}, {"paperId": "92928948ee17e5bd706f9c3ddb114a5af9f67f9f", "title": "Protecting Locks Against Unbalanced Unlock()"}, {"paperId": "2cbe1e16a09ac1bb5feaa9d6e0e5541569a1a0f3", "title": "Timed pattern-based analysis of collaboration failures in system-of-systems"}, {"paperId": "c545ef4edee26cf8486a05de5f2db0a7cc71dc9d", "title": "FlakeRepro: automated and efficient reproduction of concurrency-related flaky tests"}, {"paperId": "031a1faba042f53d81c15245b87579a6ddd41644", "title": "Automated Synthesis of Asynchronizations"}, {"paperId": "6a2dae22323bb803286fc4a5b802fef2de0d8931", "title": "Cache Abstraction for Data Race Detection in Heterogeneous Systems with Non-coherent Accelerators"}, {"paperId": "5e43d0eedc234788850d62b2d017c65edbecd0bf", "title": "Controlled Concurrency Testing via Periodical Scheduling"}, {"paperId": "8ef6c82648c81a69fe02dbb38869a32e7de761da", "title": "What Do Developer-Repaired Flaky Tests Tell Us About the Effectiveness of Automated Flaky Test Detection?"}, {"paperId": "e4d3d782f6ad8b0fb4cfb83440f7eca135381180", "title": "A Deep Study of the Effects and Fixes of Server-Side Request Races in Web Applications"}, {"paperId": "060a2102cace6a20cacd6bd645bd8a477e879036", "title": "A study of real-world data races in Golang"}, {"paperId": "5f0c0a50ea70c17f68d6e5d06daaa95defc8217e", "title": "Who goes first? detecting go concurrency bugs via message reordering"}, {"paperId": "9623817fec19d256cc5c21cf8c8e5b9796446c35", "title": "Efficiently detecting concurrency bugs in persistent memory programs"}, {"paperId": "cb97a10e8a4c00567381b9b5b6c212af3495b0ec", "title": "BinGo: Pinpointing Concurrency Bugs in Go via Binary Analysis"}, {"paperId": "ba288f792878c57b46336a9b83fc080793e684f2", "title": "Nekara: Generalized Concurrency Testing"}, {"paperId": "f7814f0a9ee29a735b570cbe961f025825010f9e", "title": "Effective fault localization and context\u2010aware debugging for concurrent programs"}, {"paperId": "7a18f56f81bf8f42037ef2b82acfd62b84722899", "title": "Understanding and detecting server-side request races in web applications"}, {"paperId": "3587f65e7890d8b871752f5f95fd1968020f356b", "title": "RAProducer: efficiently diagnose and reproduce data race bugs for binaries via trace analysis"}, {"paperId": "bf0ff8775c4fe002498f7e52865f597283314edc", "title": "Refactoring traces to identify concurrency improvements"}, {"paperId": "7d18268421f7e4c7a10748f1bd02598cf8c6e4f5", "title": "Cache abstraction for data race detection in heterogeneous systems with non-coherent accelerators"}, {"paperId": "9d11677847a96c68694094178561fad129c3b493", "title": "When threads meet events: efficient and precise static race detection with origins"}, {"paperId": "ea0d281583cfe0bf48d072ec4b309dd26a231e0b", "title": "Reasoning about modern datacenter infrastructures using partial histories"}, {"paperId": "447b2b1602d749e1b144022f1f3c477679776457", "title": "Automatically detecting and fixing concurrency bugs in go software systems"}, {"paperId": "7fdf5539a75668175cfda3c3d93447232edd2433", "title": "Kard: lightweight data race detection with per-thread memory protection"}, {"paperId": "26d063c593cd9e8cb950b8864146818e8ffffd57", "title": "SherLock: unsupervised synchronization-operation inference"}, {"paperId": "bf8f678f7f56b5d27835425ebff489c0898efc1d", "title": "On interleaving space exploration of multi-threaded programs"}, {"paperId": "95a82e2d3c949a1d4ef3105d978626eb29859627", "title": "Automatically detecting risky scripts in infrastructure code"}, {"paperId": "a14b7289578b10d30e60625e7018977a2f66e6c7", "title": "Free the Bugs: Disclosing Blocking Violations in Reactive Programming"}, {"paperId": "d03dec54ea9a32ca5264f04051290e4bd5525d9e", "title": "RegionTrack"}, {"paperId": "c7032fa77c673732af788cb7266c04b0cd324370", "title": "Testing for Race Conditions in Distributed Systems via SMT Solving"}, {"paperId": "7d1c27333f37db261bd0b716e1bfebaa347c35e1", "title": "Krace: Data Race Fuzzing for Kernel File Systems"}, {"paperId": "01ce4c9a9593758bb8a1dbf5b1894512f51a4e52", "title": "When Memory Corruption Met Concurrency: Vulnerabilities in Concurrent Programs"}, {"paperId": "04c457456b9332562b83faa356503b54a92719c7", "title": "Testing for C # Programs with Coyote"}, {"paperId": "cb7b61dc0d478f7730ccde5bfceb98a738d9926e", "title": "An In-depth Analysis of Duplicated Linux Kernel Bug Reports"}, {"paperId": "736329511975dc8bb13ab3bf7f4ac13be21b7ea0", "title": "Context-Sensitive and Directional Concurrency Fuzzing for Data-Race Detection"}, {"paperId": "7e6facf82e248ee5fbf93ac77735615a53001f6e", "title": "Cancellation in Systems: An Empirical Study of Task Cancellation Patterns and Failures"}, {"paperId": "a1f40062fa1ebb39965c1b0c23c487ca12053f6e", "title": "ExpRace: Exploiting Kernel Races through Raising Interrupts"}, {"paperId": "d88db0b52f31ed5444602a67e9a275faf57e15bf", "title": "TCP-Fuzz: Detecting Memory and Semantic Bugs in TCP Stacks with Fuzzing"}, {"paperId": "5eae7cabc974060598a193714ef3f9e50605a794", "title": "ZERMIA - A Fault Injector Framework for Testing Byzantine Fault Tolerant Protocols"}, {"paperId": "990c5fb82e9d15449d56e62ca0d1e245131b93b3", "title": "Tests and Proofs: 14th International Conference, TAP 2020, Held as Part of STAF 2020, Bergen, Norway, June 22\u201323, 2020, Proceedings"}, {"paperId": "1b3db3d0e64bd87ed3e8ac04d124da4728f21e27", "title": "PVcon: Localizing Hidden Concurrency Errors With Prediction and Verification"}, {"paperId": "97babd09698e9d9ac959a2143e7a29f276f6aa76", "title": "AGAMOTTO: How Persistent is your Persistent Memory Application?"}, {"paperId": "58303417430c9659a4fab97b2c58e20d88e0b9a0", "title": "An Empirical Study of Performance Interference: Timing Violation Patterns and Impacts"}, {"paperId": "ac605d7378c1d596f0d97e4f260ddfd6df31d229", "title": "Efficient Exposure of Partial Failure Bugs in Distributed Systems with Inferred Abstract States"}]}
