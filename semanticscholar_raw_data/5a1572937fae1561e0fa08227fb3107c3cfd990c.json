{"paperId": "5a1572937fae1561e0fa08227fb3107c3cfd990c", "publicationVenue": {"id": "764e3630-ddac-4c21-af4b-9d32ffef082e", "name": "IEEE International Conference on Data Engineering", "type": "conference", "alternate_names": ["ICDE", "Int Conf Data Eng", "IEEE Int Conf Data Eng", "International Conference on Data Engineering"], "url": "http://www.wikicfp.com/cfp/program?id=1331"}, "title": "Indexing for Near-Sorted Data", "abstract": "Indexing in modern data systems facilitates efficient query processing when the selection predicate is on an indexed key. As new data is ingested, indexes are gradually populated with incoming entries. In that respect, indexing can be perceived as the process of adding structure to incoming, otherwise unsorted data. Adding structure, however, comes at a cost. Instead of simply appending the incoming entries, we insert them into the index. If the ingestion order matches the indexed attribute order, the ingestion cost is entirely redundant and can be avoided altogether (e.g., via bulk loading in a B+-tree). However, classical tree index designs do not benefit when incoming data comes with an implicit ordering that is close to being sorted, but not fully sorted.In this paper, we study how indexes can exploit near-sortedness. Particularly, we identify sortedness as a resource that can accelerate index ingestion. We propose a new sortedness-aware (SWARE) design paradigm that combines opportunistic bulk loading, index appends, variable node fill and split factors, and an intelligent buffering scheme, to optimize ingestion and read queries in a tree index in the presence of near-sortedness. We apply SWARE to two state-of-the-art search trees (B+-tree and B\u03f5-tree), and we demonstrate that their Sortedness-Aware counterparts (SA B+-tree and SA B\u03f5-tree) outperform their respective baselines by up to 8.8\u00d7 (SA B+-tree) and 7.8\u00d7 (SA B\u03f5-tree) for a write-heavy workload in the presence of data sortedness, while offering competitive read performance, leading to overall benefits between 1.3\u00d7 \u2013 5\u00d7 for mixed read/write workloads with near-sorted data. Overall, we highlight that SWARE can be applied to other tree-like data structures to accelerate index ingestion and improve their performance in the presence of data sortedness.", "venue": "IEEE International Conference on Data Engineering", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2023-04-01", "journal": {"name": "2023 IEEE 39th International Conference on Data Engineering (ICDE)", "pages": "1475-1488"}, "authors": [{"authorId": "31934672", "name": "Subhadeep Sarkar"}, {"authorId": "40095095", "name": "Matthaios Olma"}, {"authorId": "2106382791", "name": "Aneesh Raman"}, {"authorId": "1840402", "name": "Manos Athanassoulis"}], "citations": [{"paperId": "54fea8b6946ba349c46af218c09301a1f7cad3fb", "title": "Enabling Timely and Persistent Deletion in LSM-Engines"}, {"paperId": "107b7e5c64d19a6eacba330c3cb5198de25acd96", "title": "Analysis of Approximate sorting in I/O model"}, {"paperId": "d077cf3287fbe29cd15b0f79ebebc77a5545c908", "title": "Data Structures for Data-Intensive Applications: Tradeoffs and Design Guidelines"}]}
