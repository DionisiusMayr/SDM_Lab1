{"paperId": "72226947c3c43eaed083a55bebb24aad2e299c8e", "publicationVenue": null, "title": "Performance Optimizations and Operator Semantics for Streaming Data Flow Programs", "abstract": "Internet native companies are able to collect more data and require insights from it faster than ever before. This trend to online processing of giant data sets has not stopped at Internet giants, but nowadays affects data driven research and almost all businesses from finance and retail to classic manufacturers. Relational database management systems do not meet the requirements for processing the often unstructured data sets with reasonable performance. The database research community started to address these trends in the early 2000s. Two new research directions have attracted major interest since: large-scale non-relational data processing as well as low-latency data stream processing. Large-scale non-relational data processing was pioneered by Google with their Google File System (GFS) and the MapReduce processing framework, and is commonly known as \u201cBig Data\u201d processing. While \u201cBig Data\u201d is characterized by the 4 Vs volume, variety, velocity, and veracity, in the beginning industry mainly focused on the challenge to handle large data sets. In parallel, low latency data stream processing was mainly driven by the research community developing prototype systems such as Aurora/Borealis, STREAM, and TelegraphCQ. Stream processing faced fundamental questions about semantics, incomplete data, and reasoning about time. The first generation of stream processing systems was not able to process high volume data streams, which made data stream processing a niche in its early years of development. The MapReduce paradigm inspired a second generation of stream processing systems. The second generation embraces a distributed architecture, scalability, and exploits data parallelism. While these systems have gained more and more attention in the industry, there are still major challenges to operate them at large scale. Provisioning and performance tuning of queries needs to be carried out by experts, and is a manual, time consuming, and error prone process. Furthermore, there is still no agreement in research or in the industry for the semantics of continuous data stream processing, i. e., its data or operational model. Different systems offer different semantics and often lack deterministic query execution. The goal of this thesis is two-fold. First, to investigate runtime characteristics of large scale data-parallel distributed streaming systems independent of their actual query semantics. And second, to propose the Dual Streaming Model to express semantics of continuous queries over data streams and tables. Our goal is to improve the understanding of system and query runtime behavior with the aim to provision queries automatically. We introduce a cost model for streaming data flow programs taking into account the two techniques of record batching and data parallelization. Additionally, we introduce optimization algorithms that leverage our model for cost-based query provisioning. The proposed Dual Streaming Model expresses the result of a streaming operator as a stream of successive updates to a result table, inducing a duality between streams and tables. A key challenge in distributed data stream processing is the inconsistency of the logical and the physical order of records within a data stream. Existing systems either ignore these inconsistencies or handle them by means of data buffering and reordering techniques, thereby introducing non-determinism or compromising processing latency. In our model, inconsistencies of logical and physical order are handled within the model itself, which allows for deterministic semantics as well as low latency query execution.", "venue": "", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": null, "publicationDate": "2020-07-01", "journal": {"name": "", "volume": ""}, "authors": [{"authorId": "46459221", "name": "Matthias Sax"}], "citations": [{"paperId": "8f876c2a8f9766606fe18272535a728f3c04afc0", "title": "Benchmarking scalability of stream processing frameworks deployed as microservices in the cloud"}, {"paperId": "d01fa90ee9444121aaa3e814e4876598f593cd3f", "title": "Benchmarking scalability of stream processing frameworks deployed as event-driven microservices in the cloud"}]}
