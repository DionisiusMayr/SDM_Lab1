{"paperId": "baa3f0306e01a16dad20a45b50c5b7a656e8f14b", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "Approximate Stream Analytics in Apache Flink and Apache Spark Streaming", "abstract": "Approximate computing aims for efficient execution of workflows where an approximate output is sufficient instead of the exact output. The idea behind approximate computing is to compute over a representative sample instead of the entire input dataset. Thus, approximate computing - based on the chosen sample size - can make a systematic trade-off between the output accuracy and computation efficiency. \nUnfortunately, the state-of-the-art systems for approximate computing primarily target batch analytics, where the input data remains unchanged during the course of sampling. Thus, they are not well-suited for stream analytics. This motivated the design of StreamApprox - a stream analytics system for approximate computing. To realize this idea, we designed an online stratified reservoir sampling algorithm to produce approximate output with rigorous error bounds. Importantly, our proposed algorithm is generic and can be applied to two prominent types of stream processing systems: (1) batched stream processing such as Apache Spark Streaming, and (2) pipelined stream processing such as Apache Flink. \nWe evaluated StreamApprox using a set of microbenchmarks and real-world case studies. Our results show that Spark- and Flink-based StreamApprox systems achieve a speedup of $1.15\\times$-$3\\times$ compared to the respective native Spark Streaming and Flink executions, with varying sampling fraction of $80\\%$ to $10\\%$. Furthermore, we have also implemented an improved baseline in addition to the native execution baseline - a Spark-based approximate computing system leveraging the existing sampling modules in Apache Spark. Compared to the improved baseline, our results show that StreamApprox achieves a speedup $1.1\\times$-$2.4\\times$ while maintaining the same accuracy level.", "venue": "arXiv.org", "year": 2017, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2017-09-09", "journal": {"name": "ArXiv", "volume": "abs/1709.02946"}, "authors": [{"authorId": "2265023", "name": "D. Quoc"}, {"authorId": "2042672", "name": "Ruichuan Chen"}, {"authorId": "3025359", "name": "Pramod Bhatotia"}, {"authorId": "145494211", "name": "C. Fetzer"}, {"authorId": "2809994", "name": "V. Hilt"}, {"authorId": "143850196", "name": "T. Strufe"}], "citations": [{"paperId": "5c375e9b320870cffb657a268cd5876aebf2f2b8", "title": "Poster: Processing of Latency- and Deadline-Aware Big Data Approaches at the Edge"}, {"paperId": "80f7f2a1e82e7837737cf1cf29622c1b94bc1b5e", "title": "ThundeRiNG: generating multiple independent random number sequences on FPGAs"}, {"paperId": "8140852c191fce8afbab1167fccc0f651075e4af", "title": "Query Rewriting for Incremental Continuous Query Evaluation in HIFUN"}, {"paperId": "8952038c96b73d85e4d2bf173b0dcfaf2c362c41", "title": "Reducing Fault-tolerant Overhead for Distributed Stream Processing with Approximate Backup"}, {"paperId": "728687a7cd7ec9af679897fa422092dcd6906291", "title": "Edge Computing for Terminal Query Based on IoT"}, {"paperId": "5aad333eacd25639a038cbef57f587f661c8793e", "title": "Incremental Sliding Window Analytics"}, {"paperId": "a96405df7f3b6318d31f088e3988fe93dbecc949", "title": "TensorSCONE: A Secure TensorFlow Framework using Intel SGX"}, {"paperId": "b3156132c5724995275a7f77f4442ff3f1f47c46", "title": "A Survey on Spark Ecosystem for Big Data Processing"}, {"paperId": "e248079fd2706e432dc8c8774fd7f37b94ced7ca", "title": "ApproxJoin: Approximate Distributed Joins"}, {"paperId": "5f93c082ff12fce3bedbe21166d86b4e7ed1b6a6", "title": "ApproxIoT: Approximate Analytics for Edge Computing"}, {"paperId": "31960fc841e833825f280e28093ab65ccc493cfd", "title": "Approximate Edge Analytics for the IoT Ecosystem"}, {"paperId": "1e54699ae9b064f857044e452c854a66eab75c6c", "title": "Approximate Distributed Joins in Apache Spark"}, {"paperId": "8501d2bb56adbe9b8dbbe85774ea8cef381f9782", "title": "StreamApprox: approximate computing for stream analytics"}, {"paperId": "3b3f458357af3b1a818f12a3ee410d034ec8b131", "title": "Analysis Layer Implementation Method for a Streaming Data Processing System"}, {"paperId": "6346c30bdb0ce9b2d6fd5967707df074fc417d3b", "title": "Stream Processing Tools for Analyzing Objects in Motion Sending High-Volume Location Data"}, {"paperId": "8a0090a38259d4ee5860354542bb19aecaab24dd", "title": "Influencing Factors in the Scalability of Distributed Stream Processing Jobs"}, {"paperId": "849ef0e877841ee8b0c2668f1f85b9feccf2143e", "title": "Privacy-Preserving Data Analytics"}, {"paperId": "c8295b5c29107159539514b733598a9f6386e8e3", "title": "Preprocessing unbounded data for use in real time visualization : Building a visualization data cube of unbounded data"}, {"paperId": "00362b295adca0078f9efecb6c9eaa1bee85d568", "title": "Distributed Programming Frameworks in Cloud Platforms"}, {"paperId": "dd8dc1889ae3a16b26dac560f6740e2302613064", "title": "Approximate Computing for Stream Analytics"}]}
