{"paperId": "0af675a6801486e58c56c399ae8d2d3b667702df", "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3", "name": "Software, Practice & Experience", "type": "journal", "alternate_names": ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"], "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752", "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/", "https://onlinelibrary.wiley.com/journal/1097024X"]}, "title": "Plumb: Efficient stream processing of multi\u2010user pipelines", "abstract": "Operational services run 24\u00d77 and require analytics pipelines to evaluate performance. In mature services such as domain name system (DNS), these pipelines often grow to many stages developed by multiple, loosely coupled teams. Such pipelines pose two problems: first, computation and data storage may be duplicated across components developed by different groups, wasting resources. Second, processing can be skewed, with structural skew occurring when different pipeline stages need different amounts of resources, and computational skew occurring when a block of input data requires increased resources. Duplication and structural skew both decrease efficiency, increasing cost, latency, or both. Computational skew can cause pipeline failure or deadlock when resource consumption balloons; we have seen cases where pessimal traffic increases CPU requirements 6\u2010fold. Detecting duplication is challenging when components from multiple teams evolve independently and require fault isolation. Skew management is hard due to dynamic workloads coupled with the conflicting goals of both minimizing latency and maximizing utilization. We propose Plumb, a framework to abstract stream processing as large\u2010block streaming (LBS) for a multi\u2010stage, multi\u2010user workflow. Plumb users express analytics as a DAG of processing modules, allowing Plumb to integrate and optimize workflows from multiple users. Many real\u2010world applications map to the LBS abstraction. Plumb detects and eliminates duplicate computation and storage, and it detects and addresses both structural and computational skew by tracking computation across the pipeline. We exercise Plumb using the analytics pipeline for B\u2010Root DNS. We compare Plumb to a hand\u2010tuned system, cutting latency to one\u2010third the original, and requiring 39% fewer container hours, while supporting more flexible, multi\u2010user analytics and providing greater robustness to DDoS\u2010driven demands.", "venue": "Software, Practice & Experience", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-10-11", "journal": {"name": "Software: Practice and Experience", "pages": "385 - 408", "volume": "51"}, "authors": [{"authorId": "49382326", "name": "A. Qadeer"}, {"authorId": "46351573", "name": "J. Heidemann"}], "citations": [{"paperId": "5379ca76dd6b2bba730ecb7d2f17ba3c4c19c9ac", "title": "Advanced Encryption Standard information encryption in pipeline cutting and welding system based on Django framework"}, {"paperId": "5387b4e8fb6cfba12a104eb2cc9db3f48e3caa80", "title": "Optimizing checkpoint\u2010based fault\u2010tolerance in distributed stream processing systems: Theory to practice"}, {"paperId": "940cadb4fb04077baa07c0da8965b9d43dba09b5", "title": "Efficient Processing of Streaming Data using Multiple Abstractions"}]}
