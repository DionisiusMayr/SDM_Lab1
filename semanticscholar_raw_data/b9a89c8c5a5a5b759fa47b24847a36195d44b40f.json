{"paperId": "b9a89c8c5a5a5b759fa47b24847a36195d44b40f", "publicationVenue": {"id": "38e26272-f1d7-470a-a99f-0b5884c9df6e", "name": "De Computis", "alternate_names": ["Comput"], "issn": "1886-1881", "url": "https://dialnet.unirioja.es/servlet/revista?clave_revista=6205&tipo_busqueda=CODIGO", "alternate_urls": ["http://decomputis.org/ojs/", "https://ideas.repec.org/s/dec/articl.html", "http://www.decomputis.org/"]}, "title": "Graph Reachability on Parallel Many-Core Architectures", "abstract": "Many modern applications are modeled using graphs of some kind. Given a graph, reachability, that is, discovering whether there is a path between two given nodes, is a fundamental problem as well as one of the most important steps of many other algorithms. The rapid accumulation of very large graphs (up to tens of millions of vertices and edges) from a diversity of disciplines demand efficient and scalable solutions to the reachability problem. General-purpose computing has been successfully used on Graphics Processing Units (GPUs) to parallelize algorithms that present a high degree of regularity. In this paper, we extend the applicability of GPU processing to graph-based manipulation, by re-designing a simple but efficient state-of-the-art graph-labeling method, namely the GRAIL (Graph Reachability Indexing via RAndomized Interval) algorithm, to many-core CUDA-based GPUs. This algorithm firstly generates a label for each vertex of the graph, then it exploits these labels to answer reachability queries. Unfortunately, the original algorithm executes a sequence of depth-first visits which are intrinsically recursive and cannot be efficiently implemented on parallel systems. For that reason, we design an alternative approach in which a sequence of breadth-first visits substitute the original depth-first traversal to generate the labeling, and in which a high number of concurrent visits is exploited during query evaluation. The paper describes our strategy to re-design these steps, the difficulties we encountered to implement them, and the solutions adopted to overcome the main inefficiencies. To prove the validity of our approach, we compare (in terms of time and memory requirements) our GPU-based approach with the original sequential CPU-based tool. Finally, we report some hints on how to conduct further research in the area.", "venue": "De Computis", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-12-02", "journal": {"name": "Comput.", "pages": "103", "volume": "8"}, "authors": [{"authorId": "8038281", "name": "S. Quer"}, {"authorId": "2064132797", "name": "A. Calabrese"}], "citations": [{"paperId": "3c9f89c7412e1ce86a91bc30e100633b2613f776", "title": "GPU-based Real-time Contact Tracing at Scale"}]}
