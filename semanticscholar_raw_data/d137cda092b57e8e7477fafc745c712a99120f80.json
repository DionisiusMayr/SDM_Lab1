{"paperId": "d137cda092b57e8e7477fafc745c712a99120f80", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Incorporating Super-Operators in Big-Data Query Optimizers", "abstract": "\n The cost of big-data analytics is dominated by shuffle operations that induce multiple disk reads, writes and network transfers. This paper proposes a new class of optimization rules that are specifically aimed at eliminating shuffles where possible. The rules substitute multiple shuffle inducing operators (\n Join, UnionAll, Spool, GroupBy\n ) with a single streaming operator which implements an entire sub-query. We call such operators\n super-operators.\n \n A key challenge with adding new rules that substitute sub-queries with super-operators is that there are many variants of the same sub-query that can be implemented via minor modifications to the same super-operator. Adding each as a separate rule leads to a search space explosion. We propose several extensions to the query optimizer to address this challenge. We propose a new abstract representation for operator trees that captures all possible sub-queries that a super-operator implements. We propose a new rule matching algorithm that can efficiently search for abstract operator trees. Finally we extend the physical operator interface to introduce new parametric super-operators.\n We implement our changes in SCOPE, a state-of-the-art production big-data optimizer used extensively at Microsoft. We demonstrate that the proposed optimizations provide significant reduction in both resource cost (average 1.7x) and latency (average 1.5x) on several production queries, and do so without increasing optimization time.", "venue": "Proceedings of the VLDB Endowment", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-11-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "348-361", "volume": "13"}, "authors": [{"authorId": "50334798", "name": "Jyoti Leeka"}, {"authorId": "30141706", "name": "K. Rajan"}], "citations": [{"paperId": "ce6b3814140679a10e7232f4ce989af213591841", "title": "SlabCity: Whole-Query Optimization using Program Synthesis"}, {"paperId": "62ab0c752b63393c9462ef2b749cd7545d2b1a49", "title": "Predicate Pushdown for Data Science Pipelines"}, {"paperId": "f42e0db355eec9c46c81ce3d5b459ad83a9554e6", "title": "Unshackling Database Benchmarking from Synthetic Workloads"}, {"paperId": "344fcf9c139da6c21fa9516a1f57b586507a0d53", "title": "Query Optimizer as a Service"}, {"paperId": "be7f5a911ccd4dee39bcc523c884f4c98bf4c3f4", "title": "A Query Optimizer for Range Queries over Multi-Attribute Trajectories"}, {"paperId": "510c2ebf9380e8ca4482ff81fe886d7203b1f452", "title": "Parallel Query Processing: To Separate Communication from Computation"}, {"paperId": "ada94a2ab3fc264ceeaffc0a9937af07bfd54937", "title": "Computation Reuse via Fusion in Amazon Athena"}, {"paperId": "b6ee4309a911932708b39123219e97280233f6c1", "title": "The Art of Balance: A RateupDB Experience of Building a CPU/GPU Hybrid Database Product"}, {"paperId": "72e11b7b04c1a5df1b660b143c626355ad27de0f", "title": "Phoebe: A Learning-based Checkpoint Optimizer"}, {"paperId": "03fe5309d8ea349ed1aba77ba1e66ba5900856b8", "title": "The Cosmos Big Data Platform at Microsoft: Over a Decade of Progress and a Decade to Look Forward"}, {"paperId": "5019dfffaa035c7a3565a9f691a9acc62207a95b", "title": "A Survey on Advancing the DBMS Query Optimizer: Cardinality Estimation, Cost Model, and Plan Enumeration"}, {"paperId": "5787eb70a1b67a7d3af815fdfe2bbb63ca12e225", "title": "Generalized Sub-Query Fusion for Eliminating Redundant I/O from Big-Data Queries"}, {"paperId": "21dc269346e2c579d006c1238fa4e32d9d67e58e", "title": "Sharing Opportunities for OLTP Workloads in Different Isolation Levels"}, {"paperId": "ad2e4b6a38fde9b00d7673f155ee9512031d2655", "title": "Workload merging potential in SAP Hybris"}, {"paperId": "6c73be8cb4b89699afc94d7f5e79b023ae7b6809", "title": "Modularis: Modular Relational Analytics over Heterogeneous Distributed Platforms"}, {"paperId": "5c573e77829a606008bcb2bd0737b93cef3a5a5b", "title": "Modularis: Modular Data Analytics for Hardware, Software, and Platform Heterogeneity"}, {"paperId": "2d77eb067dea7ebd25685e8e53a29df1f7cc68e8", "title": "Phoebe: A Learning-based Checkpoint Optimizer"}, {"paperId": "4dc023ce9ef579a797b21e5395df706130d3fefa", "title": "Welding Natural Language Queries to Analytics IRs with LLMs"}]}
