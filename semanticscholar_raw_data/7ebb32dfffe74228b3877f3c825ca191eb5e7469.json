{"paperId": "7ebb32dfffe74228b3877f3c825ca191eb5e7469", "publicationVenue": {"id": "e35a87a3-a6c4-47bf-acca-3e615ddb9c58", "name": "ACM Transactions on Database Systems", "type": "journal", "alternate_names": ["ACM Trans Database Syst"], "issn": "0362-5915", "url": "http://www.acm.org/pubs/contents/journals/tods/", "alternate_urls": ["http://tods.acm.org/", "http://www.acm.org/tods/", "http://portal.acm.org/tods", "https://tods.acm.org/"]}, "title": "Sharing across Multiple MapReduce Jobs", "abstract": "Large-scale data analysis lies in the core of modern enterprises and scientific research. With the emergence of cloud computing, the use of an analytical query processing infrastructure can be directly associated with monetary cost. MapReduce has been a popular framework in the context of cloud computing, designed to serve long-running queries (jobs) which can be processed in batch mode. Taking into account that different jobs often perform similar work, there are many opportunities for sharing. In principle, sharing similar work reduces the overall amount of work, which can lead to reducing monetary charges for utilizing the processing infrastructure. In this article we present a sharing framework tailored to MapReduce, namely, MRShare. Our framework, MRShare, transforms a batch of queries into a new batch that will be executed more efficiently, by merging jobs into groups and evaluating each group as a single query. Based on our cost model for MapReduce, we define an optimization problem and we provide a solution that derives the optimal grouping of queries. Given the query grouping, we merge jobs appropriately and submit them to MapReduce for processing. A key property of MRShare is that it is independent of the MapReduce implementation. Experiments with our prototype, built on top of Hadoop, demonstrate the overall effectiveness of our approach. MRShare is primarily designed for handling I/O-intensive queries. However, with the development of high-level languages operating on top of MapReduce, user queries executed in this model become more complex and CPU intensive. Commonly, executed queries can be modeled as evaluating pipelines of CPU-expensive filters over the input stream. Examples of such filters include, but are not limited to, index probes, or certain types of joins. In this article we adapt some of the standard techniques for filter ordering used in relational and stream databases, propose their extensions, and implement them through MRAdaptiveFilter, an extension of MRShare for expensive filter ordering tailored to MapReduce, which allows one to handle both single- and batch-query execution modes. We present an experimental evaluation that demonstrates additional benefits of MRAdaptiveFilter, when executing CPU-intensive queries in MRShare.", "venue": "ACM Transactions on Database Systems", "year": 2014, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2014-05-01", "journal": {"name": "ACM Transactions on Database Systems (TODS)", "pages": "1 - 46", "volume": "39"}, "authors": [{"authorId": "2482422", "name": "Tomasz Nykiel"}, {"authorId": "2873279", "name": "Michalis Potamias"}, {"authorId": "2068436842", "name": "Chaitanya Mishra"}, {"authorId": "1715771", "name": "G. Kollios"}, {"authorId": "1721062", "name": "Nick Koudas"}], "citations": [{"paperId": "15bfc384fc8ef43c2c4f3d43a4905f5e690406e6", "title": "Exploiting Sharing Join Opportunities in Big Data Multiquery Optimization with Flink"}, {"paperId": "7aa0fcee03698feded994b2767661fa947aed379", "title": "The optimization for recurring queries in big data analysis system with MapReduce"}, {"paperId": "1bcbaf8b07c915b66d4d85fb9bf70b6b57381ff2", "title": "EclipseMR: Distributed and Parallel Task Processing with Consistent Hashing"}, {"paperId": "e8fa46580693f9333a25fb00352dfdeeffeecf33", "title": "Generalization of Large-Scale Data Processing in One MapReduce Job for Coarse-Grained Parallelism"}, {"paperId": "57e0e4a2c93a3dc90679d11d0e704a8246f81d5f", "title": "Hypergraphs in the Service of Very Large Scale Query Optimization. Application : Data Warehousing. (Les hypergraphes au service de l'optimisation de requ\u00eates \u00e0 tr\u00e8s large \u00e9chelle. Application : Entrep\u00f4t de donn\u00e9es)"}, {"paperId": "e454865be6ec4718ff6729aefb935a36205256ff", "title": "MEMoMR: Accelerate MapReduce via reuse of intermediate results"}, {"paperId": "a1e4412ea45e161b5cea53794a84cca848c57cd0", "title": "Cache-oblivious scheduling of shared workloads"}, {"paperId": "f8b5635fd75b7c45fd2524f1e9915dd0647999b4", "title": "Locality-Aware Fair Scheduling in the Distributed Query Processing Framework"}, {"paperId": "08200d909c616b4057cb7d0f3dfefa748f7db14d", "title": "Recurring Queries Optimization Using Mapreduce Model"}, {"paperId": "a3ca49847f39d350a4fb5399173f83dd4c3a1e2d", "title": "Lottery scheduler for the Linux kernel"}, {"paperId": "cb6d84d2f7866fc172b2d3786a389d0aaf2187c6", "title": "Concurrent large-scale network data analysis in high-speed mobile networks"}]}
