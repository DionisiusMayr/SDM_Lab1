{"paperId": "248d006a6885bbf8e4825c9f866bbf54069baf80", "publicationVenue": {"id": "e35a87a3-a6c4-47bf-acca-3e615ddb9c58", "name": "ACM Transactions on Database Systems", "type": "journal", "alternate_names": ["ACM Trans Database Syst"], "issn": "0362-5915", "url": "http://www.acm.org/pubs/contents/journals/tods/", "alternate_urls": ["http://tods.acm.org/", "http://www.acm.org/tods/", "http://portal.acm.org/tods", "https://tods.acm.org/"]}, "title": "Representations and Optimizations for Embedded Parallel Dataflow Languages", "abstract": "Parallel dataflow engines such as Apache Hadoop, Apache Spark, and Apache Flink are an established alternative to relational databases for modern data analysis applications. A characteristic of these systems is a scalable programming model based on distributed collections and parallel transformations expressed by means of second-order functions such as map and reduce. Notable examples are Flink\u2019s DataSet and Spark\u2019s RDD programming abstractions. These programming models are realized as EDSLs\u2014domain specific languages embedded in a general-purpose host language such as Java, Scala, or Python. This approach has several advantages over traditional external DSLs such as SQL or XQuery. First, syntactic constructs from the host language (e.g., anonymous functions syntax, value definitions, and fluent syntax via method chaining) can be reused in the EDSL. This eases the learning curve for developers already familiar with the host language. Second, it allows for seamless integration of library methods written in the host language via the function parameters passed to the parallel dataflow operators. This reduces the effort for developing analytics dataflows that go beyond pure SQL and require domain-specific logic. At the same time, however, state-of-the-art parallel dataflow EDSLs exhibit a number of shortcomings. First, one of the main advantages of an external DSL such as SQL\u2014the high-level, declarative Select-From-Where syntax\u2014is either lost completely or mimicked in a non-standard way. Second, execution aspects such as caching, join order, and partial aggregation have to be decided by the programmer. Optimizing them automatically is very difficult due to the limited program context available in the intermediate representation of the DSL. In this article, we argue that the limitations listed above are a side effect of the adopted type-based embedding approach. As a solution, we propose an alternative EDSL design based on quotations. We present a DSL embedded in Scala and discuss its compiler pipeline, intermediate representation, and some of the enabled optimizations. We promote the algebraic type of bags in union representation as a model for distributed collections and its associated structural recursion scheme and monad as a model for parallel collection processing. At the source code level, Scala\u2019s comprehension syntax over a bag monad can be used to encode Select-From-Where expressions in a standard way. At the intermediate representation level, maintaining comprehensions as a first-class citizen can be used to simplify the design and implementation of holistic dataflow optimizations that accommodate for nesting and control-flow. The proposed DSL design therefore reconciles the benefits of embedded parallel dataflow DSLs with the declarativity and optimization potential of external DSLs like SQL.", "venue": "ACM Transactions on Database Systems", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-01-29", "journal": {"name": "ACM Transactions on Database Systems (TODS)", "pages": "1 - 44", "volume": "44"}, "authors": [{"authorId": "145454115", "name": "Alexander B. Alexandrov"}, {"authorId": "2956803", "name": "Georgi Krastev"}, {"authorId": "1733290", "name": "V. Markl"}], "citations": [{"paperId": "b531e779cedc0789bd5144a8860da35b5de85d77", "title": "Efficient Iterative Programs with Distributed Data Collections"}, {"paperId": "b90ac31335d729e40bf17a96c0fd1c052dd4bb2d", "title": "TranSQL: A Transformer-based Model for Classifying SQL Queries"}, {"paperId": "51b99c97496c8057e74f1caf4a4ec5703e398afe", "title": "Imperative or Functional Control Flow Handling"}, {"paperId": "9ef0b1b2ce6820a9e08735cd13b97c81baa39275", "title": "Risk management of data flow under cross-cultural english language understanding"}, {"paperId": "3309baa67df135d1eaa657f27a0525d1f5588876", "title": "A two-level formal model for Big Data processing programs"}, {"paperId": "d2d1248446703603ad9355ef83e5892412e3efa5", "title": "Handling Iterations in Distributed Dataflow Systems"}, {"paperId": "fe1882b1367b6ebdbfc58f0837399a9e45f3ad55", "title": "An Abstract View of Big Data Processing Programs"}, {"paperId": "def13e123abeea4ecc210eee02cf141ce0646567", "title": "SODA: A Semantics-Aware Optimization Framework for Data-Intensive Applications Using Hybrid Program Analysis"}, {"paperId": "20464cd1501b838011a984deecdf6cbc3a77494f", "title": "The Power of Nested Parallelism in Big Data Processing \u0096 Hitting Three Flies with One Slap \u0096"}, {"paperId": "156a2c58d3ad40cd2c85e3b44c35dcc10d74ae52", "title": "Efficient Control Flow in Dataflow Systems: When Ease-of-Use Meets High Performance"}, {"paperId": "eb1b4896e07ddc41e3fdc49b3ca38bf0f00a6441", "title": "On the Optimization of Iterative Programming with Distributed Data Collections"}, {"paperId": "83b08224ab5a95353a87661874a3d4d4f1eccc1f", "title": "On the Optimization of Recursive Relational Queries: Application to Graph Queries"}, {"paperId": "eb6772a8f8fbd3394c8bca6d8dc52f174048c077", "title": "An Intermediate Representation for Optimizing Machine Learning Pipelines"}, {"paperId": "5c09bd7d82b7f5e60a7184ec2061c5ca14649c86", "title": "Labyrinth: Compiling Imperative Control Flow to Parallel Dataflows"}, {"paperId": "7751a490d4252191f6f007d0fce06de5372f5f75", "title": "Optimizing end-to-end machine learning pipelines for model training"}]}
