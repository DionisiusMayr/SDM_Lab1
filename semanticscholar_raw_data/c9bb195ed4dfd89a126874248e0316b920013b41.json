{"paperId": "c9bb195ed4dfd89a126874248e0316b920013b41", "publicationVenue": null, "title": "Compiling Unikernels into Micro Kernels", "abstract": "With increasing complexity, programs become more prone to bugs and security vulnerabilities. This is particularly true of kernels. For example, the original feature set of the monolithic Unix kernel is still continuously extended by functions, drivers and modules. Since these are not mutually constrained, each additional component increases the attack surface of the entire system. There are several approaches to solving this problem and implementing the concept of defense in depth. However, they all involve runtime costs and, most importantly, manual customization. This effort makes it difficult or impossible to flexibly adapt existing software to isolation mechanisms that provide an appropriate trade-off between security and performance overhead. The idea of this work is to investigate whether the isolation of components of a server application can also be done by a compiler. The Ohua compiler has been developed to identify independent execution steps in a sequential program and to transform the program into a dataflow program consisting of independent nodes with potentially separate memory. The specific implementation of the nodes is determined by architectural integrations. Nodes can be threads or processes, or theoretically other isolation concepts. We wanted to use Ohua to convert a server application, in which the application, IP stack and network interface share the same memory, into an application for the microkernel-based operating system M3 . The main questions were i) how to restructure the server application so that in the resulting dataflow graph the application, IP stack and network interface each operate in exactly one isolated node, and ii) could these restructurings be implemented as compiler transformations. We show how the application can be restructured accordingly. Formal descriptions already exist for some of the transformations. However, it has also become clear that the syntax of the input program alone does not contain enough information to define, for example, whether or not the program should be adapted to concrete target systems such as M3 . Therefore, this thesis discusses which transformations could be implemented as compiler transformations in the future, and which transformations still have to be done by the programmer.", "venue": "", "year": 2023, "fieldsOfStudy": null, "publicationTypes": null, "publicationDate": null, "journal": null, "authors": [{"authorId": "15475378", "name": "Lisza Zeidler"}, {"authorId": "2244767109", "name": "Sebastian Ertel"}], "citations": []}
