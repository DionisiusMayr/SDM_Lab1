{"paperId": "fad8f5d1f4d07d3b15a7fc9f9c50ea564cac7221", "publicationVenue": {"id": "312ca99c-9149-490d-813e-c60d5e949f65", "name": "Concurrency and Computation", "type": "journal", "alternate_names": ["Concurr Comput Pract Exp", "Concurrency and Computation: Practice and Experience", "Concurr Comput"], "issn": "1532-0626", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/77004395?CRETRY=1&SRETRY=0", "alternate_urls": ["http://www3.interscience.wiley.com/cgi-bin/jtoc?ID=77004395", "http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1532-0634"]}, "title": "Improving batch schedulers with node stealing for failed jobs", "abstract": "After a machine failure, batch schedulers typically re\u2010schedule the job that failed with a high priority. This is fair for the failed job but still requires that job to re\u2010enter the submission queue and to wait for enough resources to become available. The waiting time can be very long when the job is large and the platform highly loaded, as is the case with typical HPC platforms. We propose another strategy: when a job fails, if no platform node is available, we steal one node from another job , and use it to continue the execution of despite the failure. In this work, we give a detailed assessment of this node stealing strategy using traces from the Mira supercomputer at Argonne National Laboratory. The main conclusion is that node stealing improves the utilization of the platform and dramatically reduces the flow of large jobs, at the price of slightly increasing the flow of small jobs.", "venue": "Concurrency and Computation", "year": 2024, "fieldsOfStudy": null, "publicationTypes": ["JournalArticle"], "publicationDate": "2024-02-16", "journal": {"name": "Concurrency and Computation: Practice and Experience"}, "authors": [{"authorId": "2152976665", "name": "Yishu Du"}, {"authorId": "1718549", "name": "L. Marchal"}, {"authorId": "151014235", "name": "Guillaume Pallez"}, {"authorId": "2247714315", "name": "Yves Robert"}], "citations": []}
