{"paperId": "3f60be580e4b48e79017f79d04c90f26c22e8f77", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "AJoin: Ad-hoc Stream Joins at Scale", "abstract": "The processing model of state-of-the-art stream processing engines is designed to execute long-running queries one at a time. However, with the advance of cloud technologies and multi-tenant systems, multiple users share the same cloud for stream query processing. This results in many ad-hoc stream queries sharing common stream sources. Many of these queries include joins.\n There are two main limitations that hinder performing ad-hoc stream join processing. The first limitation is missed optimization potential both in stream data processing and query optimization layers. The second limitation is the lack of dynamicity in query execution plans.\n We present AJoin, a dynamic and incremental ad-hoc stream join framework. AJoin consists of an optimization layer and a stream data processing layer. The optimization layer periodically reoptimizes the query execution plan, performing join reordering and vertical and horizontal scaling at run-time without stopping the execution. The data processing layer implements pipelineparallel join architecture. This layer enables incremental and consistent query processing supporting all the actions triggered by the optimizer. We implement AJoin on top of Apache Flink, an open-source data processing framework. AJoin outperforms Flink not only at ad-hoc multi-query workloads but also at single-query workloads.", "venue": "Proceedings of the VLDB Endowment", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-12-09", "journal": {"name": "Proc. VLDB Endow.", "pages": "435-448", "volume": "13"}, "authors": [{"authorId": "3317889", "name": "Jeyhun Karimov"}, {"authorId": "1731210", "name": "T. Rabl"}, {"authorId": "1733290", "name": "V. Markl"}], "citations": [{"paperId": "c8ae41a86b4deee090c79790c5fcebb7d046aefd", "title": "Real-Time Analytics by Coordinating Reuse and Work Sharing"}, {"paperId": "031e615d293915dd67e2e038464a47e5cb872c78", "title": "SASPAR: Shared Adaptive Stream Partitioning"}, {"paperId": "297e2ed22af4b9de6264d08d060145881da83b4e", "title": "Materialization and Reuse Optimizations for Production Data Science Pipelines"}, {"paperId": "3182e566351d1fdfc4f3998620d04cc1a68b8518", "title": "Efficient Incrementialization of Correlated Nested Aggregate Queries using Relative Partial Aggregate Indexes (RPAI)"}, {"paperId": "d67554d357f49a244f5b51b44528b7f2a23884a7", "title": "Algorithms for Windowed Aggregations and Joins on Distributed Stream Processing Systems"}, {"paperId": "92fd7d63a3d5993e645ceb284606782b54d12b18", "title": "A Unified Approach to Spatial Proximity Query Processing in Dynamic Spatial Networks"}, {"paperId": "cfc14fba96834b03bb4d169240039f340b0d8935", "title": "An Energy-Efficient Stream Join for the Internet of Things"}, {"paperId": "c261c685c9752c00138e1c92fa6a7022363ecb6c", "title": "Resource-efficient Shared Query Execution via Exploiting Time Slackness"}, {"paperId": "897ae7211e476a28b43f56b7fc6ed707b9a46023", "title": "Theodolite: Scalability Benchmarking of Distributed Stream Processing Engines"}, {"paperId": "f6e33278b2691e8d80ee84e8f398c283758846b1", "title": "Deterministic Time-Series Joins for Asynchronous High-Throughput Data Streams"}, {"paperId": "f86dce3465f3d0d91a3bb055544e59e166c6db24", "title": "Oligolithic Cross-task Optimizations across Isolated Workloads"}, {"paperId": "78d1edb0c726add6906517e6f0c23be7ddef5b1d", "title": "Desis: Efficient Window Aggregation in Decentralized Networks"}, {"paperId": "348b692f95f1a8003187d54e63657d90f9275152", "title": "Incremental Stream Query Merging"}, {"paperId": "9649d31f4d3bc740c95400e11be9759b259b2083", "title": "Group Processing of Multiple k-Farthest Neighbor Queries in Road Networks"}]}
