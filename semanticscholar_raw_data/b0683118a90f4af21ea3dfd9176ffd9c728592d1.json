{"paperId": "b0683118a90f4af21ea3dfd9176ffd9c728592d1", "publicationVenue": {"id": "0be0e7dd-a7b1-46dc-abb3-5226ed0e2289", "name": "IEEE International Conference on Cluster Computing", "type": "conference", "alternate_names": ["Int Conf Clust Comput", "IEEE Int Conf Clust Comput", "International Conference on Cluster Computing", "CLUSTER"], "url": "http://www.clustercomp.org/"}, "title": "JACO: JAva Code Layout Optimizer Enabling Continuous Optimization without Pausing Application Services", "abstract": "Many Java applications in data centers suffer from severe processor pipeline frontend bottlenecks, which can be mitigated by profile-guided code layout optimizations (PGCLO). To maximize optimization opportunities, state-of-the-art PGCLO solutions adopt continuous optimization to ensure that the code layout consistently matches ever-changing application control flow characteristics. However, existing continuous optimizations inevitably pause the application to execute the new code completely, which leads to high response latency and significantly deteriorates user experience.In this paper, we propose JACO, a novel profile-guided Java code layout optimizer, enabling continuous optimization without pausing application services. The key idea of JACO is to enable the execution of both the old and new code simultaneously rather than completely switching to the new code. In particular, JACO is composed of three components: (1) A lightweight profiler captures the control flow information of the application and then generates an optimized function order. (2) A control flow switcher generates new code based on optimized function order and switches the application to execute the new code without pausing the application services. (3) A selective code reclaimer only frees the memory occupied by the inactive old code. We evaluated JACO on both open-source applications and real-world applications from a world-leading company. JACO achieved up to a 16.36% performance improvement for real-world applications. The state-of-the-art approach introduces up to 37.93x latency overhead that will interrupt application services, while JACO only introduces a negligible 7% latency overhead.", "venue": "IEEE International Conference on Cluster Computing", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2023-10-31", "journal": {"name": "2023 IEEE International Conference on Cluster Computing (CLUSTER)", "pages": "295-306"}, "authors": [{"authorId": "2222523346", "name": "Wenhai Lin"}, {"authorId": "2224103542", "name": "Jingchang Qin"}, {"authorId": "2109360977", "name": "Yiquan Chen"}, {"authorId": "2111472219", "name": "Zhengxu Jin"}, {"authorId": "2212046041", "name": "Jiexiong Xu"}, {"authorId": "2267859769", "name": "Yuzhong Zhang"}, {"authorId": "2267758700", "name": "Shishun Cai"}, {"authorId": "2116845824", "name": "Lirong Fu"}, {"authorId": "2213191036", "name": "Yi Chen"}, {"authorId": "2267872535", "name": "Wenzhi Chen"}], "citations": []}
