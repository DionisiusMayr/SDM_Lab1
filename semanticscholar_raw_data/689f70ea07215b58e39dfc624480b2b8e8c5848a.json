{"paperId": "689f70ea07215b58e39dfc624480b2b8e8c5848a", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "PerfGuard: Deploying ML-for-Systems without Performance Regressions, Almost!", "abstract": "\n Modern data processing systems require optimization at massive scale, and using machine learning to optimize these systems (ML-for-systems) has shown promising results. Unfortunately, ML-for-systems is subject to over generalizations that do not capture the large variety of workload patterns, and tend to augment the performance of certain subsets in the workload while regressing performance for others. In this paper, we introduce a performance safeguard system, called\n PerfGuard\n , that designs pre-production experiments for deploying ML-for-systems. Instead of searching the entire space of query plans (a well-known, intractable problem), we focus on query plan deltas (a significantly smaller space). PerfGuard formalizes these differences, and correlates plan deltas to important feedback signals, like execution cost. We describe the deep learning architecture and the end-to-end pipeline in PerfGuard that could be used with general relational databases. We show that this architecture improves on baseline models, and that our pipeline identifies key query plan components as major contributors to plan disparity. Offline experimentation shows PerfGuard as a promising approach, with many opportunities for future improvement.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-09-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "3362-3375", "volume": "14"}, "authors": [{"authorId": "145189529", "name": "H. M. S. Hossain"}, {"authorId": "143634544", "name": "Marc T. Friedman"}, {"authorId": "1471618633", "name": "Hiren Patel"}, {"authorId": "49830907", "name": "S. Qiao"}, {"authorId": "153309692", "name": "Soundar Srinivasan"}, {"authorId": "2965406", "name": "Markus Weimer"}, {"authorId": "2102463296", "name": "Remmelt Ammerlaan"}, {"authorId": "2066297941", "name": "Lucas Rosenblatt"}, {"authorId": "2083999540", "name": "Gilbert Antonius"}, {"authorId": "98228555", "name": "P. Orenberg"}, {"authorId": "2067082298", "name": "Vijay Ramani"}, {"authorId": "2153931746", "name": "Abhishek Roy"}, {"authorId": "2065950584", "name": "Irene Shaffer"}, {"authorId": "2153832", "name": "Alekh Jindal"}], "citations": [{"paperId": "8e2aefa5baeb2a250f15920976a94721bff004d5", "title": "Deploying a Steered Query Optimizer in Production at Microsoft"}, {"paperId": "b062366d9bcf3284c2a38be0b95765b1aac683bf", "title": "Eraser: Eliminating Performance Regression on Learned Query Optimizer"}]}
