{"paperId": "8e2eca50b368662ff3232d1772d21478f51a8dce", "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3", "name": "Software, Practice & Experience", "type": "journal", "alternate_names": ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"], "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752", "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/", "https://onlinelibrary.wiley.com/journal/1097024X"]}, "title": "Toward a novel engine for compiler optimization space exploration of big data workloads", "abstract": "Recently, big data specific technologies have been emerging, including domain\u2010specific languages, software frameworks, databases, third\u2010party libraries, and so forth. These techniques are successful in concealing the low\u2010level details by producing high\u2010level code, which is passed through the conventional compilation cycle for generating hardware operable code. Several optimization opportunities exist in the compiler which can assist in meeting the processing deadlines of big data workloads, through optimized machine code. However, the existing iterative compilation techniques are not enough for the exploration of big data applications. In this regard, a novel engine has been presented for exploiting the compiler optimization space of big data workloads. The engine is comprised of training and testing phases. During the training stage, the big data application is optimized with Mitigates the Compiler Phase\u2010ordering (MiCOMP) and genetic algorithm (GA) optimization sequences, which are executed with train datasets. In the testing stage, the test datasets are executed only for the best 300 optimization sequences discovered at the training stage. The proposed engine has been tested with graph mining, machine learning, and text search categories of big data applications using a wide range of real\u2010world and synthetic datasets. Overall, the engine is 56.8\u00d7 , 47\u00d7 , and 9.8\u00d7 faster than Iterative Optimization for the Data Center (IODC), MiCOMP, and GA respectively in exploiting the compiler search space for big data workloads. Further, the integration of best\u201010 and best\u20103 techniques with the engine brings a speedup of 5.9\u00d7 and 7.8\u00d7 . The compiler level exploitation of general\u2010purpose machines incurs no extra overhead, no heavy computing, and no personnel cost. Also, the overall performance of big data specialized software solutions can be enhanced by compiling their high\u2010level code with suitable compiler optimizations.", "venue": "Software, Practice & Experience", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-12-24", "journal": {"name": "Software: Practice and Experience", "pages": "1262 - 1293", "volume": "52"}, "authors": [{"authorId": "46502801", "name": "Hameeza Ahmed"}, {"authorId": "8975576", "name": "M. A. Ismail"}], "citations": [{"paperId": "20fd0ed3002a9a963c42fdc74635257195a2ff5a", "title": "Exploring Compiler Optimization Space for Control Flow Obfuscation"}]}
