{"paperId": "b64be6555eec3de33a0b50104c2a2735892ad4c8", "publicationVenue": {"id": "7c9d091e-015e-4e5d-a11f-9bc369fcf414", "name": "IEEE Transactions on Parallel and Distributed Systems", "type": "journal", "alternate_names": ["IEEE Trans Parallel Distrib Syst"], "issn": "1045-9219", "url": "http://www.computer.org/tpds", "alternate_urls": ["http://ieeexplore.ieee.org/servlet/opac?punumber=71"]}, "title": "Towards Efficient Large-Scale Interprocedural Program Static Analysis on Distributed Data-Parallel Computation", "abstract": "Static program analysis has been widely applied along the whole process of the program development for bug detection, code optimization, testing, etc. Although researchers have made significant work in static program analysis, it is still challenging to perform sophisticated interprocedural analysis on large-scale modern software. The underlying reason is that interprocedural analysis for large-scale modern software is highly computation- and memory-intensive, leading to poor efficiency and scalability. In this article, we introduce an efficient distributed and scalable solution for sophisticated static analysis. Specifically, we propose a data-parallel algorithm and a join-process-filter computation model for the CFL-reachability-based interprocedural analysis. Based on that, an efficient distributed static analysis engine called BigSpa is developed, which is composed of an offline batch static program analysis system and an online incremental static program analysis system. The BigSpa system has high generality and can support all kinds of static analysis tasks that can be expressed as CFL reachability problems. The performance of BigSpa is evaluated on real-world large-scale software datasets. Our experiments show that the offline batch system can exceed an order of magnitude compared with the most advanced analysis tools available on performance, and for incremental analysis with small batch updates on the same data sets, the online analysis system can achieve near real-time response, which is very fast and flexible.", "venue": "IEEE Transactions on Parallel and Distributed Systems", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-04-01", "journal": {"name": "IEEE Transactions on Parallel and Distributed Systems", "pages": "867-883", "volume": "32"}, "authors": [{"authorId": "144997442", "name": "Rong Gu"}, {"authorId": "145057220", "name": "Zhiqiang Zuo"}, {"authorId": "2109909903", "name": "Xi Jiang"}, {"authorId": "2113972339", "name": "Han Yin"}, {"authorId": "2354229", "name": "Zhaokang Wang"}, {"authorId": "1799197", "name": "Linzhang Wang"}, {"authorId": "2108262661", "name": "Xuandong Li"}, {"authorId": "46844324", "name": "Yihua Huang"}], "citations": [{"paperId": "8416a403614e2793b3b64aa11fec18a557101567", "title": "Mitigating False Positive Static Analysis Warnings: Progress, Challenges, and Opportunities"}, {"paperId": "e1e3f2a92628299ee4df3b460381730fb3890376", "title": "BigDataflow: A Distributed Interprocedural Dataflow Analysis Framework"}, {"paperId": "9de4c689c4a3bdf1425e8980b2c28fc4b0530d2a", "title": "User-Assisted Code Query Optimization"}, {"paperId": "dcf3d45adfe1bcd1ea7bb08dde4c834bed2c2bb2", "title": "Anchor: Fast and Precise Value-flow Analysis for Containers via Memory Orientation"}, {"paperId": "0daac949b52fb09a4743fac0db0d79b8f6938a99", "title": "Heterogeneous Big Data Parallel Computing Optimization Model using MPI/OpenMP Hybrid and Sensor Networks"}, {"paperId": "27f155758647e9dcd296f003b78dd21de60017bb", "title": "Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan"}, {"paperId": "756aba5677478edbd39534e5ecb150da73470452", "title": "Chianina: an evolving graph system for flow- and context-sensitive analyses of million lines of C code"}, {"paperId": "6128f3cc7790497b28af76e73bdfb86449a1ab52", "title": "Distributed Data Consistency Algorithm in Database Based on Language Recognition"}, {"paperId": "b09f7114a6f4100a377a91a30c03892acf1ab76a", "title": "Anchor: Fast and Precise Value-Flow Analysis for Containers via Memory Orientation"}]}
