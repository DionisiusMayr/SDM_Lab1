{"paperId": "ba9f6368370ca07c1a0c9a5684b0908f6d2e0c6f", "publicationVenue": {"id": "914d4734-285a-4cd8-bba1-eec0db26a512", "name": "International Conference on Supercomputing", "type": "conference", "alternate_names": ["International Conference Computer, Communication and Computational Sciences", "ICS", "INFORMS Comput Soc", "Int Conf Supercomput", "INFORMS Computing Society", "Int Conf Comput Commun Comput Sci"], "url": "http://portal.acm.org/proceedings/ics/"}, "title": "Sandslash: a two-level framework for efficient graph pattern mining", "abstract": "Graph pattern mining (GPM) is a key building block in diverse applications, including bioinformatics, chemical engineering, social network analysis, recommender systems and security. Existing GPM frameworks either provide high-level interfaces for productivity at the cost of expressiveness or provide low-level interfaces that can express a wide variety of GPM algorithms at the cost of increased programming complexity. Moreover, existing systems lack the flexibility to explore combinations of optimizations to achieve performance competitive with hand-optimized applications. We present Sandslash, an in-memory graph pattern mining framework that uses a novel programming interface to support productive, expressive, and efficient GPM on large graphs. Sandslash provides a high-level API that needs only a specification of the GPM problem from the user, and the system implements fast subgraph enumeration, provides efficient data structures, and applies high-level optimizations automatically. To achieve performance competitive with expert-optimized implementations, Sandslash also provides a low-level API that allows users to express algorithm-specific optimizations. This enables Sandslash to support both high-productivity and high-efficiency without losing expressiveness. We evaluate Sandslash on shared-memory machines using five GPM applications and a wide range of large real-world graphs. Experimental results demonstrate that applications written using Sandslash high-level or low-level API outperform those in state-of-the-art GPM systems AutoMine, Pangolin, and Peregrine on average by 13.8x, 7.9x, and 5.4x, respectively. We also show that these Sandslash applications outperform expert-optimized GPM implementations by 2.3x on average with less programming effort.", "venue": "International Conference on Supercomputing", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2020-11-05", "journal": {"name": "Proceedings of the ACM International Conference on Supercomputing"}, "authors": [{"authorId": "8081879", "name": "Xuhao Chen"}, {"authorId": "1925460", "name": "Roshan Dathathri"}, {"authorId": "49983901", "name": "G. Gill"}, {"authorId": "47348084", "name": "Loc Hoang"}, {"authorId": "1776186", "name": "K. Pingali"}], "citations": [{"paperId": "31b07b6047aed04c1beff7895c3d923c5f5ea926", "title": "A Comprehensive Survey and Experimental Study of Subgraph Matching: Trends, Unbiasedness, and Interaction"}, {"paperId": "917cd596c08acf32dd777f5cef2f10840b95f900", "title": "Accelerating Maximal Biclique Enumeration on GPUs"}, {"paperId": "31d03b23b3ab36e8f79642777e704ed88366777d", "title": "Graph Pattern Mining Paradigms: Consolidation and Renewed Bearing"}, {"paperId": "2318bdeea310b1ea524fa483f9276c4f3ef6c88f", "title": "GraphSet: High Performance Graph Mining through Equivalent Set Transformations"}, {"paperId": "31f8b8bd29e877a568585f61d148269dd53e9759", "title": "Efficient Maximal Biclique Enumeration on GPUs"}, {"paperId": "956cd5b35e624b38b3a11c27f3018c242d6b549b", "title": "SGSI \u2013 A Scalable GPU-Friendly Subgraph Isomorphism Algorithm"}, {"paperId": "1bb10600aa2ebc639a878fde3b0c75471abd0da5", "title": "Shogun: A Task Scheduling Framework for Graph Mining Accelerators"}, {"paperId": "79af8667ea55f0bf63462ee807d001d900754b27", "title": "GAMMA: A Graph Pattern Mining Framework for Large Graphs on GPU"}, {"paperId": "d1856698e761c6f513983deafe0391aceb28406e", "title": "Khuzdul: Efficient and Scalable Distributed Graph Pattern Mining Engine"}, {"paperId": "7f364ec437131ab30be998be39b0c7cfa05c3a79", "title": "DecoMine: A Compilation-Based Graph Pattern Mining System with Pattern Decomposition"}, {"paperId": "17f3d9b84c21cfc313d5c11f9efba37605cade94", "title": "Software Systems Implementation and Domain-Specific Architectures towards Graph Analytics"}, {"paperId": "56c03061c0cb6f6bcb1d9430ce164c7142d6f991", "title": "A GPU-based Graph Pattern Mining System"}, {"paperId": "d7aa27cd300df619cc86b1fcbd1fad282ef71b39", "title": "SampleMine: A Framework for Applying Random Sampling to Subgraph Pattern Mining through Loop Perforation"}, {"paperId": "adbb5d0a264772b32c8aaed9a1bf178afd7a3ec5", "title": "NDMiner: accelerating graph pattern mining using near data processing"}, {"paperId": "66dd43a62358f18a8fbd60aac44b0f11a12346e6", "title": "DIMMining: pruning-efficient and parallel graph mining on near-memory-computing"}, {"paperId": "5c961b81b54e7ab703ba13cdaaa4c2d89c76f2a2", "title": "Parallel Vertex Cover Algorithms on GPUs"}, {"paperId": "84f8d0441396576a6e916dc9f395bd12c073c24b", "title": "FINGERS: exploiting fine-grained parallelism in graph mining accelerators"}, {"paperId": "1dc9626062182372d4a97e245a64fcabadbe49ca", "title": "Efficient and Scalable Graph Pattern Mining on GPUs"}, {"paperId": "3d58bf1d2b90d07ded8ddff707caac2a23ea46df", "title": "FlexMiner: A Pattern-Aware Accelerator for Graph Pattern Mining"}, {"paperId": "9a168f5bbd5110a375b664c2c8e7d432d2146956", "title": "Kudu: An Efficient and Scalable Distributed Graph Pattern Mining Engine"}, {"paperId": "055817147f970df74d51fba45be640deafcb55ef", "title": "DwarvesGraph: A High-Performance Graph Mining System with Pattern Decomposition"}, {"paperId": "6550a0af3586ba50f61c4b5f930924cc9318918b", "title": "Arya: Arbitrary Graph Pattern Mining with Decomposition-based Sampling"}]}
