{"paperId": "997c887d8701d9e86e9ff9104c4c3e124d1641d8", "publicationVenue": {"id": "4f854c65-f7ce-4588-a3ca-d96a1c00fc6d", "name": "IEEE Symposium on Field-Programmable Custom Computing Machines", "type": "conference", "alternate_names": ["IEEE Symp Field-programmable Cust Comput Mach", "Field-programmable Cust Comput Mach", "FCCM", "Field-Programmable Custom Computing Machines"], "url": "http://www.fccm.org/"}, "title": "Extending High-Level Synthesis for Task-Parallel Programs", "abstract": "C/C++/OpenCL-based high-level synthesis (HLS) becomes more and more popular for field-programmable gate array (FPGA) accelerators in many application domains in recent years, thanks to its competitive quality of results (QoR) and short development cycles compared with the traditional register-transfer level design approach. Yet, limited by the sequential C semantics, it remains challenging to adopt the same highly productive high-level programming approach in many other application domains, where coarse-grained tasks run in parallel and communicate with each other at a fine-grained level. While current HLS tools do support task-parallel programs, the productivity is greatly limited in the code development cycle due to the poor programmability, in the correctness verification cycle due to restricted software simulation, and in the QoR tuning cycle due to slow code generation. Such limited productivity often defeats the purpose of HLS and hinder programmers from adopting HLS for task-parallel FPGA accelerators.In this paper, we extend the HLS C++ language and present a fully automated framework with programmer-friendly interfaces, unconstrained software simulation, and fast hierarchical code generation to overcome these limitations and demonstrate how task-parallel programs can be productively supported in HLS. Experimental results based on a wide range of real-world task-parallel programs show that, on average, the lines of kernel and host code are reduced by 22% and 51%, respectively, which considerably improves the programmability. The correctness verification and the iterative QoR tuning cycles are both greatly shortened by 3.2\u00d7 and 6.8\u00d7, respectively. Our work is open-source at https://github.com/UCLA-VAST/tapa/.", "venue": "IEEE Symposium on Field-Programmable Custom Computing Machines", "year": 2020, "fieldsOfStudy": ["Computer Science", "Medicine"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2020-09-23", "journal": {"name": "2021 IEEE 29th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM)", "pages": "204-213"}, "authors": [{"authorId": "153850982", "name": "Yuze Chi"}, {"authorId": "150187567", "name": "Licheng Guo"}, {"authorId": "2167589948", "name": "Young-kyu Choi"}, {"authorId": "2146041652", "name": "Jie Wang"}, {"authorId": "2259796", "name": "J. Cong"}], "citations": [{"paperId": "bc8142622c97db86d1b01467002f27660122c543", "title": "Enabling HW-Based Task Scheduling in Large Multicore Architectures"}, {"paperId": "dd48c82be3b23b1b39f20acf54ae067c8c4096c9", "title": "TAPA-CS: Enabling Scalable Accelerator Design on Distributed HBM-FPGAs"}, {"paperId": "6b8986bd9c50e47c0cca0083c82cd412f6bc2209", "title": "HIDA: A Hierarchical Dataflow Compiler for High-Level Synthesis"}, {"paperId": "4821f68d0f588cf9a29ac496d864de2641fc6054", "title": "Automatic Inductive Invariant Generation for Scalable Dataflow Circuit Verification"}, {"paperId": "83f7ab2f9e5d13857bdead4e7135297c9688115e", "title": "CHIP-KNNv2: A Configurable and High-Performance K-Nearest Neighbors Accelerator on HBM-based FPGAs"}, {"paperId": "7851ed92a459c1c0ae6346e12b624d786c2a2d28", "title": "Lightning Talk: The Next Wave of High-level Synthesis"}, {"paperId": "1a79e1d8ea7651de9b7efd3d029de7168f3d8148", "title": "TARO: Automatic Optimization for Free-Running Kernels in FPGA High-Level Synthesis"}, {"paperId": "456f471ee207a451b87741f94fdc6fc58d39bec2", "title": "PASTA: Programming and Automation Support for Scalable Task-Parallel HLS Programs on Modern Multi-Die FPGAs"}, {"paperId": "d518dfe3eb6e31bc5cc86963ce89d77829753f47", "title": "RapidStream 2.0: Automated Parallel Implementation of Latency\u2013Insensitive FPGA Designs Through Partial Reconfiguration"}, {"paperId": "6cf21a1c67cb1a0fda969e5a9dc00d4082d6f316", "title": "Accelerating OCaml Programs on FPGA"}, {"paperId": "a7a0eac1ca927cf613751457369151859e71a0d2", "title": "CHARM: Composing Heterogeneous AcceleRators for Matrix Multiply on Versal ACAP Architecture"}, {"paperId": "b3c1eaa20b27cc089e26d8833948ba01c2d945cb", "title": "FlexCNN: An End-to-end Framework for Composing CNN Accelerators on FPGA"}, {"paperId": "9ab9dc1382f394a1c2b7c051b17bb0a129a7649e", "title": "Profile-Guided Parallel Task Extraction and Execution for Domain Specific Heterogeneous SoC"}, {"paperId": "3d7fa6c17a33cdb5008f969ebe999b4b93115052", "title": "Auto-Partitioning Heterogeneous Task-Parallel Programs with StreamBlocks"}, {"paperId": "0a9f7eee2f90382c23fa7a82bc3a94c8e8d77569", "title": "OverGen: Improving FPGA Usability through Domain-specific Overlay Generation"}, {"paperId": "abfe970ef231bfe66ef867749530cb5740c3a842", "title": "Callipepla: Stream Centric Instruction Set and Mixed Precision for Accelerating Conjugate Gradient Solver"}, {"paperId": "2f4007c7559b6eee846578f60d1ec2a9392bdfa8", "title": "Democratizing Domain-Specific Computing"}, {"paperId": "d2ef7fa75124d0f892681ebd8071c9e354c38425", "title": "TAPA: A Scalable Task-parallel Dataflow Programming Framework for Modern FPGAs with Co-optimization of HLS and Physical Design"}, {"paperId": "57b34399902a72c93a3436f6e818f1b85412c45d", "title": "SASA: A Scalable and Automatic Stencil Acceleration Framework for Optimized Hybrid Spatial and Temporal Parallelism on HBM-based FPGAs"}, {"paperId": "34d861c3786c85f848da57e9679b26eaa14ed881", "title": "FPGA HLS Today: Successes, Challenges, and Opportunities"}, {"paperId": "23766cdf2e4551f80b518322c25073bab0353f44", "title": "RapidStream: Parallel Physical Implementation of FPGA HLS Designs"}, {"paperId": "27e200d3e46a54d2ba16d9173ba6f711eac18adc", "title": "HeteroFlow: An Accelerator Programming Model with Decoupled Data Placement for Software-Defined FPGAs"}, {"paperId": "0d02890defb6b5bd0d6aa63519bdfadd98e09c3b", "title": "Accelerating SSSP for Power-Law Graphs"}, {"paperId": "d3bb9e1c3fec528ed9a98fe427ba14b72214ec52", "title": "Programming and Synthesis for Software-defined FPGA Acceleration: Status and Future Prospects"}, {"paperId": "c76142d04ba5da3e4470e08ef9ddb54b8f56f89c", "title": "Serpens: a high bandwidth memory based accelerator for general-purpose sparse matrix-vector multiplication"}, {"paperId": "f29a2f33012c5de2592f4aa2d66fb10308e0fbc6", "title": "Tasking framework for adaptive speculative parallel mesh generation"}, {"paperId": "3a00bab02bd541ffdf40c40ac8640d855008e898", "title": "Applications and Techniques for Fast Machine Learning in Science"}, {"paperId": "6604a29489fab65cc9b61a369759d96c781d2861", "title": "Sextans: A Streaming Accelerator for General-Purpose Sparse-Matrix Dense-Matrix Multiplication"}, {"paperId": "d58eaf36cf77fb369ddc613d0054c15adb3991ec", "title": "AutoBridge: Coupling Coarse-Grained Floorplanning and Pipelining for High-Frequency HLS Design on Multi-Die FPGAs"}, {"paperId": "2d3eac889074dbb6400d6b6c7fcf2ebd07d33ce6", "title": "Learnings from a HLS-based High-Productivity Digital VLSI Flow"}, {"paperId": "79d86338e3c209189c2e55d84460f21cae31263e", "title": "IPEC: Open-Source Design Automation for Inter-Processing Element Communication"}, {"paperId": "764a7cb506d89a98fb53b8376966e7324a9ff153", "title": "Array-Specific Dataflow Caches for High-Level Synthesis of Memory-Intensive Algorithms on FPGAs"}]}
