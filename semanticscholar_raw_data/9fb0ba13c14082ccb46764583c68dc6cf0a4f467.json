{"paperId": "9fb0ba13c14082ccb46764583c68dc6cf0a4f467", "publicationVenue": {"id": "ffe5bb5c-04ed-488e-985d-d3a7b39542cf", "name": "IEEE International Conference on Distributed Computing Systems", "type": "conference", "alternate_names": ["International Conference on Distributed Computing Systems", "IEEE Int Conf Distrib Comput Syst", "Int Conf Device Circuit Syst", "ICDCS", "Int Conf Distrib Comput Syst", "International Conference on Devices, Circuits and Systems"], "url": "https://ieeexplore.ieee.org/xpl/conhome/1000213/all-proceedings"}, "title": "SQLoop: High Performance Iterative Processing in Data Management", "abstract": "Increasingly more iterative and recursive query tasks are processed in data management systems, such as graph-structured data analytics, demanding fast response time. However, existing CTE-based recursive SQL and its implementation ineffectively respond to this intensive query processing with two major drawbacks. First, its iteration execution model is based on implicit set-oriented terminating conditions that cannot express aggregation-based tasks, such as PageRank. Second, its synchronous execution model cannot perform asynchronous computing to further accelerate execution in parallel. To address these two issues, we have designed and implemented SQLoop, a framework that extends the semantics of current SQL standard in order to accommodate iterative SQL queries. SQLoop interfaces between users and different database engines with two powerful components. First, it provides an uniform SQL expression for users to access any database engine so that they do not need to write database dependent SQL or move datasets from a target engine to process in their own sites. Second, SQLoop automatically parallelizes iterative queries that contain certain aggregate functions in both synchronous and asynchronous ways. More specifically, SQLoop is able to take advantage of intermediate results generated between different iterations and to prioritize the execution of partitions that accelerate the query processing. We have tested and evaluated SQLoop by using three popular database engines with real-world datasets and queries, and shown its effectiveness and high performance.", "venue": "IEEE International Conference on Distributed Computing Systems", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2018-07-01", "journal": {"name": "2018 IEEE 38th International Conference on Distributed Computing Systems (ICDCS)", "pages": "1039-1051"}, "authors": [{"authorId": "9544776", "name": "Sofoklis Floratos"}, {"authorId": "40600353", "name": "Yanfeng Zhang"}, {"authorId": "1387914337", "name": "Yuan Yuan"}, {"authorId": "1747102", "name": "Rubao Lee"}, {"authorId": "10375334", "name": "Xiaodong Zhang"}], "citations": [{"paperId": "fc3b81275d1413b65f339ef3780b08ddc2df4f60", "title": "Rotary: A Resource Arbitration Framework for Progressive Iterative Analytics"}, {"paperId": "18230127a20e46a13bccbdae6ce90f29f3a7c464", "title": "DBSpinner: Making a Case for Iterative Processing in Databases"}, {"paperId": "898fce6016ec5f5ff10fe5fcc6475c16e7dfe829", "title": "Procedural Extensions of SQL: Understanding their usage in the wild"}, {"paperId": "e03e7dbeb8120dc4092036cda8360215ae86b925", "title": "Aggify: Lifting the Curse of Cursor Loops using Custom Aggregates"}, {"paperId": "3f493d39a90212e8c3ee37989063bc7776e2fd76", "title": "Optimizing Cursor Loops in Relational Databases"}, {"paperId": "0fab5869fe9f31cfc16a13e259e6cde2bd7af26d", "title": "Enhancing recursive graph querying on RDBMS with data clustering approaches"}, {"paperId": "3b31000fbcb11707c456d659884a474a3e2af0ab", "title": "Distributed Graph Processing: Techniques and Systems"}]}
