{"paperId": "058f7a552121c7417e783c995f8bc584d09b3eff", "publicationVenue": {"id": "764e3630-ddac-4c21-af4b-9d32ffef082e", "name": "IEEE International Conference on Data Engineering", "type": "conference", "alternate_names": ["ICDE", "Int Conf Data Eng", "IEEE Int Conf Data Eng", "International Conference on Data Engineering"], "url": "http://www.wikicfp.com/cfp/program?id=1331"}, "title": "Sequence-Oriented DBMS Fuzzing", "abstract": "The SQL specification consists of hundreds of statement types, which leads to difficulties in DBMS fuzzing: state-of-the-art works generally reuse the statements of predefined types; the limited types cannot cover the full input space and test the corresponding logic consequently. In this paper, we propose Lego, a fuzzer to generate SQL sequences with abundant types to improve DBMS fuzzing coverage. The key idea of sequence generation is type-affinity, which indicates the meaningful occurrence of SQL type pairs (e.g., INSERT and SELECT). During each fuzzing iteration, Lego first proactively explores SQL statements of different types and analyzes affinities with coverage feedback. Next, when a new affinity is discovered, Lego synthesizes new SQL sequences containing the types progressively.We evaluate Lego on PostgreSQL, MySQL, MariaDB, and Comdb2 against SQLancer, SQLsmith, and Squirrel. The sequence-oriented fuzzing helps Lego outperform other fuzzers on branch coverage by 44%\u2013198%. More importantly, in the continuous fuzzing, Lego has discovered 102 new vulnerabilities confirmed by the corresponding vendors, including 6 bugs in PostgreSQL, 21 bugs in MySQL, 42 bugs in MariaDB, and 33 bugs in Comdb2. Among them, 22 CVEs have been assigned due to their severe security influences.", "venue": "IEEE International Conference on Data Engineering", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2023-04-01", "journal": {"name": "2023 IEEE 39th International Conference on Data Engineering (ICDE)", "pages": "668-681"}, "authors": [{"authorId": "2118673419", "name": "Jie Liang"}, {"authorId": "2225055446", "name": "Yaoguang Chen"}, {"authorId": "2146253995", "name": "Zhiyong Wu"}, {"authorId": "2225015087", "name": "Jingzhou Fu"}, {"authorId": "2433617", "name": "Mingzhe Wang"}, {"authorId": "2143496230", "name": "Yu Jiang"}, {"authorId": "2225216963", "name": "Xiangdong Huang"}, {"authorId": "145358506", "name": "Ting Chen"}, {"authorId": "2155172564", "name": "Jiashui Wang"}, {"authorId": "2109045084", "name": "Jiajia Li"}], "citations": [{"paperId": "0b083953239d0617b534a0d76762fa8350db4e6f", "title": "Randomized Differential Testing of RDF Stores"}, {"paperId": "a9fa1a56ba118fa3b629fc6308d6b5606751f023", "title": "Detecting Isolation Bugs via Transaction Oracle Construction"}]}
