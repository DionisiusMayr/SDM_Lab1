{"paperId": "a861ac528b24b92c75b91369ec05fb4f12a3b730", "publicationVenue": {"id": "0471222d-7141-46cf-8bf3-e7e1676553d1", "name": "IEEE International Symposium on Software Reliability Engineering", "type": "conference", "alternate_names": ["IEEE Int Symp Softw Reliab Eng", "Int Symp Softw Reliab Eng", "International Symposium on Software Reliability Engineering", "ISSRE"], "url": "http://www.wikicfp.com/cfp/program?id=1756"}, "title": "Understanding and Improving Regression Test Selection in Continuous Integration", "abstract": "Developers rely on regression testing in their continuous integration (CI) environment to find changes that introduce regression faults. While regression testing is widely practiced, it can be costly. Regression test selection (RTS) reduces the cost of regression testing by not running the tests that are unaffected by the changes. Industry has adopted module-level RTS for their CI environment, while researchers have proposed class-level RTS. In this paper, we compare module-and class-level RTS techniques in a cloud-based CI environment, Travis. We also develop and evaluate a hybrid RTS technique that combines aspects of the module-and class-level RTS techniques. We evaluate all the techniques on real Travis builds. We find that the RTS techniques do save testing time compared to running all tests (RetestAll), but the percentage of time for a full build using RTS (76.0%) is not as low as found in previous work, due to the extra overhead in a cloud-based CI environment. Moreover, we inspect test failures from RetestAll builds, and although we find that RTS techniques can miss to select failed tests, these test failures are almost all flaky test failures. As such, RTS techniques provide additional value in helping developers avoid wasting time debugging failures not related to the recent code changes. Overall, our results show that RTS can be beneficial for the developers in the CI environment, and RTS not only saves time but also avoids misleading developers by flaky test failures.", "venue": "IEEE International Symposium on Software Reliability Engineering", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-10-01", "journal": {"name": "2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)", "pages": "228-238"}, "authors": [{"authorId": "40128780", "name": "A. Shi"}, {"authorId": "2114872267", "name": "Peiyuan Zhao"}, {"authorId": "1718171", "name": "D. Marinov"}], "citations": [{"paperId": "c5e4d3ef6d61cbeea895863856501e2e35a67dd0", "title": "Optimizing Continuous Development by Detecting and Preventing Unnecessary Content Generation"}, {"paperId": "00cf787add0f7b31f5ddf41d8d9ece1eb4af46ca", "title": "More Precise Regression Test Selection via Reasoning about Semantics-Modifying Changes"}, {"paperId": "85b2d3db4f0c3f8b2d9097f7fd6eb6f2c3172f6c", "title": "An information retrieval-based regression test selection technique"}, {"paperId": "9653e1af0491dbfec6ecab5133fb182156298dad", "title": "Test Selection for Unified Regression Testing"}, {"paperId": "ab7366f88da620a8b8677130ffdad06b9b656d58", "title": "BinaryRTS: Cross-language Regression Test Selection for C++ Binaries in CI"}, {"paperId": "3e44eb98a709aba18743e3ddbbf60eb1a3bada9b", "title": "DIRTS: Dependency Injection Aware Regression Test Selection"}, {"paperId": "b49a3d0e3e22590887a6fc3c5dab4ee778ac5246", "title": "Optimizing Continuous Integration by Dynamic Test Proportion Selection"}, {"paperId": "47789ae4698b57aa0d7c7a9406d56fc198cbcf4b", "title": "State of Practical Applicability of Regression Testing Research: A Live Systematic Literature Review"}, {"paperId": "9e88a6e3f1068fd4c265966167919d5de70feb55", "title": "HybridCISave: A Combined Build and Test Selection Approach in Continuous Integration"}, {"paperId": "dea3cac9612d5681f0b30579b6df9532ee1548e6", "title": "BuildSonic: Detecting and Repairing Performance-Related Configuration Smells for Continuous Integration Builds"}, {"paperId": "e9a71e07318e4a27880aaaa5e9212332fe53877b", "title": "Evolution-aware detection of order-dependent flaky tests"}, {"paperId": "80b3c885415573cbdb33cd7ebd275db46ec3ea45", "title": "Accelerating Continuous Integration by Caching Environments and Inferring Dependencies"}, {"paperId": "b971205103f9ae837813bdec890f6b57f590d5a0", "title": "Build System Aware Multi-language Regression Test Selection in Continuous Integration"}, {"paperId": "b29ef8ed3ff8c14ec5dec9a1d70a8de1eb5e170a", "title": "Probe-based Syscall Tracing for Efficient and Practical File-level Test Traces"}, {"paperId": "ed34d88092deb56d7694602d88da710018447313", "title": "Challenges in Regression Test Selection for End-to-End Testing of Microservice-based Software Systems"}, {"paperId": "b2f8399dc3423e4bac9300174b01a55ab1c81f85", "title": "Comparing and Combining Analysis-Based and Learning-Based Regression Test Selection"}, {"paperId": "e15b09a8fff64a9e0745e5af1ea9f8b94e1627d2", "title": "Comparative study of machine learning test case prioritization for continuous integration testing"}, {"paperId": "d83974986a4c6fc986e03dfe3f3cb0a9e710fbd6", "title": "DeepOrder: Deep Learning for Test Case Prioritization in Continuous Integration Testing"}, {"paperId": "91119319745c15d1d628b6dcb87251f981014c36", "title": "Continuous test suite failure prediction"}, {"paperId": "bdab29415be76e68d3c98defb72fc882d9daaf42", "title": "Empirically evaluating readily available information for regression test optimization in continuous integration"}, {"paperId": "dc1b7128c9156206bab48c0effbda1036d04d32d", "title": "Root causing, detecting, and fixing flaky tests: State of the art and future roadmap"}, {"paperId": "88a8e2cd491b49e33013f77edd93fbb428d1a93b", "title": "Development of a methodology for cost optimization of software testing for the automatically tests generation"}, {"paperId": "72764a7c961c3291a90be79939497241423316f1", "title": "Detecting and Fixing Flaky Tests"}, {"paperId": "d71c21699ab9fd1f03252d36463b5595cdc9e606", "title": "On the Impact of Hitting System Resource Limits on Test Flakiness"}]}
