{"paperId": "21cee561662c24e77d0e2b2dedf309eba1cc88ec", "publicationVenue": {"id": "d5b215f3-f737-45b2-875b-df309ce14c43", "name": "Scientific Programming", "type": "journal", "alternate_names": ["Sci Program"], "issn": "1058-9244", "url": "https://www.hindawi.com/journals/sp/", "alternate_urls": ["https://www.iospress.nl/html/10589244.php", "https://www.wiley.com/legacy/compbooks/compjournals/sciprog.html", "http://content.iospress.com/journals/scientific-programming"]}, "title": "Query Execution Optimization in Spark SQL", "abstract": "Spark SQL is a big data processing tool for structured data query and analysis. However, due to the execution of Spark SQL, there are multiple times to write intermediate data to the disk, which reduces the execution efficiency of Spark SQL. Targeting on the existing issues, we design and implement an intermediate data cache layer between the underlying file system and the upper Spark core to reduce the cost of random disk I/O. By using the query pre-analysis module, we can dynamically adjust the capacity of cache layer for different queries. And the allocation module can allocate proper memory for each node in cluster. According to the sharing of the intermediate data in the Spark SQL workflow, this paper proposes a cost-based correlation merging algorithm, which can effectively reduce the cost of reading and writing redundant data. This paper develops the SSO (Spark SQL Optimizer) module and integrates it into the original Spark system to achieve the above functions. This paper compares the query performance with the existing Spark SQL by experiment data generated by TPC-H tool. The experimental results show that the SSO module can effectively improve the query efficiency, reduce the disk I/O cost and make full use of the cluster memory resources.", "venue": "Scientific Programming", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-02-07", "journal": {"name": "Sci. Program.", "pages": "6364752:1-6364752:12", "volume": "2020"}, "authors": [{"authorId": "2117710900", "name": "Xuechun Ji"}, {"authorId": "2888075", "name": "Mao-Xian Zhao"}, {"authorId": "2256418", "name": "Mingyu Zhai"}, {"authorId": "32145440", "name": "Qingxi Wu"}], "citations": [{"paperId": "0476c0e43cfb8f53eef717c1b74b18bdb9fa834b", "title": "Structured query language query join optimization by using rademacher averages and mapreduce algorithms"}, {"paperId": "227b14fa88e954ac5be32f6e48b5b6703ffce380", "title": "SQL QUERY EXECUTION OPTIMIZATION ON SPARK SQL"}, {"paperId": "03c5f3a6d1d50da7bfc0f50be0f80e8b582f47e2", "title": "Aadhaar Data Analysis Comparison in MapReduce, Hive and Spark"}]}
