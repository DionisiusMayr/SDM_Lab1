{"paperId": "7eb6e93a7860a99778c151b012b86084662c082c", "publicationVenue": {"id": "9448f839-459b-45f3-8573-5eff3f032334", "name": "USENIX Annual Technical Conference", "type": "conference", "alternate_names": ["USENIX Annu Tech Conf", "USENIX", "USENIX ATC"], "url": "https://www.usenix.org/conferences/byname/131"}, "title": "Pre-Select Static Caching and Neighborhood Ordering for BFS-like Algorithms on Disk-based Graph Engines", "abstract": "Many important graph algorithms are based on the breadth first search (BFS) approach, which builds itself on recursive vertex traversal. We classify algorithms that share this characteristic into what we call a BFS-like algorithm. In this work, we first analyze and study the I/O request patterns of BFS-like algorithms executed on disk-based graph engines. Our analysis exposes two shortcomings in executing BFS-like algorithms. First, we find that the use of the cache is ineffective. To make use of the cache more effectively, we propose an inmemory static cache, which we call BFS-Aware Static Cache or Basc, for short. Basc is static as its contents, which are edge lists of vertices that are pre-selected before algorithm execution, do not change throughout the execution of the algorithm. Second, we find that the state-of-the-art ordering method for graphs on disks is ineffective with BFS-like algorithms. Thus, based on an I/O cost model that estimates the performance based on the ordering of graphs, we develop an efficient graph ordering called Neighborhood Ordering or Norder. We provide extensive evaluations of Basc and Norder on two well-known graph engines using five real-world graphs including Twitter that has 1.9 billion edges. Our experimental results show that Basc and Norder, collectively have substantial performance impact.", "venue": "USENIX Annual Technical Conference", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null, "journal": {"pages": "459-474"}, "authors": [{"authorId": "2115241729", "name": "Eunjae Lee"}, {"authorId": "2145218120", "name": "Junghyun Kim"}, {"authorId": "103618330", "name": "Keunhak Lim"}, {"authorId": "1719212", "name": "S. Noh"}, {"authorId": "1491137873", "name": "Jiwon Seo"}], "citations": [{"paperId": "e57c6fad3da2bcd017eb2742cd49e3f7faded5d0", "title": "Sage: A System for Uncertain Network Analysis"}, {"paperId": "e2ad33ae1514fc0a5586ae0925fe1cbc1c6c6424", "title": "Tailored vertex ordering for faster triangle listing in large graphs"}, {"paperId": "8caf384b15df61c0c04cdc406997a1ce688e9254", "title": "I-GCN: A Graph Convolutional Network Accelerator with Runtime Locality Enhancement through Islandization"}, {"paperId": "b588110ee9e30a1b1ee130c3323f8eef308a59dc", "title": "Efficient Data Loader for Fast Sampling-Based GNN Training on Large Graphs"}, {"paperId": "b0160ffbfeeb2b8593e1f31fb149acde5d24b6b6", "title": "iTurboGraph: Scaling and Automating Incremental Graph Analytics"}, {"paperId": "4ed0e67d39d6df3e9cdd76f167844046d391e8f6", "title": "Approaching DRAM performance by using microsecond-latency flash memory for small-sized random read accesses: a new access method and its graph applications"}, {"paperId": "158935c72757eddbb35c9e832078ad35f36067ac", "title": "DFOGraph: an I/O- and communication-efficient system for distributed fully-out-of-core graph processing"}, {"paperId": "fc1b2cfca19277842f6fdab9b427fe9b0b66f8a8", "title": "Structure Preserved Graph Reordering for Fast Graph Processing Without the Pain"}, {"paperId": "c72f3f0ab953ed4e42b66b071471ce26dc0e4675", "title": "PaGraph: Scaling GNN training on large graphs via computation-aware caching"}, {"paperId": "1b1e71df4d7755e193438855403972cb3ada17ca", "title": "Traversing large graphs on GPUs with unified memory"}, {"paperId": "89f7adb0501f645af9f804fbebeb41892e8322a1", "title": "Efficient large-scale graph processing: optimisations for storage, performance and evolving graphs"}]}
