{"paperId": "832b5571b0fa2eb291f17cd96b1b65e7d536f10b", "publicationVenue": {"id": "42ba2c5a-a60c-4306-988d-ff0928f95afa", "name": "International Conference on Generative Programming: Concepts and Experiences", "type": "conference", "alternate_names": ["Generative Programming and Component Engineering", "Gener Program Compon Eng", "GPCE", "Int Conf Gener Program Concept Exp"], "url": "https://dl.acm.org/conference/gpce"}, "title": "On-stack replacement for program generators and source-to-source compilers", "abstract": "On-stack replacement (OSR) describes the ability to replace currently executing code with a different version, either a more optimized one (tiered execution) or a more general one (deoptimization to undo speculative optimization). While OSR is a key component in all modern VMs for languages like Java or JavaScript, OSR has only recently been studied as a more abstract program transformation, independent of language VMs. Still, previous work has only considered OSR in the context of low-level execution models based on stack frames, labels, and jumps. With the goal of making OSR more broadly applicable, this paper presents a surprisingly simple pattern for implementing OSR in source-to-source compilers or explicit program generators that target languages with structured control flow (loops and conditionals). We evaluate our approach through experiments demonstrating both tiered execution and speculative optimization, based on representative code patterns in the context of a state-of-the-art in-memory database system that compiles SQL queries to C at runtime. We further show that casting OSR as a high-level transformation enables new speculative optimization patterns beyond what is commonly implemented in language VMs.", "venue": "International Conference on Generative Programming: Concepts and Experiences", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2021-10-17", "journal": {"name": "Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences"}, "authors": [{"authorId": "9931980", "name": "Gr\u00e9gory M. Essertel"}, {"authorId": "21527679", "name": "Ruby Y. Tahboub"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": [{"paperId": "95637d34079d3c4ca5bd35c57e0dc1c46ce8c493", "title": "Flan: An Expressive and Efficient Datalog Compiler for Program Analysis"}, {"paperId": "f64b0732d36b6df3fcd641f3de3aba19af3c70eb", "title": "Graph IRs for Impure Higher-Order Languages (Technical Report)"}, {"paperId": "9bad21437d2e213cffccfdee2e656655c8ce5608", "title": "Transpilers: A Systematic Mapping Review of Their Usage in Research and Industry"}, {"paperId": "9852b681da3d31459f93de1af0fd5e34bcc71a64", "title": "Grizzly: Efficient Stream Processing Through Adaptive Query Compilation"}, {"paperId": "13ff6ad5cda33741535547df18414fb19afa71c6", "title": "Hyperspecialized Compilation for Serverless Data Analytics"}]}
