{"paperId": "d01fa90ee9444121aaa3e814e4876598f593cd3f", "publicationVenue": {"id": "75d7a8c1-d871-42db-a8e4-7cf5146fdb62", "name": "Social Science Research Network", "type": "journal", "alternate_names": ["SSRN, Social Science Research Network (SSRN) home page", "SSRN Electronic Journal", "Soc Sci Res Netw", "SSRN", "SSRN Home Page", "SSRN Electron J", "Social Science Electronic Publishing presents Social Science Research Network"], "issn": "1556-5068", "url": "http://www.ssrn.com/", "alternate_urls": ["www.ssrn.com/", "https://fatcat.wiki/container/tol7woxlqjeg5bmzadeg6qrg3e", "https://www.wikidata.org/wiki/Q53949192", "www.ssrn.com/en", "http://www.ssrn.com/en/", "http://umlib.nl/ssrn", "umlib.nl/ssrn"]}, "title": "Benchmarking scalability of stream processing frameworks deployed as event-driven microservices in the cloud", "abstract": "Event-driven microservices are an emerging architectural style for data-intensive software systems. In such systems, stream processing frameworks such as Apache Flink, Apache Kafka Streams, Apache Samza, Hazelcast Jet, or the Apache Beam SDK are used inside microservices to continuously process massive amounts of data in a distributed fashion. While all of these frameworks promote scalability as a core feature, there is only little empirical research evaluating and comparing their scalability. In this study, we benchmark \ufb01ve modern stream processing frameworks regarding their scalability using a systematic method. We conduct over 460 hours of experiments on Kubernetes clusters in the Google cloud and in a private cloud, where we deploy up to 110 simultaneously running microservice instances, which process up to one million messages per second. We \ufb01nd that all benchmarked frameworks exhibit approximately linear scalability as long as su \ufb03 cient cloud resources are provisioned. However, the frameworks show considerable di \ufb00 erences in the rate at which resources have to be added to cope with increasing load. Moreover, we observe that there is no clear superior framework, but the ranking of the frameworks depends on the use case. Using Apache Beam as an abstraction layer still comes at the cost of signi\ufb01cantly higher resource requirements regardless of the use case.", "venue": "Social Science Research Network", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"name": "ArXiv", "volume": "abs/2303.11088"}, "authors": [{"authorId": "26667701", "name": "S. Henning"}, {"authorId": "1712950", "name": "W. Hasselbring"}], "citations": [{"paperId": "721747f4479f1fca3c080669f8d9989f3b09bb4f", "title": "A systematic mapping of performance in distributed stream processing systems"}, {"paperId": "f90e13dd9cd9912e16db1a431a892b39356e3a1d", "title": "Crayfish: Navigating the Labyrinth of Machine Learning Inference in Stream Processing Systems"}]}
