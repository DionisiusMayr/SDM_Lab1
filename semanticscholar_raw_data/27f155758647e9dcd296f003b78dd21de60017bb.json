{"paperId": "27f155758647e9dcd296f003b78dd21de60017bb", "publicationVenue": {"id": "b3e0d0d9-f2bc-4c19-8c85-1c2af26528d6", "name": "ACM Transactions on Computer Systems", "type": "journal", "alternate_names": ["ACM Trans Comput Syst"], "issn": "0734-2071", "url": "http://www.acm.org/tocs/", "alternate_urls": ["https://tocs.acm.org/", "http://portal.acm.org/tocs"]}, "title": "Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan", "abstract": "There is more than a decade-long history of using static analysis to find bugs in systems such as Linux. Most of the existing static analyses developed for these systems are simple checkers that find bugs based on pattern matching. Despite the presence of many sophisticated interprocedural analyses, few of them have been employed to improve checkers for systems code due to their complex implementations and poor scalability. In this article, we revisit the scalability problem of interprocedural static analysis from a \u201cBig Data\u201d perspective. That is, we turn sophisticated code analysis into Big Data analytics and leverage novel data processing techniques to solve this traditional programming language problem. We propose Graspan, a disk-based parallel graph system that uses an edge-pair centric computation model to compute dynamic transitive closures on very large program graphs. We develop two backends for Graspan, namely, Graspan-C running on CPUs and Graspan-G on GPUs, and present their designs in the article. Graspan-C can analyze large-scale systems code on any commodity PC, while, if GPUs are available, Graspan-G can be readily used to achieve orders of magnitude speedup by harnessing a GPU\u2019s massive parallelism. We have implemented fully context-sensitive pointer/alias and dataflow analyses on Graspan. An evaluation of these analyses on large codebases written in multiple languages such as Linux and Apache Hadoop demonstrates that their Graspan implementations are language-independent, scale to millions of lines of code, and are much simpler than their original implementations. Moreover, we show that these analyses can be used to uncover many real-world bugs in large-scale systems code.", "venue": "ACM Transactions on Computer Systems", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-07-01", "journal": {"name": "ACM Transactions on Computer Systems (TOCS)", "pages": "1 - 39", "volume": "38"}, "authors": [{"authorId": "145057220", "name": "Zhiqiang Zuo"}, {"authorId": "2148896568", "name": "Kai Wang"}, {"authorId": "1665063492", "name": "Aftab Hussain"}, {"authorId": "34651617", "name": "A. A. Sani"}, {"authorId": "2124835073", "name": "Yiyu Zhang"}, {"authorId": "51103894", "name": "S. Lu"}, {"authorId": "2964640", "name": "Wensheng Dou"}, {"authorId": "1799197", "name": "Linzhang Wang"}, {"authorId": "2108262661", "name": "Xuandong Li"}, {"authorId": "2121328398", "name": "Chenxi Wang"}, {"authorId": "38394648", "name": "G. Xu"}], "citations": [{"paperId": "dfe7df8097cf4df7d6455d07191525ab9363d391", "title": "Instruction Scheduling for the GPU on the GPU"}, {"paperId": "e1e3f2a92628299ee4df3b460381730fb3890376", "title": "BigDataflow: A Distributed Interprocedural Dataflow Analysis Framework"}, {"paperId": "a7c2c36879fe4a2adfa528f818bedf1ccfe4ba7d", "title": "DStream: A Streaming-Based Highly Parallel IFDS Framework"}]}
