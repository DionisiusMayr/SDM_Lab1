{"paperId": "3604702a4ecc09c6c019aad4ffe7ac065d50656e", "publicationVenue": {"id": "911e7332-8ea8-4e9d-bc20-5572a2523f92", "name": "International Middleware Conference", "type": "conference", "alternate_names": ["Middleware", "ACM/IFIP/USENIX int conf Middlew", "ACM/IFIP/USENIX international conference on Middleware", "Int Middlew Conf"], "url": "https://dl.acm.org/conference/middleware/proceedings"}, "title": "Improving Concurrent GC for Latency Critical Services in Multi-tenant Systems", "abstract": "For resource utilization efficiency, latency critical (LC) services are commonly co-located with best-effort batch jobs in datacenter servers. Many LC services, such as Cassandra and HBase, run in Java Virtual Machine (JVM). We find that LC services often experience heavy-tailed latency due to performance interference of the concurrent garbage collection (GC) as well as multi-tenancy. The root cause is a semantic gap of resource allocation between JVM and the underlying Linux OS in multi-tenant systems. That is, the OS is unaware of the characteristics of different kinds of threads in JVM (i.e., GC threads and LC worker threads), which may lead to GC threads competing for CPUs; JVM is unaware of the resource utilization in the OS, which may trigger CPU-intensive GC operations when CPUs are busy. Furthermore, we find that co-located batch jobs can interfere with LC services due to Simultaneous Multi-Threading (SMT). We propose iGC, a middleware that bridges the semantic gap between JVM and Linux OS and improves concurrent GC performance in multi-tenant systems. iGC adaptively triggers GC based on the CPU utilization at runtime, which speeds up the GC process and reduces its CPU contention. Furthermore, iGC deploys a dynamic CPU scheduling and thread placement strategy to avoid or mitigate the interference due to concurrent GC and multi-tenancy, but also improve the cache performance. We implement iGC upon two state-of-the-art concurrent GC mechanisms ZGC and G1 GC. We conduct its evaluation using three NoSQL databases as LC services. Experimental results show that iGC significantly improves the performance of concurrent GC for LC services and the throughput in multi-tenant systems. iGC reduces the p95 tail latency by 83%, 37% and 22% for the three LC services Cassandra, HBase and Solr, respectively. It also increases the throughput of LC services up to 2.56X.", "venue": "International Middleware Conference", "year": 2022, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle"], "publicationDate": "2022-11-07", "journal": {"name": "Proceedings of the 23rd ACM/IFIP International Middleware Conference"}, "authors": [{"authorId": "11447097", "name": "Junxian Zhao"}, {"authorId": "40377061", "name": "Aidi Pi"}, {"authorId": "46224002", "name": "Xiaobo Zhou"}, {"authorId": "2958705", "name": "Sang-Yoon Chang"}, {"authorId": "2167458317", "name": "Chengzhong Xu"}], "citations": [{"paperId": "ad72d157a1e95a8d453cc1e57e62d481338c2653", "title": "Let It Go: Relieving Garbage Collection Pain for Latency Critical Applications in Golang"}]}
