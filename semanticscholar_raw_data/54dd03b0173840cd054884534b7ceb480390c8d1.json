{"paperId": "54dd03b0173840cd054884534b7ceb480390c8d1", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Babelfish: Efficient Execution of Polyglot Queries", "abstract": "\n Today's users of data processing systems come from different domains, have different levels of expertise, and prefer different programming languages. As a result, analytical workload requirements shifted from relational to\n polyglot\n queries involving user-defined functions (UDFs). Although some data processing systems support polyglot queries, they often embed third-party language runtimes. This embedding induces a high performance overhead, as it causes additional data materialization between execution engines.\n \n In this paper, we present Babelfish, a novel data processing engine designed for polyglot queries. Babelfish introduces an intermediate representation that unifies queries from different implementation languages. This enables new, holistic optimizations across operator and language boundaries, e.g., operator fusion and workload specialization. As a result, Babelfish avoids data transfers and enables efficient utilization of hardware resources. Our evaluation shows that Babelfish outperforms state-of-the-art data processing systems by up to one order of magnitude and reaches the performance of handwritten code. With Babelfish, we bridge the performance gap between relational and multi-language UDFs and lay the foundation for the efficient execution of future polyglot workloads.", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-10-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "196-210", "volume": "15"}, "authors": [{"authorId": "144810838", "name": "P. M. Grulich"}, {"authorId": "2360768", "name": "Steffen Zeuch"}, {"authorId": "1733290", "name": "V. Markl"}], "citations": [{"paperId": "6efe672f20ab649641d55b202b24a70b6b19e340", "title": "Accelerating Multilingual Applications with In-memory Array Sharing"}, {"paperId": "49d9666d6e3dd5a5a49a9db500c2683c23132b91", "title": "Efficient Execution of User-Defined Functions in SQL Queries"}, {"paperId": "f22d62d311ceeb5350d9b86989c5044c3b0ea972", "title": "Showcasing Data Management Challenges for Future IoT Applications with NebulaStream"}, {"paperId": "1b9ce0e84228882e912e8c526eca0911860929bd", "title": "Big Data Analytics from the Rich Cloud to the Frugal Edge"}, {"paperId": "d28df6acd26036102e74fbc4bc759ccf5c2c3eae", "title": "In-Situ Cross-Database Query Processing"}, {"paperId": "3fb4813a08ecbbf4ceb31f722713f4bc8366e709", "title": "User-Defined Functions in Modern Data Engines"}, {"paperId": "7bbd1762024afe9d9272eb24c594dfe984e81810", "title": "DynQ: a dynamic query engine with query-reuse capabilities embedded in a polyglot runtime"}, {"paperId": "e1bc6c421dbd19c37b8b33ee64c88f369f555db7", "title": "Survey of window types for aggregation in stream processing systems"}, {"paperId": "c98065824ce7c0ba7b8cecbf0c6155c46b5bb64d", "title": "Control Flow Duplication for Columnar Arrays in a Dynamic Compiler"}, {"paperId": "cb65a74cfb043c595569fe76c7eb163bdcc99c87", "title": "Automatic Array Transformation to Columnar Storage at\u00a0Run\u00a0Time"}, {"paperId": "6c8c4503e3f50848d35deaf080ae4086dd4f60c1", "title": "Containerized Execution of UDFs: An Experimental Evaluation"}, {"paperId": "d67554d357f49a244f5b51b44528b7f2a23884a7", "title": "Algorithms for Windowed Aggregations and Joins on Distributed Stream Processing Systems"}, {"paperId": "d99e8ee4c7936233c2d804c4ed0016d288c10b5a", "title": "NebulaStream: Data Management for the Internet of Things"}, {"paperId": "3635dfe321f4286f050e55629dd06781f81cb0d6", "title": "Dear User-Defined Functions, Inlining isn't working out so great for us. Let's try batching to make our relationship work. Sincerely, SQL"}, {"paperId": "c9d1833c215b67901422968f08fe795d8995ab7c", "title": "A simplified Architecture for Fast, Adaptive Compilation and Execution of SQL Queries"}, {"paperId": "423cfc9d5f61e1deca43b5a82d1d503c4ddf339e", "title": "Towards Unifying Query Interpretation and Compilation"}, {"paperId": "348b692f95f1a8003187d54e63657d90f9275152", "title": "Incremental Stream Query Merging"}]}
