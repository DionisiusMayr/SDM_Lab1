{"paperId": "08f0e7dd21f9c31314a78f447013bf6576ab3e22", "publicationVenue": {"id": "5dfdcc5e-f28b-42bd-9832-bf3894169b1c", "name": "International Conference on Information Control Systems & Technologies", "type": "conference", "alternate_names": ["Int Conf Softw Test Verification Valid", "International Conference on Software Testing, Verification, and Validation", "Int Conf Inf Control Syst  Technol", "Int Conf Sens Technol", "International Conferences on Sensing Technology", "International Conference on Sensing Technology", "ICST"], "url": "http://www.wikicfp.com/cfp/program?id=1483"}, "title": "Resurgence of Regression Test Selection for C++", "abstract": "Regression testing \u2013 running available tests after each project change \u2013 is widely practiced in industry. Despite its widespread use and importance, regression testing is a costly activity. Regression test selection (RTS) optimizes regression testing by selecting only tests affected by project changes. RTS has been extensively studied and several tools have been deployed in large projects. However, work on RTS over the last decade has mostly focused on languages with abstract computing machines (e.g., JVM). Meanwhile development practices (e.g., frequency of commits, testing frameworks, compilers) in C++ projects have dramatically changed and the way we should design and implement RTS tools and the benefits of those tools is unknown. We present a design and implementation of an RTS technique, dubbed RTS++, that targets projects written in C++, which compile to LLVM IR and use the Google Test testing framework. RTS++ uses static analysis of a function call graph to select tests. RTS++ integrates with many existing build systems, including AutoMake, CMake, and Make. We evaluated RTS++ on 11 large open-source projects, totaling 3,811,916 lines of code. To the best of our knowledge, this is the largest evaluation of an RTS technique for C++. We measured the benefits of RTS++ compared to running all available tests (i.e., retest-all). Our results show that RTS++ reduces the number of executed tests and end-to-end testing time by 88% and 61% on average.", "venue": "International Conference on Information Control Systems & Technologies", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2019-04-01", "journal": {"name": "2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)", "pages": "323-334"}, "authors": [{"authorId": "2052629113", "name": "Ben Y. Fu"}, {"authorId": "1704478", "name": "Sasa Misailovic"}, {"authorId": "2020926", "name": "Milo\u0161 Gligori\u0107"}], "citations": [{"paperId": "ab7366f88da620a8b8677130ffdad06b9b656d58", "title": "BinaryRTS: Cross-language Regression Test Selection for C++ Binaries in CI"}, {"paperId": "47789ae4698b57aa0d7c7a9406d56fc198cbcf4b", "title": "State of Practical Applicability of Regression Testing Research: A Live Systematic Literature Review"}, {"paperId": "254302bb655b147fc1046ebff934887748f8b954", "title": "Trusted Framework for Transitioning to Distributed Agile Development Environment \u2013 A Survey"}, {"paperId": "b29ef8ed3ff8c14ec5dec9a1d70a8de1eb5e170a", "title": "Probe-based Syscall Tracing for Efficient and Practical File-level Test Traces"}, {"paperId": "ed34d88092deb56d7694602d88da710018447313", "title": "Challenges in Regression Test Selection for End-to-End Testing of Microservice-based Software Systems"}, {"paperId": "b821a3defc52bafd2cb439e3696e12ca498d1029", "title": "An empirical comparison of four Java-based regression test selection techniques"}, {"paperId": "ddfaee63686d997938eb16938be2448cbd17e539", "title": "Mahtab: Phase-wise acceleration of regression testing for C"}, {"paperId": null, "title": "2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)"}, {"paperId": "0bbf9e2021b552ba12f44e531de0633136208449", "title": "Regression Test Case Prioritization: A Systematic Literature Review"}]}
