{"paperId": "68eb91188d4b34073224b5aadf214396fd2cfba5", "publicationVenue": null, "title": "Reflection-aware static regression test selection", "abstract": "Regression test selection (RTS) aims to speed up regression testing by rerunning only tests that are affected by code changes. RTS can be performed using static or dynamic analysis techniques. Our prior study showed that static and dynamic RTS perform similarly for medium-sized Java projects. However, the results of that prior study also showed that static RTS can be unsafe, missing to select tests that dynamic RTS selects, and that reflection was the only cause of unsafety observed among the evaluated projects. In this paper, we investigate five techniques\u2014three purely static techniques and two hybrid static-dynamic techniques\u2014that aim to make static RTS safe with respect to reflection. We implement these reflection-aware (RA) techniques by extending the reflection-unaware (RU) class-level static RTS technique in a tool called STARTS. To evaluate these RA techniques, we compare their end-to-end times with RU, and with RetestAll, which reruns all tests after every code change. We also compare safety and precision of the RA techniques with Ekstazi, a state-of-the-art dynamic RTS technique; precision is a measure of unaffected tests selected. Our evaluation on 1173 versions of 24 open-source Java projects shows negative results. The RA techniques improve the safety of RU but at very high costs. The purely static techniques are safe in our experiments but decrease the precision of RU, with end-to-end time at best 85.8% of RetestAll time, versus 69.1% for RU. One hybrid static-dynamic technique improves the safety of RU but at high cost, with end-to-end time that is 91.2% of RetestAll. The other hybrid static-dynamic technique provides better precision, is safer than RU, and incurs lower end-to-end time\u201475.8% of RetestAll, but it can still be unsafe in the presence of test-order dependencies. Our study highlights the challenges involved in making static RTS safe with respect to reflection.", "venue": "Proc. ACM Program. Lang.", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-10-10", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 29", "volume": "3"}, "authors": [{"authorId": "40128780", "name": "A. Shi"}, {"authorId": "1410282384", "name": "Milica Hadzi-Tanovic"}, {"authorId": "2145398332", "name": "Lingming Zhang"}, {"authorId": "1718171", "name": "D. Marinov"}, {"authorId": "3023790", "name": "Owolabi Legunsen"}], "citations": [{"paperId": "bb47c2de97e105e68e23c2fda06d36b54fbcb412", "title": "Fine-Grained Assertion-Based Test Selection"}, {"paperId": "162edadc91c631f90365b186bac7f5f2945bc83c", "title": "An Approach to Regression Testing Selection based on Code Changes and Smells"}, {"paperId": "c5e4d3ef6d61cbeea895863856501e2e35a67dd0", "title": "Optimizing Continuous Development by Detecting and Preventing Unnecessary Content Generation"}, {"paperId": "fdff5c66b2f4ce9f129bcdbcf0577f0aaff9a1e7", "title": "Extracting Inline Tests from Unit Tests"}, {"paperId": "00cf787add0f7b31f5ddf41d8d9ece1eb4af46ca", "title": "More Precise Regression Test Selection via Reasoning about Semantics-Modifying Changes"}, {"paperId": "0c0f28574ca73a25ce66a935b400aa66e404e9ef", "title": "Python Security in DevOps: Best Practices for Secure Coding, Configuration Management, and Continuous Testing and Monitoring"}, {"paperId": "85b2d3db4f0c3f8b2d9097f7fd6eb6f2c3172f6c", "title": "An information retrieval-based regression test selection technique"}, {"paperId": "9653e1af0491dbfec6ecab5133fb182156298dad", "title": "Test Selection for Unified Regression Testing"}, {"paperId": "7b93f378d818d70420c828bc7d642fec55730002", "title": "Lightweight Approaches to DNN Regression Error Reduction: An Uncertainty Alignment Perspective"}, {"paperId": "eec350e5c7196616ead59c8d7ac98351d048c169", "title": "Regression Fuzzing for Deep Learning Systems"}, {"paperId": "3e44eb98a709aba18743e3ddbbf60eb1a3bada9b", "title": "DIRTS: Dependency Injection Aware Regression Test Selection"}, {"paperId": "94298763cd373891902e7e5e0b004a490b37eeb5", "title": "Inline Tests"}, {"paperId": "e9a71e07318e4a27880aaaa5e9212332fe53877b", "title": "Evolution-aware detection of order-dependent flaky tests"}, {"paperId": "b2f8399dc3423e4bac9300174b01a55ab1c81f85", "title": "Comparing and Combining Analysis-Based and Learning-Based Regression Test Selection"}, {"paperId": "b821a3defc52bafd2cb439e3696e12ca498d1029", "title": "An empirical comparison of four Java-based regression test selection techniques"}, {"paperId": "e4a93e10e59adbd27ca567a89ac0b0c5304daaff", "title": "Can We Trust Tests To Automate Dependency Updates? A Case Study of Java Projects"}, {"paperId": "bc95c88191bef5bc909bdfb7051d49b7208eaf5c", "title": "Data-driven test selection at scale"}, {"paperId": "1451b9e5a4ea85466e4674c50d149de13de150da", "title": "How Does Regression Test Selection Affect Program Repair? An Extensive Study on 2 Million Patches"}, {"paperId": "3d707e77c5c491664d689eae485c6c08c521eb0d", "title": "Regression Test Selection Tool for Python in Continuous Integration Process"}, {"paperId": "38c94550ea66865b1fdec91182dbba7afe63c40b", "title": "An extensive study of class-level and method-level test case selection for continuous integration"}, {"paperId": "68598f59698ededb65d997803db708b7ec7cb853", "title": "Empirically revisiting and enhancing IR-based test-case prioritization"}, {"paperId": "74521e22b2ab07ff0be0caea600309b3f9723250", "title": "On the Recall of Static Call Graph Construction in Practice"}, {"paperId": "415465d569f7ad18b8f915fc211a568f0af43592", "title": "Simulee: Detecting CUDA Synchronization Bugs via Memory-Access Modeling"}, {"paperId": "d0c833858205b53b1f84ecb64636736bc9bea982", "title": "Lightweight Lexical Test Prioritization for Immediate Feedback"}, {"paperId": "8be861624332e769270171a04ab7e97d53730400", "title": "eMOP: A Maven Plugin for Evolution-Aware Runtime Verification"}, {"paperId": "72764a7c961c3291a90be79939497241423316f1", "title": "Detecting and Fixing Flaky Tests"}, {"paperId": "5144026b171c782785a030b43d7aef7a6d93c029", "title": "Runtime Verification During Testing"}]}
