{"paperId": "ac764f7569714fa5cac0190b68476f546011c9f9", "publicationVenue": {"id": "22466e99-8720-4629-9169-4469e385e4d8", "name": "IEEE International Conference on Emerging Technologies and Factory Automation", "type": "conference", "alternate_names": ["Emerg Technol Fact Autom", "IEEE Int Conf Emerg Technol Fact Autom", "ETFA", "Emerging Technologies and Factory Automation"], "url": "http://www.wikicfp.com/cfp/program?id=937"}, "title": "Towards a Programming Paradigm for Reconfigurable Computing: Asynchronous Graph Programming", "abstract": "The shift towards reconfigurable systems-hardware and software that adapt themselves to an external context-promises to unlock unprecedented performance, power consumption, and quality of service. However, reconfiguration imposes several challenges on the design of cyber-physical systems. Current design practices, including software frameworks and programming languages, are ill-prepared for supporting reconfiguration.In this paper, we explore Asynchronous Graph Programming, a programming paradigm and an associated model of computation designed for efficient and automated parallelization across processing elements, efficient reconfiguration (i.e., mapping of computational tasks across processing elements), and combining synchronous and asynchronous I/O handling within the same conceptual programming model. We also introduce an analytical model of parallelization, unlocked by Asynchronous Graph Programming, that can inform reconfiguration strategies.We analyze the implications of our model through an analysis of reconfiguration scenarios given a program\u2019s characteristics; our analysis quantifies the benefits of reconfiguring software for higher levels of parallelism, given an amount of data left to process. We also introduce Horde, an open source Asynchronous Graph Programming interpreter, and use it to empirically validate the performance advantage of its automatic parallelism capabilities; in our experiments, automatic parallelization from one to four cores improves average case execution time by a factor of 2 and worst case execution time by a factor of 3.", "venue": "IEEE International Conference on Emerging Technologies and Factory Automation", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2020-07-06", "journal": {"name": "2020 25th IEEE International Conference on Emerging Technologies and Factory Automation (ETFA)", "pages": "1721-1728", "volume": "1"}, "authors": [{"authorId": "1992918321", "name": "J. Fryer"}, {"authorId": "2072953773", "name": "Paulo Garcia"}], "citations": [{"paperId": "62b56cb344b00f61e2937f1b4035ec501df2b154", "title": "Preserving Power Optimizations Across the High Level Synthesis of Distinct Application-Specific Circuits"}, {"paperId": "6ba8ca61139c70ec17a01774cea5dc81e63266eb", "title": "We need a theoretical framework for the modernization of industrial legacy systems"}, {"paperId": "a45cbbd8711c654a8483966608e29561109a8a08", "title": "Arbitrarily Parallelizable Code: A Model of Computation Evaluated on a Message-Passing Many-Core System"}, {"paperId": "e55b8a11f0d46551668bdcd45ad3ae0bc8a85a2b", "title": "Intersubjective Paradigm and Oracle Conceptualization as an Open-Closed Platform for Programming Technologicalization"}, {"paperId": "d38a3103136ccdc7a2b04818f80edd20422d9448", "title": "Strategies for Heterogeneous Multi-Core Processing Based on Graph Programming"}]}
