{"paperId": "0943d39af3832abd732c7cdc2a7910b104042e76", "publicationVenue": {"id": "1a5858d9-edfe-4a1b-ae39-60020748678f", "name": "ACM Transactions on Architecture and Code Optimization (TACO)", "type": "journal", "alternate_names": ["ACM Transactions on Architecture and Code Optimization", "ACM Trans Archit Code Optim", "ACM Trans Archit Code Optim (TACO"], "issn": "1544-3566", "url": "http://www.acm.org/taco", "alternate_urls": ["http://portal.acm.org/taco/", "https://taco.acm.org/"]}, "title": "SSD-SGD: Communication Sparsification for Distributed Deep Learning Training", "abstract": "Intensive communication and synchronization cost for gradients and parameters is the well-known bottleneck of distributed deep learning training. Based on the observations that Synchronous SGD (SSGD) obtains good convergence accuracy while asynchronous SGD (ASGD) delivers a faster raw training speed, we propose Several Steps Delay SGD (SSD-SGD) to combine their merits, aiming at tackling the communication bottleneck via communication sparsification. SSD-SGD explores both global synchronous updates in the parameter servers and asynchronous local updates in the workers in each periodic iteration. The periodic and flexible synchronization makes SSD-SGD achieve good convergence accuracy and fast training speed. To the best of our knowledge, we strike the new balance between synchronization quality and communication sparsification, and improve the tradeoff between accuracy and training speed. Specifically, the core components of SSD-SGD include proper warm-up stage, steps delay stage, and the novel algorithm of global gradient for local update (GLU). GLU is critical for local update operations by using global gradient information to effectively compensate for the delayed local weights. Furthermore, we implement SSD-SGD on MXNet framework and comprehensively evaluate its performance with CIFAR-10 and ImageNet datasets. Experimental results show that SSD-SGD can accelerate distributed training speed under different experimental configurations, by up to 110% (or 2.1\u00d7 of the original speed), while achieving good convergence accuracy.", "venue": "ACM Transactions on Architecture and Code Optimization (TACO)", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-12-10", "journal": {"name": "ACM Transactions on Architecture and Code Optimization", "pages": "1 - 25", "volume": "20"}, "authors": [{"authorId": "3450366", "name": "Yemao Xu"}, {"authorId": "39891717", "name": "Dezun Dong"}, {"authorId": "2265996059", "name": "Dongsheng Wang"}, {"authorId": "2265938795", "name": "Shi Xu"}, {"authorId": "2113956524", "name": "Enda Yu"}, {"authorId": "2244622193", "name": "Weixia Xu"}, {"authorId": "2075370653", "name": "Xiangke Liao"}], "citations": []}
