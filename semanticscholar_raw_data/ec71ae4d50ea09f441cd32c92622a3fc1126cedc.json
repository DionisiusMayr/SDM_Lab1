{"paperId": "ec71ae4d50ea09f441cd32c92622a3fc1126cedc", "publicationVenue": {"id": "86c43745-31d9-4c1a-b33f-ce3aa0042dbb", "name": "USENIX Symposium on Operating Systems Design and Implementation", "type": "conference", "alternate_names": ["Oper Syst Des Implement", "Operating Systems Design and Implementation", "OSDI", "USENIX Symp Oper Syst Des Implement"]}, "title": "Flare: Optimizing Apache Spark with Native Compilation for Scale-Up Architectures and Medium-Size Data", "abstract": "In recent years, Apache Spark has become the de facto standard for big data processing. Spark has enabled a wide audience of users to process petabyte-scale workloads due to its flexibility and ease of use: users are able to mix SQL-style relational queries with Scala or Python code, and have the resultant programs distributed across an entire cluster, all without having to work with low-level parallelization or network primitives. \n \nHowever, many workloads of practical importance are not large enough to justify distributed, scale-out execution, as the data may reside entirely in main memory of a single powerful server. Still, users want to use Spark for its familiar interface and tooling. In such scale-up scenarios, Spark's performance is suboptimal, as Spark prioritizes handling data size over optimizing the computations on that data. For such medium-size workloads, performance may still be of critical importance if jobs are computationally heavy, need to be run frequently on changing data, or interface with external libraries and systems (e.g., TensorFlow for machine learning). \n \nWe present Flare, an accelerator module for Spark that delivers order of magnitude speedups on scale-up architectures for a large class of applications. Inspired by query compilation techniques from main-memory database systems, Flare incorporates a code generation strategy designed to match the unique aspects of Spark and the characteristics of scale-up architectures, in particular processing data directly from optimized file formats and combining SQL-style relational processing with external frameworks such as TensorFlow.", "venue": "USENIX Symposium on Operating Systems Design and Implementation", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2018-10-08", "journal": {"pages": "799-815"}, "authors": [{"authorId": "9931980", "name": "Gr\u00e9gory M. Essertel"}, {"authorId": "21527679", "name": "Ruby Y. Tahboub"}, {"authorId": "117235241", "name": "James M. Decker"}, {"authorId": "144806284", "name": "Kevin J. Brown"}, {"authorId": "1746638", "name": "K. Olukotun"}, {"authorId": "1712987", "name": "Tiark Rompf"}], "citations": [{"paperId": "95637d34079d3c4ca5bd35c57e0dc1c46ce8c493", "title": "Flan: An Expressive and Efficient Datalog Compiler for Program Analysis"}, {"paperId": "a72c5ff8bb28397049dfd49831d3208ed94fe4c2", "title": "Architecting Intermediate Layers for Efficient Composition of Data Management and Machine Learning Systems"}, {"paperId": "b88cac3ad1e609b5734c3b16fe316e6b41a79a55", "title": "Graph IRs for Impure Higher-Order Languages: Making Aggressive Optimizations Affordable with Precise Effect Dependencies"}, {"paperId": "f64b0732d36b6df3fcd641f3de3aba19af3c70eb", "title": "Graph IRs for Impure Higher-Order Languages (Technical Report)"}, {"paperId": "49d9666d6e3dd5a5a49a9db500c2683c23132b91", "title": "Efficient Execution of User-Defined Functions in SQL Queries"}, {"paperId": "11b4cda8d6aa5ec48cf99c86ef217d5de9b2a169", "title": "Automated Translation of Functional Big Data Queries to SQL"}, {"paperId": "d28df6acd26036102e74fbc4bc759ccf5c2c3eae", "title": "In-Situ Cross-Database Query Processing"}, {"paperId": "3fb4813a08ecbbf4ceb31f722713f4bc8366e709", "title": "User-Defined Functions in Modern Data Engines"}, {"paperId": "2945fd1128d486440cdc2041424ca473986cc9d5", "title": "DEFUSE: An Interface for Fast and Correct User Space File System Access"}, {"paperId": "7c902c4fd3d09a988d3a85917dd1c03a7e45338f", "title": "Photon: A Fast Query Engine for Lakehouse Systems"}, {"paperId": "3182e566351d1fdfc4f3998620d04cc1a68b8518", "title": "Efficient Incrementialization of Correlated Nested Aggregate Queries using Relative Partial Aggregate Indexes (RPAI)"}, {"paperId": "832b5571b0fa2eb291f17cd96b1b65e7d536f10b", "title": "On-stack replacement for program generators and source-to-source compilers"}, {"paperId": "5347701b93dfa1342b7b6a4f708e2c504337ed75", "title": "UDF to SQL translation through compositional lazy inductive synthesis"}, {"paperId": "54dd03b0173840cd054884534b7ceb480390c8d1", "title": "Babelfish: Efficient Execution of Polyglot Queries"}, {"paperId": "803d336ed10e6bf7e1ea7a878bdbe758341fa2f0", "title": "Tuplex: Data Science in Python at Native Code Speed"}, {"paperId": "8172ec16af1966faa5b4b27ace7476cb865e37d2", "title": "Swift for TensorFlow: A portable, flexible platform for deep learning"}, {"paperId": "073471cf36f7246e26c4fd765e8eaf7cb9e86d27", "title": "ShadowVM: accelerating data plane for data analytics with bare metal CPUs and GPUs"}, {"paperId": "5cf98f3f2a3dd9dc97994eb783190a2f4c91cf00", "title": "Compiling symbolic execution with staging and algebraic effects"}, {"paperId": "5787eb70a1b67a7d3af815fdfe2bbb63ca12e225", "title": "Generalized Sub-Query Fusion for Eliminating Redundant I/O from Big-Data Queries"}, {"paperId": "67a1780787df721f4863223c5fc1194ddf5af7c4", "title": "Towards optimizing the execution of spark scientific workflows using machine learning\u2010based parameter tuning"}, {"paperId": "1200c9ecb97a84ab136290f69c6f6294f6f51aee", "title": "Architecting a Query Compiler for Spatial Workloads"}, {"paperId": "9852b681da3d31459f93de1af0fd5e34bcc71a64", "title": "Grizzly: Efficient Stream Processing Through Adaptive Query Compilation"}, {"paperId": "6c73be8cb4b89699afc94d7f5e79b023ae7b6809", "title": "Modularis: Modular Relational Analytics over Heterogeneous Distributed Platforms"}, {"paperId": "5c573e77829a606008bcb2bd0737b93cef3a5a5b", "title": "Modularis: Modular Data Analytics for Hardware, Software, and Platform Heterogeneity"}, {"paperId": "224ee2c204471bd3ac295e88bbf070e0607339ae", "title": "Quantifying TPC-H choke points and their optimizations"}, {"paperId": "e1a2204a90f397ad5dd350355e3a2023b5b7e7a9", "title": "Dynamic speculative optimizations for SQL compilation in Apache Spark"}, {"paperId": "d137cda092b57e8e7477fafc745c712a99120f80", "title": "Incorporating Super-Operators in Big-Data Query Optimizers"}, {"paperId": "ab994eab2737d3bbe4845fdcc7dece085bf99f0a", "title": "Gerenuk: thin computation over big native data using speculative program transformation"}, {"paperId": "2a22c7ffad630287332fc0d6dac07d34eab479e2", "title": "Staged abstract interpreters: fast and modular whole-program analysis via meta-programming"}, {"paperId": "980cc523a506a7fbd094fe0bb216eb82884c9e8e", "title": "Producing building blocks for data analytics"}, {"paperId": "2df8ebae18c223e4fef965f8eecaa10d2544c3e2", "title": "Flare & Lantern: Efficiently Swapping Horses Midstream"}, {"paperId": "d27ed24746f8550a7c38cc2348b887db454470b0", "title": "Towards compiling graph queries in relational engines"}, {"paperId": "a8c559f171859a7d40cbb5e7bc612579c1aaf7da", "title": "Polystore++: Accelerated Polystore System for Heterogeneous Workloads"}, {"paperId": "0d55e6213d455a75b801c7ee2687899ef33cabc6", "title": "Analyzing and Optimizing Java Code Generation for Apache Spark Query Plan"}, {"paperId": "699da1789451e16f06a2d02b0a71e7687ad770d3", "title": "Shared Arrangements: practical inter-query sharing for streaming dataflows"}, {"paperId": "84bd9195a469b26519bf7cac6caa2504024fc9fe", "title": "K-Pg: Shared State in Differential Dataflows"}, {"paperId": "770911d314dd7866153f2be235607c0eb32255bf", "title": "Rhyme: A Data-Centric Expressive Query Language for Nested Data Structures"}, {"paperId": "7187c101fc40740278cfbb7c1d565c88009f7349", "title": "MilliSort and MilliQuery: Large-Scale Data-Intensive Computing in Milliseconds"}, {"paperId": "dda986751968714074431c1c5f8abd09da31aad0", "title": "Retrofitting High Availability Mechanism to Tame Hybrid Transaction/Analytical Processing"}, {"paperId": "c53f42eda2a2c016965cb7671a781c6bed36f2db", "title": "Adaptive Query Execution: Dynamically Rewriting Compiled Queries"}, {"paperId": "e7e335ed18aa181caae403dba65394f0f11bb47c", "title": "A SQL to C compiler in 500 lines of code"}, {"paperId": "7751a490d4252191f6f007d0fce06de5372f5f75", "title": "Optimizing end-to-end machine learning pipelines for model training"}, {"paperId": "2bbe7c182af82c09005c32e6692a7de808b48cc3", "title": "Snek: Overloading Python Semantics via Virtualization"}, {"paperId": "612ab76f817fd6c6e32bf1fa13cddfe3c2735331", "title": "Computation Offloading in JVM-based Dataflow Engines"}, {"paperId": "3f41ad1e7cf13fb1610b758464eac42cb30c69cc", "title": "The 800 Pound Python in the Machine Learning Room"}, {"paperId": "89261cadefcb1e23d563e7eb3a71ef82e0659e87", "title": "Backpropagation with Continuation Callbacks : Foundations for Efficient and Expressive Differentiable Programming"}, {"paperId": "ea343a8aa79f9f4f0b6418bd66e9b7a77002e8f1", "title": "Chukonu: A Fully-Featured High-Performance Big Data Framework that Integrates a Native Compute Engine into Spark"}]}
