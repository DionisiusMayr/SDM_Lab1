{"paperId": "3cedaed934111750b36ce5ee1441ebb39e7ab620", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "New Query Optimization Techniques in the Spark Engine of Azure Synapse", "abstract": "\n The cost of big-data query execution is dominated by stateful operators. These include\n sort\n and\n hash-aggregate\n that typically materialize intermediate data in memory, and\n exchange\n that materializes data to disk and transfers data over the network. In this paper we focus on several query optimization techniques that reduce the cost of these operators. First, we introduce a novel exchange placement algorithm that improves the state-of-the-art and significantly reduces the amount of data exchanged. The algorithm simultaneously minimizes the number of exchanges required and maximizes computation reuse via multi-consumer exchanges. Second, we introduce three partial push-down optimizations that push down partial computation derived from existing operators (\n group-bys\n ,\n intersections\n and\n joins\n ) below these stateful operators. While these optimizations are generically applicable we find that two of these optimizations (\n partial aggregate and partial semi-join push-down\n ) are only beneficial in the scale-out setting where\n exchanges\n are a bottleneck. We propose novel extensions to existing literature to perform more aggressive partial push-downs than the state-of-the-art and also specialize them to the big-data setting. Finally we propose peephole optimizations that specialize the implementation of stateful operators to their input parameters. All our optimizations are implemented in the spark engine that powers azure synapse. We evaluate their impact on TPCDS and demonstrate that they make our engine 1.8X faster than Apache Spark 3.0.1.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-12-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "936-948", "volume": "15"}, "authors": [{"authorId": "2063982599", "name": "Abhishek Modi"}, {"authorId": "30141706", "name": "K. Rajan"}, {"authorId": "144148944", "name": "S. Thimmaiah"}, {"authorId": "2066976671", "name": "Prakhar Jain"}, {"authorId": "2125033000", "name": "Swinky Mann"}, {"authorId": null, "name": "Ayushi Agarwal"}, {"authorId": "2058012359", "name": "Ajith Shetty"}, {"authorId": "1410282953", "name": "I. ShahidK."}, {"authorId": "1395157337", "name": "Ashit Gosalia"}, {"authorId": "2162600903", "name": "Partho Sarthi"}], "citations": [{"paperId": "0476c0e43cfb8f53eef717c1b74b18bdb9fa834b", "title": "Structured query language query join optimization by using rademacher averages and mapreduce algorithms"}, {"paperId": "95b949527025bf4c9ffe41947ac3ed43a2d3b2aa", "title": "Anser: Adaptive Information Sharing Framework of AnalyticDB"}, {"paperId": "62ab0c752b63393c9462ef2b749cd7545d2b1a49", "title": "Predicate Pushdown for Data Science Pipelines"}, {"paperId": "d76ffb018707297a4d49bd4b5901dab35c212ae1", "title": "Optimization of the Join between Large Tables in the Spark Distributed Framework"}, {"paperId": "313b35dae184ce0f7053e23ec22e538210e26c20", "title": "Accelerating Cloud-Native Databases with Distributed PMem Stores"}, {"paperId": "465edb61bd32ca126909bb40afb9fa6b1e419e08", "title": "Toward Building Edge Learning Pipelines"}, {"paperId": "9c9a6a89396be6b1faa808df108b10f0bb2b65ec", "title": "Predictive Price-Performance Optimization for Serverless Query Processing"}]}
