{"paperId": "ba2700c839af72ae9e2e730e703ba2eee1f8b5fd", "publicationVenue": {"id": "d135477d-8b21-429b-8564-b80f938a0147", "name": "International Conference on High Performance Computing", "type": "conference", "alternate_names": ["HiPC", "High Performance Computing Symposium", "IEEE International Conference on High Performance Computing, Data, and Analytics", "HPC", "Int Adv Res Workshop High Perform Comput", "Int Conf High Perform Comput", "International Advanced Research Workshop on High Performance Computing", "High Perform Comput Symp", "IEEE Int Conf High Perform Comput Data Anal"], "url": "http://www.wikicfp.com/cfp/program?id=1192"}, "title": "Hierarchical Filter and Refinement System Over Large Polygonal Datasets on CPU-GPU", "abstract": "In this paper, we introduce our hierarchical filter and refinement technique that we have developed for parallel geometric intersection operations involving large polygons and polylines. The inputs are two layers of large polygonal datasets and the computations are spatial intersection on a pair of cross-layer polygons. These intersections are the compute-intensive spatial data analytic kernels in spatial join and map overlay computations. We have extended the classical filter and refine algorithms using PolySketch Filter to improve the performance of geospatial computations. In addition to filtering polygons by their Minimum Bounding Rectangle (MBR), our hierarchical approach explores further filtering using tiles (smaller MBRs) to increase the effectiveness of filtering and decrease the computational workload in the refinement phase. We have implemented this filter and refine system on CPU and GPU by using OpenMP and OpenACC. After using R-tree, on average, our filter technique can still discard 69% of polygon pairs which do not have segment intersection points. PolySketch filter reduces on average 99.77% of the workload of finding line segment intersections. PNP based task reduction and Striping algorithms filter out on average 95.84% of the workload of Point-in-Polygon tests. Our CPU-GPU system performs spatial join on two shapefiles, namely USA Water Bodies and USA Block Group Boundaries with 683K polygons in about 10 seconds using NVidia Titan V and Titan Xp GPU.", "venue": "International Conference on High Performance Computing", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2019-12-01", "journal": {"name": "2019 IEEE 26th International Conference on High Performance Computing, Data, and Analytics (HiPC)", "pages": "141-151"}, "authors": [{"authorId": "2144470077", "name": "Yiming Liu"}, {"authorId": "2118579557", "name": "Jie Yang"}, {"authorId": "2871863", "name": "S. Puri"}], "citations": [{"paperId": "3b5325634156f6128cb6b68cc93690d70165e111", "title": "GridMesa: A NoSQL-based big spatial data management system with an adaptive grid approximation model"}, {"paperId": "75e9eee522c8c43fba967e82cf7a8a9592095df6", "title": "APRIL: Approximating Polygons as Raster Interval Lists"}, {"paperId": "4b085b3878436f32b2c432491f5512be90f1a2eb", "title": "Raster Intervals: An Approximation Technique for Polygon Intersection Joins"}, {"paperId": "2d1018d09152cb23c4e9917218ef7b05997fed8d", "title": "Fine-grained dynamic load balancing in spatial join by work stealing on distributed memory"}, {"paperId": "d3a55f1c9b15781c0515caff24742f8b63ae1563", "title": "Accelerating Spatial Autocorrelation Computation with Parallelization, Vectorization and Memory Access Optimization: With a focus on rapid recalculation of COVID related spatial statistics for faster geospatial analysis and response"}, {"paperId": "124b7b7134ee5feab97b2187390c04eaf06d51b2", "title": "Efficient Filters for Geometric Intersection Computations using GPU"}, {"paperId": "480a3b0007a86df860d30b1670874c76824b0d11", "title": "Efficient Parallel and Adaptive Partitioning for Load-balancing in Spatial Join"}, {"paperId": "2e72df18093198a33eb764fdc26332c3c1abad79", "title": "Geospatial Filter and Re\ufb01ne Computations on NVidia Blue\ufb01eld Data Processing Units (DPU)"}]}
