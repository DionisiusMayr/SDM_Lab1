{"paperId": "4f982bf2c66f2c454fa66699b5546576b7d2dcad", "publicationVenue": null, "title": "Fixpoints for the masses: programming with first-class Datalog constraints", "abstract": "Datalog is a declarative logic programming language that has been used in a variety of applications, including big-data analytics, language processing, networking and distributed systems, and program analysis. In this paper, we propose first-class Datalog constraints as a mechanism to construct, compose, and solve Datalog programs at run time. The benefits are twofold: We gain the full power of a functional programming language to operate on Datalog constraints-as-values, while simultaneously we can use Datalog where it really shines: to declaratively express and solve fixpoint problems. We present an extension of the lambda calculus with first-class Datalog constraints, including its semantics and a type system with row polymorphism based on Hindley-Milner. We prove soundness of the type system and implement it as an extension of the Flix programming language.", "venue": "Proc. ACM Program. Lang.", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-11-13", "journal": {"name": "Proceedings of the ACM on Programming Languages", "pages": "1 - 28", "volume": "4"}, "authors": [{"authorId": "145336226", "name": "Magnus Madsen"}, {"authorId": "3284421", "name": "Ond\u0159ej Lhot\u00e1k"}], "citations": [{"paperId": "3d0fd8e49dd36f117f69bab69f60d625279e743d", "title": "iJTyper: An Iterative Type Inference Framework for Java by Integrating Constraint- and Statistically-based Methods"}, {"paperId": "b975c3b9048db4a62a1c6809d0752c4bd3565896", "title": "On-the-Fly Static Analysis via Dynamic Bidirected Dyck Reachability"}, {"paperId": "76ac53ea88925cb7363f5d1a43f7f457e846d14c", "title": "Fast and Efficient Boolean Unification for Hindley-Milner-Style Type and Effect Systems"}, {"paperId": "85e65f71fada577b3b1dd29a6a5e6e1c8332e195", "title": "Integrating Logic Rules with Everything Else, Seamlessly"}, {"paperId": "2d0f115671af45d667946cf0bb503105d657cfc7", "title": "The Principles of the Flix Programming Language"}, {"paperId": "426debb0905b88d08477e3eca8f301c7ddc63296", "title": "Higher-Order, Data-Parallel Structured Deduction"}, {"paperId": "fedb638fd46360e0c40fb66e9ffd8f6b5fa06413", "title": "Programming with rules and everything else, seamlessly"}, {"paperId": "cc404be81c5013980395941d5f0af33cf2ff5096", "title": "Seamless deductive inference via macros"}, {"paperId": "ade08e17bae6dce4659dbb3212fd65edd1e686d3", "title": "Fifty Years of Prolog and Beyond"}, {"paperId": "35c21e106ed60c6920cff5ad81798e011c64c566", "title": "Relational nullable types with Boolean unification"}, {"paperId": "1e0566158b0ecda97c76a7dadab16f1164b138eb", "title": "Defeasible Reasoning via Datalog\u00ac"}, {"paperId": "7efa374ba5508e0530ebc6b0057a60bcf26f44fc", "title": "Polymorphic types and effects with Boolean unification"}, {"paperId": "c15f67c1ad3d92f2c4ec8678bbb9bb28db4202d1", "title": "Breaking the Negative Cycle: Exploring the Design Space of Stratification for First-Class Datalog Constraints"}, {"paperId": "2831d55c8854ba8bfa6f936469dbab341c88becd", "title": "Programming with Purity Reflection: Peaceful Coexistence of Effects, Laziness, and Parallelism"}, {"paperId": "aa3968a4502ad3f704f8b0bbb9dd22a4ad6069dc", "title": "Restrictable Variants: A Simple and Practical Alternative to Extensible Variants (Artifact)"}, {"paperId": "c8ec49e604398e4fddb55aa1a3b16c8ca88b470e", "title": "Functional Programming with Datalog"}, {"paperId": "273608386bce3ec3abe3f82121e98b987adfe65f", "title": "Flix: A Meta Programming Language for Datalog"}]}
