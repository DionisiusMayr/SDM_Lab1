{"paperId": "cac031714dbee5b255db981657690fff65257a67", "publicationVenue": {"id": "c6840156-ee10-4d78-8832-7f8909811576", "name": "IEEE Transactions on Knowledge and Data Engineering", "type": "journal", "alternate_names": ["IEEE Trans Knowl Data Eng"], "issn": "1041-4347", "url": "https://www.computer.org/web/tkde", "alternate_urls": ["http://ieeexplore.ieee.org/servlet/opac?punumber=69"]}, "title": "Dynamic Data Exchange in Distributed RDF Stores", "abstract": "When RDF datasets become too large to be managed by centralised systems, they are often distributed in a cluster of shared-nothing servers, and queries are answered using a distributed join algorithm. Although such solutions have been extensively studied in relational and RDF databases, we argue that existing approaches exhibit two drawbacks. First, they usually decide statically(i.e., at query compile time) how to shuffle the data, which can lead to missed opportunities for local computation. Second, they often materialise large intermediate relations whose size is determined by the entire dataset (and not the data stored in each server), so these relations can easily exceed the memory of individual servers. As a possible remedy, we present a novel distributed join algorithm for RDF. Our approach decides when to shuffle data dynamically, which ensures that query answers that can be wholly produced within a server involve only local computation. It also uses a novel flow control mechanism to ensure that every query can be answered even if each server has a bounded amount of memory that is much smaller than the intermediate relations. We complement our algorithm with a new query planning approach that balances the cost of communication against the cost of local processing at each server. Moreover, as in several existing approaches, we distribute RDF data using graph partitioning so as to maximise local computation, but we refine the partitioning algorithm to produce more balanced partitions. We show empirically that our techniques can outperform the state of the art by orders of magnitude in terms of query evaluation times, network communication, and memory use. In particular, bounding the memory use in individual servers can mean the difference between success and failure for answering queries with large answer sets.", "venue": "IEEE Transactions on Knowledge and Data Engineering", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2018-12-01", "journal": {"name": "IEEE Transactions on Knowledge and Data Engineering", "pages": "2312-2325", "volume": "30"}, "authors": [{"authorId": "145116453", "name": "Anthony Potter"}, {"authorId": "1703160", "name": "B. Motik"}, {"authorId": "3141678", "name": "Yavor Nenov"}, {"authorId": "145655431", "name": "Ian Horrocks"}], "citations": [{"paperId": "3276adb3586c27c84cba87730d8dd1674c0ca29c", "title": "An efficient and scalable SPARQL query processing framework for big data using MapReduce and hybrid optimum load balancing"}, {"paperId": "8140a0ec41b8181ba2c265da7cd04bcfd8f56814", "title": "Materialisation and data partitioning algorithms for distributed RDF systems"}, {"paperId": "037891f3cec1f81bfb2fec10e9b294bb25845384", "title": "A survey of RDF stores & SPARQL engines for querying knowledge graphs"}, {"paperId": "1ecd55386aba06fc524a44c9cc5f3efc42564f46", "title": "VLog: A Rule Engine for Knowledge Graphs"}, {"paperId": "a0515c370a9f39d3ffdb6c4974bc92a257b295b4", "title": "Dynamic Partitioning Supporting Load Balancing for Distributed RDF Graph Stores"}, {"paperId": "3cb9afe3fcef98c4ad90bfdb2611026c039e4752", "title": "Datalog Materialisation in Distributed RDF Stores with Dynamic Data Exchange"}, {"paperId": "210080d141ca1b14eac548daed94e3fc4ae32a37", "title": "Recommendation of the Best Majors in Higher Education for Students Career with Big Data"}, {"paperId": "3e3dd347ae8d5d035a1416e50a373d7c5a74c952", "title": "Streaming Partitioning of RDF Graphs for Datalog Reasoning"}, {"paperId": "8962c29b6aef58bd051b6278ee06bdb56a3cd0d4", "title": "Community-Based RDF Partitioning"}]}
