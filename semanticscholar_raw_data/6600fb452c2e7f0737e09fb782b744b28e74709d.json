{"paperId": "6600fb452c2e7f0737e09fb782b744b28e74709d", "publicationVenue": {"id": "05f07129-5526-4754-baa0-d919347a6089", "name": "International Journal of Digital Curation", "type": "journal", "alternate_names": ["Int J Digit Curation"], "issn": "1746-8256", "url": "http://www.ijdc.net/", "alternate_urls": ["http://www.ijdc.net/index.php/ijdc/index"]}, "title": "Cross-tier web programming for curated databases: A case study", "abstract": "Curated databases have become important sources of information across several scientific disciplines, and as the result of manual work of experts, often become important reference works. Features such as provenance tracking, archiving, and data citation are widely regarded as important features for the curated databases, but implementing such features is challenging, and small database projects often lack the resources to do so. \nA scientific database application is not just the relational database itself, but also an ecosystem of web applications to display the data, and applications which allow data curation. Supporting advanced curation features requires changing all of these components, and there is currently no way to provide such capabilities in a reusable way. \nCross-tier programming languages allow developers to write a web application in a single, uniform language. Consequently, database queries and updates can be written in the same language as the rest of the program, and it should be possible to provide curation features via program transformations. As a step towards this goal, it is important to establish that realistic curated databases can be implemented in a cross-tier programming language. \nIn this article, we describe such a case study: reimplementing the web frontend of a realworld scientific database, the IUPHAR/BPS Guide to PHARMACOLOGY (GtoPdb), in the Links cross-tier programming language. We show how programming language features such as language-integrated query simplify the development process, and rule out common errors. Through an automated functional correctness evaluation, we show that the Links implementation correctly implements the functionality of the official version. Through a comparative performance evaluation, we show that the Links implementation performs fewer database queries, while the time neededto handle the queries is comparable to the official Java version. Furthermore, while there is some overhead to using Links because of its comparative immaturity compared to Java, the Links version is usable as a proof-of-concept case study of cross-tier programming for curated databases.", "venue": "International Journal of Digital Curation", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-03-08", "journal": {"name": "ArXiv", "volume": "abs/2003.03845"}, "authors": [{"authorId": "46953264", "name": "S. Fowler"}, {"authorId": "2056345580", "name": "Simon Harding"}, {"authorId": "2525794", "name": "J. Sharman"}, {"authorId": "144320476", "name": "J. Cheney"}], "citations": [{"paperId": "18dc90083ef0836848bf1cab793f5d8863a1e835", "title": "Language-Integrated Query for Temporal Data"}, {"paperId": "feea1d0bc0334c7f47de953b42b1103c7c018596", "title": "Curating Covid-19 data in Links"}, {"paperId": "4af5632c7a1896a5c16d2d6093fe6aef841a744d", "title": "Query Lifting"}, {"paperId": "84944cc7747eba87e172ebbf1fc4fc63a22b2976", "title": "Language-integrated updatable views"}, {"paperId": "0493410b8ec35c4d036bfc61775e6405375547b1", "title": "Edinburgh Research Explorer Language-Integrated Query for Temporal Data"}]}
