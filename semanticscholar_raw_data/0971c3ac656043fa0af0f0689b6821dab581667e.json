{"paperId": "0971c3ac656043fa0af0f0689b6821dab581667e", "publicationVenue": {"id": "41c21288-abea-4a71-98f6-5722d33e9edc", "name": "International Conference on Compiler Construction", "type": "conference", "alternate_names": ["Annu Conf Comput", "Compil Constr", "Int Conf Compil Constr", "Compiler Construction", "Annual Conference on Computers", "CC"], "url": "https://conf.researchr.org/series/CC"}, "title": "Building a Compiled Query Engine in Python", "abstract": "The simplicity of Python and its rich set of libraries has made it the most popular language for data science. Moreover, the interpreted nature of Python offers an easy debugging experience for the developers. However, it comes with the price of poor performance compared to the compiled code. In this paper, we adopt and extend state-of-the-art research in query compilers to propose an efficient query engine embedded in Python. Our open-sourced framework enables the developers to do the debugging in Python, while being able to easily build a compiled version of the code for deployment. Our benchmark results on the entire set of TPC-H queries show that our approach covers different types of relational workloads and is competitive with state-of-the-art in-memory engines in both single- and multi-threaded settings.", "venue": "International Conference on Compiler Construction", "year": 2023, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book", "Conference"], "publicationDate": "2023-02-17", "journal": {"name": "Proceedings of the 32nd ACM SIGPLAN International Conference on Compiler Construction"}, "authors": [{"authorId": "2169561748", "name": "Hesam Shahrokhi"}, {"authorId": "2366196", "name": "A. Shaikhha"}], "citations": [{"paperId": "9d3eabb3761d377eba935b4889fc497c3603d180", "title": "Optimizing Nested Recursive Queries"}, {"paperId": "6f736ab50943717e1ad91f8dfa6523aead8c962e", "title": "A Tensor Algebra Compiler for Sparse Differentiation"}, {"paperId": "8e73328e91be04463c5f4767acbceca1aa8a0929", "title": "Demonstration of OpenDBML, a Framework for Democratizing In-Database Machine Learning"}, {"paperId": "0985e38dc2ac36eb26c5c0c195b5d5725a5583dc", "title": "Declarative Sub-Operators for Universal Data Processing"}, {"paperId": "df519f7b281459ab72e9af39efabcdaf2b98b3a7", "title": "Asymptotically Better Query Optimization Using Indexed Algebra"}, {"paperId": "008d061e92c9c06582133cd37e1a2a481417e40d", "title": "Efficient Query Processing in Python Using Compilation"}, {"paperId": "be68177248858c2607fe42604d1a13d53079af87", "title": "Fine-Tuning Data Structures for Query Processing"}, {"paperId": "6dfa2ed474742590c7d5054c3fccab2005488631", "title": "An Efficient Vectorized Hash Table for Batch Computations"}]}
