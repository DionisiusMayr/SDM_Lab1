{"paperId": "abdbaaf02b47e256b46704f96f6a6f48cba68253", "publicationVenue": {"id": "ea38228f-6ed3-4222-a3ce-d963d8cc9516", "name": "Web Search and Data Mining", "type": "conference", "alternate_names": ["Web Search Data Min", "WSDM"], "url": "http://www.wikicfp.com/cfp/program?id=3158"}, "title": "Kangaroo: Workload-Aware Processing of Range Data and Range Queries in Hadoop", "abstract": "Despite the importance and widespread use of range data, e.g., time intervals, spatial ranges, etc., little attention has been devoted to study the processing and querying of range data in the context of big data. The main challenge relies in the nature of the traditional index structures e.g., B-Tree and R-Tree, being centralized by nature, and hence are almost crippled when deployed in a distributed environment. To address this challenge, this paper presents Kangaroo, a system built on top of Hadoop to optimize the execution of range queries over range data. The main idea behind Kangaroo is to split the data into non-overlapping partitions in a way that minimizes the query execution time. Kangaroo is query workload-aware, i.e., results in partitioning layouts that minimize the query processing time of given query patterns. In this paper, we study the design challenges Kangaroo addresses in order to be deployed on top of a distributed file system, i.e., HDFS. We also study four different partitioning schemes that Kangaroo can support. With extensive experiments using real range data of more than one billion records and real query workload of more than 30,000 queries, we show that the partitioning schemes of Kangaroo can significantly reduce the I/O of range queries on range data.", "venue": "Web Search and Data Mining", "year": 2016, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Book"], "publicationDate": "2016-02-08", "journal": {"name": "Proceedings of the Ninth ACM International Conference on Web Search and Data Mining"}, "authors": [{"authorId": "145204762", "name": "Ahmed M. Aly"}, {"authorId": "1890500", "name": "Hazem Elmeleegy"}, {"authorId": "2114756873", "name": "Yan Qi"}, {"authorId": "1709661", "name": "W. Aref"}], "citations": [{"paperId": "ff8cfbe999f134e8fe5f8f0f9b06520d26ceef15", "title": "An Enhanced Partitioning Approach in SpatialHadoop for Handling Big Spatial Data"}, {"paperId": "6df772b7e69de44666155f59c7f9a7930c454325", "title": "PAW: Data Partitioning Meets Workload Variance"}, {"paperId": "7dc8f2880d3f36e7569c62cdcec2f6d0a33d3ee8", "title": "Incremental Partitioning for Efficient Spatial Data Analytics"}, {"paperId": "179dac326d74d14a53a75884e865c0df48dfeac5", "title": "Beast: Scalable Exploratory Analytics on Spatio-temporal Data"}, {"paperId": "16e7befba3a42ba99af6a1242301fa81d3b801de", "title": "SWARM: Adaptive Load Balancing in Distributed Streaming Systems for Big Spatial Data"}, {"paperId": "0f9929df88936541d7a68a301fb8d353eaad12e1", "title": "qwLSH: Cache-conscious Indexing for Processing Similarity Search Query Workloads in High-Dimensional Spaces"}, {"paperId": "be56cba489f3aef0f995d610419c59383e64dedf", "title": "2DPR-Tree: Two-Dimensional Priority R-Tree Algorithm for Spatial Partitioning in SpatialHadoop"}, {"paperId": "0ba300acd3f5f1b1cc3580bfbe905c3eb44a0cbe", "title": "Adaptive processing of spatial-keyword data over a distributed streaming cluster"}, {"paperId": "56ae619cb86af57be8b9a0b29e9e216bce030137", "title": "Spatial coding-based approach for partitioning big spatial data in Hadoop"}, {"paperId": "927f0e8323abb38739e76591d9d44ff7877d7008", "title": "PAM: parallel augmented maps"}, {"paperId": "d979020ec3ffdd8c5297cb0975798b67fd4a57c8", "title": "Big Data for Smart Infrastructure Design: Opportunities and Challenges"}, {"paperId": "2d08de86618f626eb0ac88c34db8e59e426426fd", "title": "An Efficient Partitioning Technique in SpatialHadoop"}, {"paperId": "9209dd4a0427b55f8d3e9d7d90cc2f00d8a44855", "title": "Proposal : Parallel Balanced Binary Trees Using Just Join"}]}
