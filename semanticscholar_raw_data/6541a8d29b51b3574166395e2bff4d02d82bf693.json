{"paperId": "6541a8d29b51b3574166395e2bff4d02d82bf693", "publicationVenue": {"id": "86c43745-31d9-4c1a-b33f-ce3aa0042dbb", "name": "USENIX Symposium on Operating Systems Design and Implementation", "type": "conference", "alternate_names": ["Oper Syst Des Implement", "Operating Systems Design and Implementation", "OSDI", "USENIX Symp Oper Syst Des Implement"]}, "title": "Modernizing File System through In-Storage Indexing", "abstract": "We argue that a key-value interface between a file system and an SSD is superior to the legacy block interface by presenting KEVIN. KEVIN combines a fast, lightweight, and POSIXcompliant file system with a key-value storage device that performs in-storage indexing. We implement a variant of a log-structured merge tree in the storage device that not only indexes file objects, but also supports transactions and manages physical storage space. As a result, the design of a file system with respect to space management and crash consistency is simplified, requiring only 10.8K LOC for full functionality. We demonstrate that KEVIN reduces the amount of I/O traffic between the host and the device, and remains particularly robust as the system ages and the data become fragmented. Our approach outperforms existing file systems on a block SSD by a wide margin \u2013 6.2\u00d7 on average \u2013 for metadataintensive benchmarks. For realistic workloads, KEVIN improves throughput by 68% on average.", "venue": "USENIX Symposium on Operating Systems Design and Implementation", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null, "journal": {"pages": "75-92"}, "authors": [{"authorId": "20452671", "name": "Jinhyung Koo"}, {"authorId": "94484972", "name": "Junsu Im"}, {"authorId": "50185849", "name": "Jooyoung Song"}, {"authorId": "2124227280", "name": "Juhyung Park"}, {"authorId": "2216968741", "name": "Eunji Lee"}, {"authorId": "145674614", "name": "B. Kim"}, {"authorId": "48601807", "name": "Sungjin Lee"}], "citations": [{"paperId": "46ae6f5cd043d9f97fdc0b7fccd459ac313b1c31", "title": "Persistent Memory File Systems: A Survey"}, {"paperId": "75a9ee3b6f56b1fb914d32079f8915d3a86a03b1", "title": "Iterator Interface Extended LSM-tree-based KVSSD for Range Queries"}, {"paperId": "4d7caa4dd1bf3c3d23378e70eb0a1c8950ec5c5e", "title": "DPFS: DPU-Powered File System Virtualization"}, {"paperId": "0af393686073dd64f4f199fa7b38efff03af09a1", "title": "PetaKV: Building Efficient Key-Value Store for File System Metadata on Persistent Memory"}, {"paperId": "6a3ad6035795a4d90138781e7483e52cd87b015f", "title": "Dotori: A Key-Value SSD Based KV Store"}, {"paperId": "a93d829acd759f6d3532026b650d43c065a827be", "title": "KVRangeDB: Range Queries for a Hash-based Key\u2013Value Device"}, {"paperId": "421b0b28354cb735cdfdbdd8fce2f24d2067edd5", "title": "Precise Subtyping for Asynchronous Multiparty Sessions"}, {"paperId": "d5e445caadc185c138857e7d7c7fc4211624afdb", "title": "The Security War in File Systems: An Empirical Study from A Vulnerability-centric Perspective"}, {"paperId": "b08d9f91582a2c887f04e2a67265b837d96e6cf1", "title": "Enzian: an open, general, CPU/FPGA platform for systems software research"}, {"paperId": "16298f9b7e4b510f0094720c4c65516922910313", "title": "Past, Present and Future of Computational Storage: A Survey"}, {"paperId": "899696451233d1b92e9ce72b2666876dfcf97a48", "title": "Accelerating LSM-Tree with the Dentry Management of File System"}, {"paperId": "733c5e3a3f1bb5751d5474c94c8573e1356973c2", "title": "ZenFS+: Nurturing Performance and Isolation to ZenFS"}, {"paperId": "f03088724ae8e6eff12e705e162d01c6b046f1de", "title": "KVRangeDB: Rangeueries for A Hash-based Key-value Device"}, {"paperId": "91dc3389c5da4b5914109e461721adf378452132", "title": "FusionFS: Fusing I/O Operations using CISCOps in Firmware File Systems"}]}
