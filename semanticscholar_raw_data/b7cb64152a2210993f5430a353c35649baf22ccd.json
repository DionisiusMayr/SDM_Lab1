{"paperId": "b7cb64152a2210993f5430a353c35649baf22ccd", "publicationVenue": {"id": "1c2ab05c-7d69-465e-929d-0920857aedce", "name": "International Conference on Automated Software Engineering", "type": "conference", "alternate_names": ["Autom Softw Eng", "ASE", "Automated Software Engineering", "Int Conf Autom Softw Eng"], "url": "http://ase.informatik.uni-essen.de/"}, "title": "Mutation Analysis for Coq", "abstract": "Mutation analysis, which introduces artificial defects into software systems, is the basis of mutation testing, a technique widely applied to evaluate and enhance the quality of test suites. However, despite the deep analogy between tests and formal proofs, mutation analysis has seldom been considered in the context of deductive verification. We propose mutation proving, a technique for analyzing verification projects that use proof assistants. We implemented our technique for the Coq proof assistant in a tool dubbed mCoq. mCoq applies a set of mutation operators to Coq definitions of functions and datatypes, inspired by operators previously proposed for functional programming languages. mCoq then checks proofs of lemmas affected by operator application. To make our technique feasible in practice, we implemented several optimizations in mCoq such as parallel proof checking. We applied mCoq to several medium and large scale Coq projects, and recorded whether proofs passed or failed when applying different mutation operators. We then qualitatively analyzed the mutants, finding many instances of incomplete specifications. For our evaluation, we made several improvements to serialization of Coq files and even discovered a notable bug in Coq itself, all acknowledged by developers. We believe mCoq can be useful both to proof engineers for improving the quality of their verification projects and to researchers for evaluating proof engineering techniques.", "venue": "International Conference on Automated Software Engineering", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2019-11-01", "journal": {"name": "2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)", "pages": "539-551"}, "authors": [{"authorId": "145118978", "name": "Ahmet \u00c7elik"}, {"authorId": "2713883", "name": "Karl Palmskog"}, {"authorId": "1486447657", "name": "Marinela Parovic"}, {"authorId": "3358936", "name": "E. J. G. Arias"}, {"authorId": "2020926", "name": "Milo\u0161 Gligori\u0107"}], "citations": [{"paperId": "9f8ac6ee3760ab202e492c733362e5bfc6763934", "title": "Baldur: Whole-Proof Generation and Repair with Large Language Models"}, {"paperId": "455dcc6d88fac843c0717f60af2a065feaa7f248", "title": "Passport: Improving Automated Formal Verification Using Identifiers"}, {"paperId": "1109f36c836a37a896d15a1ef7f795eec0f364d1", "title": "Mutation Testing for Rule-Based Verification of Railway Signaling Data"}, {"paperId": "abbb400e72e5061144947677b603ad1cdc80cdb9", "title": "How much Specification is Enough? Mutation Analysis for Software Contracts"}, {"paperId": "2bb4a40c8f8e0cfc3dc110af92a9e46974e9dd86", "title": "MCoq: Mutation Analysis for Coq Verification Projects"}, {"paperId": "2acea022ffcd41edaa5ce08fa94e7e5c7ac8a05a", "title": "MutantChick: Type-Preserving Mutation Analysis for Coq"}]}
