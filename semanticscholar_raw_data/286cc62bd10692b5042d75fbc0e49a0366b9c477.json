{"paperId": "286cc62bd10692b5042d75fbc0e49a0366b9c477", "publicationVenue": {"id": "8113a511-e0d9-4231-a1bc-0bf5d0212a4e", "name": "Symposium on the Theory of Computing", "type": "conference", "alternate_names": ["Symp Theory Comput", "STOC"], "url": "http://acm-stoc.org/"}, "title": "Fully dynamic approximation of LIS in polylogarithmic time", "abstract": "We revisit the problem of maintaining the longest increasing subsequence (LIS) of an array under (i) inserting an element, and (ii) deleting an element of an array. In a recent breakthrough, Mitzenmacher and Seddighin [STOC 2020] designed an algorithm that maintains an O((1/\u0454)O(1/\u0454))-approximation of LIS under both operations with worst-case update time \u00d5(n\u0454), for any constant \u0454>0 (\u00d5 hides factors polynomial in logn, where n is the length of the input). We exponentially improve on their result by designing an algorithm that maintains an (1+\u0454) approximation of LIS under both operations with worst-case update time \u00d5(\u0454\u22125). Instead of working with the grid packing technique introduced by Mitzenmacher and Seddighin, we take a different approach building on a new tool that might be of independent interest: LIS sparsification. A particularly interesting consequence of our result is an improved solution for the so-called Erd\u0151s-Szekeres partitioning, in which we seek a partition of a given permutation of {1,2,\u2026,n} into O(\u221an) monotone subsequences. This problem has been repeatedly stated as one of the natural examples in which we see a large gap between the decision-tree complexity and algorithmic complexity. The result of Mitzenmacher and Seddighin implies an O(n1+\u0454) time solution for this problem, for any \u0454>0. Our algorithm (in fact, its simpler decremental version) further improves this to \u00d5(n).", "venue": "Symposium on the Theory of Computing", "year": 2020, "fieldsOfStudy": ["Mathematics", "Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2020-11-19", "journal": {"name": "Proceedings of the 53rd Annual ACM SIGACT Symposium on Theory of Computing"}, "authors": [{"authorId": "1683786", "name": "Pawe\u0142 Gawrychowski"}, {"authorId": "1565553434", "name": "Wojciech Janczewski"}], "citations": [{"paperId": "d0248b1293fc26a9f1b0a06f184e9a5d44795b1f", "title": "Range Longest Increasing Subsequence and its Relatives: Beating Quadratic Barrier and Approaching Optimality"}, {"paperId": "6a654cd85d875a6e6aef2227bbf3a8a9a61f38cf", "title": "Streaming and Query Once Space Complexity of Longest Increasing Subsequence"}, {"paperId": "08034a0a533e1a25693970c6f6f04ad8f429c3bc", "title": "Approximating Edit Distance in the Fully Dynamic Model"}, {"paperId": "e1e6b928e5c27f067aabdc34233f29fb4a378246", "title": "Dynamic Subset Sum with Truly Sublinear Processing Time"}, {"paperId": "4e14648b99f2f7f3a3f11da1ab93d4155e3579d9", "title": "Sublinear Dynamic Interval Scheduling (on one or multiple machines)"}, {"paperId": "b669c4a00d5fcda97d38519ca07ab695a4c10120", "title": "Dynamic Suffix Array with Sub-linear update time and Poly-logarithmic Lookup Time"}, {"paperId": "475af2fc6bb7b11e3853f8587c5fc3378e614f41", "title": "Estimating the Longest Increasing Subsequence in Nearly Optimal Time"}, {"paperId": "05326dc022363de71a4e4150bffb4a2e01988fa5", "title": "Conditional Lower Bounds for Variants of Dynamic LIS"}, {"paperId": "a82d256338a485b2752ad0c906a32c042b75a0a1", "title": "Dynamic Longest Increasing Subsequence and the Erd\u00f6s-Szekeres Partitioning Problem"}, {"paperId": "561a0f4373b75b11adbfeded8aef19d15431b82e", "title": "Improved dynamic algorithms for longest increasing subsequence"}, {"paperId": "a4f5c31d79379a946e0a6172342617ab4f423728", "title": "Erd\u00f6s-Szekeres Partitioning Problem"}, {"paperId": "79798dabf9f9031fa69b5af5940228a59c6226af", "title": "Finding Monotone Patterns in Sublinear Time, Adaptively"}]}
