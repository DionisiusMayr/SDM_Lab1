{"paperId": "2001e952a7453c417e52d6959c2f008fa9555a23", "publicationVenue": {"id": "711c7c92-e80f-40f2-9459-e1dfb9c54cd7", "name": "Theory and Practice of Logic Programming", "type": "journal", "alternate_names": ["Theory Pract Log Program"], "issn": "1471-0684", "url": "https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming", "alternate_urls": ["http://journals.cambridge.org/TLP"]}, "title": "A Case for Stale Synchronous Distributed Model for Declarative Recursive Computation", "abstract": "Abstract A large class of traditional graph and data mining algorithms can be concisely expressed in Datalog, and other Logic-based languages, once aggregates are allowed in recursion. In fact, for most BigData algorithms, the difficult semantic issues raised by the use of non-monotonic aggregates in recursion are solved by Pre-Mappability ( \n${\\cal P}$\n reM), a property that assures that for a program with aggregates in recursion there is an equivalent aggregate-stratified program. In this paper we show that, by bringing together the formal abstract semantics of stratified programs with the efficient operational one of unstratified programs, \n$\\[{\\cal P}\\]$\n reM can also facilitate and improve their parallel execution. We prove that \n$\\[{\\cal P}\\]$\n reM-optimized lock-free and decomposable parallel semi-naive evaluations produce the same results as the single executor programs. Therefore, \n$\\[{\\cal P}\\]$\n reM can be assimilated into the data-parallel computation plans of different distributed systems, irrespective of whether these follow bulk synchronous parallel (BSP) or asynchronous computing models. In addition, we show that non-linear recursive queries can be evaluated using a hybrid stale synchronous parallel (SSP) model on distributed environments. After providing a formal correctness proof for the recursive query evaluation with \n$\\[{\\cal P}\\]$\n reM under this relaxed synchronization model, we present experimental evidence of its benefits.", "venue": "Theory and Practice of Logic Programming", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2019-07-24", "journal": {"name": "Theory and Practice of Logic Programming", "pages": "1056 - 1072", "volume": "19"}, "authors": [{"authorId": "2499545", "name": "Ariyam Das"}, {"authorId": "1712630", "name": "C. Zaniolo"}], "citations": [{"paperId": "5b01f1caeef7c93cf01f9d4ebc0af5efd8acc96e", "title": "Optimizing Parallel Recursive Datalog Evaluation on Multicore Machines"}, {"paperId": "740c9893c743527db7a25b121e47e4d44157c0a6", "title": "Parallel Logic Programming: A Sequel"}, {"paperId": "893ed788c9ca7b160fba2f3001141a0b70a0b479", "title": "Formal semantics and high performance in declarative machine learning using Datalog"}, {"paperId": "d558f0a3332c47f0f9dd950b87730b8432604e08", "title": "Proceedings 36th International Conference on Logic Programming (Technical Communications)"}, {"paperId": "c1462eb510849b070bc39335d3ae2911e74fff57", "title": "Monotonic Properties of Completed Aggregates in Recursive Queries"}, {"paperId": "5741548afb3e3e0b74194c0963187e41f42e753d", "title": "Proceedings 35th International Conference on Logic Programming (Technical Communications)"}, {"paperId": "1a14d0607ca2ac758636538d47581f1a911616fb", "title": "BigData Applications from Graph Analytics to Machine Learning by Aggregates in Recursion"}, {"paperId": "f90266f30629cf4282b003bace50a8cb45556422", "title": "Introduction to the 35th International Conference on Logic Programming Special Issue"}, {"paperId": "5ba1e2d13cc12e8ebc27255bcef292347d639e47", "title": "Developing Big-Data Application as Queries: an Aggregate-Based approach"}]}
