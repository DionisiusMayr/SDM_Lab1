{"paperId": "02ae9f49ff22f9ce95b636fcdc07a29b606f194a", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "DIAMetrics", "abstract": "This paper introduces DIAMetrics: a novel framework for end-to-end benchmarking and performance monitoring of query engines. DIAMetrics consists of a number of components supporting tasks such as automated workload summarization, data anonymization, benchmark execution, monitoring, regression identification, and alerting. The architecture of DIAMetrics is highly modular and supports multiple systems by abstracting their implementation details and relying on common canonical formats and pluggable software drivers. The end result is a powerful unified framework that is capable of supporting every aspect of benchmarking production systems and workloads. DIAMetrics has been developed in Google and is being used to benchmark various internal query engines. In this paper, we give an overview of DIAMetrics and discuss its design and implementation. Furthermore, we provide details about its deployment and example use cases. Given the variety of supported systems and use cases within Google, we argue that its core concepts can be used more widely to enable comparative end-to-end benchmarking in other industrial environments.", "venue": "Proceedings of the VLDB Endowment", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle", "Review"], "publicationDate": "2020-08-01", "journal": {"name": "ACM SIGMOD Record", "pages": "24 - 31", "volume": "50"}, "authors": [{"authorId": "3202556", "name": "Anja Gruenheid"}, {"authorId": "34691891", "name": "Shaleen Deep"}, {"authorId": "2104609002", "name": "Kruthi Nagaraj"}, {"authorId": "1932329543", "name": "Hiro Naito"}, {"authorId": "5151034", "name": "J. Naughton"}, {"authorId": "1699540", "name": "Stratis Viglas"}], "citations": [{"paperId": "db243da6bf0387a5ba4ce9b80e2af96398aba70e", "title": "DoppelGanger++: Towards Fast Dependency Graph Generation for Database Replay"}, {"paperId": "8802e7ed7ff24334d9ef1492f9497b63b27352a5", "title": "LST-Bench: Benchmarking Log-Structured Tables in the Cloud"}, {"paperId": "24b9f1050f8fed6a97d6ef5acb27e907a3d0e858", "title": "Using eBPF for Database Workload Tracing: An Explorative Study"}, {"paperId": "51852be3ba09f1053e301173c68772aa891c87d9", "title": "Doppler: Automated SKU Recommendation in Migrating SQL Workloads to the Cloud"}, {"paperId": "9a3fba6d5138d7ec0d7a22675647797ae6bb4e0a", "title": "DBMS Annihilator: A High-Performance Database Workload Generator in Action"}, {"paperId": "16ea9fac37a3af9f5db8cc0ef335ee9e6648051f", "title": "DeepBench: Benchmarking JSON Document Stores"}, {"paperId": "a48f9e74f5f0f60e033c8c290156243c16ece5c0", "title": "DeepBench"}, {"paperId": "d53ef63ada540f20ebbf28aa47072e36c8faf024", "title": "LearnedSQLGen: Constraint-aware SQL Generation using Reinforcement Learning"}, {"paperId": "6ecd255128d9a4c7805f43b48af0f22b0cf8a001", "title": "Journey of Migrating Millions of Queries on The Cloud"}, {"paperId": "e6afc608c390465d796ff0a31141f956c14ea3db", "title": "Application-Oriented Workload Generation for Transactional Database Performance Evaluation"}, {"paperId": "e97b6af9f64f73358f706d34a7433d207f57f40e", "title": "Towards a Benchmark for Learned Systems"}, {"paperId": "02d1e93f01004f7970687a2a66815a290a388d71", "title": "Comprehensive and Efficient Workload Compression"}]}
