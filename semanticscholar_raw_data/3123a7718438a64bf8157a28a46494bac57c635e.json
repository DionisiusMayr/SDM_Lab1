{"paperId": "3123a7718438a64bf8157a28a46494bac57c635e", "publicationVenue": {"id": "289bfdda-eab3-4c9a-97be-ef1e0f9ddfc0", "name": "International Symposium on Software Testing and Analysis", "type": "conference", "alternate_names": ["ISSTA", "Int Symp Softw Test Anal"], "url": "https://dl.acm.org/conference/issta"}, "title": "Dependent-test-aware regression testing techniques", "abstract": "Developers typically rely on regression testing techniques to ensure that their changes do not break existing functionality. Unfortunately, these techniques suffer from flaky tests, which can both pass and fail when run multiple times on the same version of code and tests. One prominent type of flaky tests is order-dependent (OD) tests, which are tests that pass when run in one order but fail when run in another order. Although OD tests may cause flaky-test failures, OD tests can help developers run their tests faster by allowing them to share resources. We propose to make regression testing techniques dependent-test-aware to reduce flaky-test failures. To understand the necessity of dependent-test-aware regression testing techniques, we conduct the first study on the impact of OD tests on three regression testing techniques: test prioritization, test selection, and test parallelization. In particular, we implement 4 test prioritization, 6 test selection, and 2 test parallelization algorithms, and we evaluate them on 11 Java modules with OD tests. When we run the orders produced by the traditional, dependent-test-unaware regression testing algorithms, 82% of human-written test suites and 100% of automatically-generated test suites with OD tests have at least one flaky-test failure. We develop a general approach for enhancing regression testing algorithms to make them dependent-test-aware, and apply our approach to 12 algorithms. Compared to traditional, unenhanced regression testing algorithms, the enhanced algorithms use provided test dependencies to produce orders with different permutations or extra tests. Our evaluation shows that, in comparison to the orders produced by unenhanced algorithms, the orders produced by enhanced algorithms (1) have overall 80% fewer flaky-test failures due to OD tests, and (2) may add extra tests but run only 1% slower on average. Our results suggest that enhancing regression testing algorithms to be dependent-test-aware can substantially reduce flaky-test failures with only a minor slowdown to run the tests.", "venue": "International Symposium on Software Testing and Analysis", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["Book", "JournalArticle", "Conference"], "publicationDate": "2020-07-13", "journal": {"name": "Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis"}, "authors": [{"authorId": "2055478258", "name": "Wing Lam"}, {"authorId": "40128780", "name": "A. Shi"}, {"authorId": "101847684", "name": "Reed Oei"}, {"authorId": "50202676", "name": "Sai Zhang"}, {"authorId": "6698059", "name": "Michael D. Ernst"}, {"authorId": "145906750", "name": "Tao Xie"}], "citations": [{"paperId": "9d205a80503a005fe6b3ea37d6e1f83f770f97d0", "title": "WEFix: Intelligent Automatic Generation of Explicit Waits for Efficient Web End-to-End Flaky Tests"}, {"paperId": "73a349f072923cfc6ca96af0f2dd703bc26b51ee", "title": "Do Automatic Test Generation Tools Generate Flaky Tests?"}, {"paperId": "33758a8ebb94bb8819376d2cf604d3072b65fc67", "title": "Test flakiness' causes, detection, impact and responses: A multivocal review"}, {"paperId": "3e5700be0abe9a35c24214dc0e189762d4aeddae", "title": "Systematically Producing Test Orders to Detect Order-Dependent Flaky Tests"}, {"paperId": "ab83f72cb954f22c490d74f13fbe3cd10fe790e4", "title": "FlakyFix: Using Large Language Models for Predicting Flaky Test Fix Categories and Test Code Repair"}, {"paperId": "7a64954fa236aa7954fa27ff38531e36f092cf72", "title": "Orchestration Strategies for Regression Test Suites"}, {"paperId": "576644ddbe438a3afe736b52da9d8850cd6effbb", "title": "Empirically evaluating flaky test detection techniques combining test case rerunning and machine learning models"}, {"paperId": "bf2526fc177d072687b6aea37ea4ab197b0d40db", "title": "Test Flakiness' Causes, Detection, Impact and Responses: A Multivocal Review"}, {"paperId": "d1fa746be80fdf9a3110a34dc882f8c249f8afba", "title": "Importance of Cyber Security in Software Quality Assurance"}, {"paperId": "c27b4be96cd1ff2ae0d5f101cfaedf6ac58d73a1", "title": "API Message-Driven Regression Testing Framework"}, {"paperId": "e9a71e07318e4a27880aaaa5e9212332fe53877b", "title": "Evolution-aware detection of order-dependent flaky tests"}, {"paperId": "cfc3ab3380ddb89cceb5a84cce9cc33a7466937c", "title": "An Empirical Study of Flaky Tests in JavaScript"}, {"paperId": "d66d45796f450ba72d787e3269a50c52fe97b045", "title": "Test Case Prioritization Using Partial Attention"}, {"paperId": "cf6230ed8b600c38d9ca4eaadde6e1ad6fac3e16", "title": "Preempting Flaky Tests via Non-Idempotent-Outcome Tests"}, {"paperId": "28e418b8854c51638f518135adb8bc5eeacf6226", "title": "FlakiMe: Laboratory-Controlled Test Flakiness Impact Assessment"}, {"paperId": "3c0e7f545ece4938931623b25e8dc30b6cbefe09", "title": "Surveying the Developer Experience of Flaky Tests"}, {"paperId": "bc6f480bfc402e0d94eb4649296949778902447f", "title": "Repairing Order-Dependent Flaky Tests via Test Generation"}, {"paperId": "cb947186ec73e398ad5a89459c73353dade83412", "title": "Evaluating Features for Machine Learning Detection of Order- and Non-Order-Dependent Flaky Tests"}, {"paperId": "a7f1a09ae2fa90bda26374a1bc72a5d7bf4c77dc", "title": "A Taxonomy of Information Attributes for Test Case Prioritisation: Applicability, Machine Learning"}, {"paperId": "7006c481e07cf0c71d93d82f8cfbafc5ffac8913", "title": "Flakify: A Black-Box, Language Model-Based Predictor for Flaky Tests"}, {"paperId": "bdab29415be76e68d3c98defb72fc882d9daaf42", "title": "Empirically evaluating readily available information for regression test optimization in continuous integration"}, {"paperId": "54f976099f97380974db70da27a37ee53547b5a2", "title": "MuKEA-TCP: A Mutant Kill-based Local Search Augmented Evolutionary Algorithm Approach for Test Case Prioritization"}, {"paperId": "adfe5459ba7a985a77637a0cb315af5232b1f844", "title": "TECHNOLOGY BASED OVERVIEW ON SOFTWARE TESTING TRENDS, TECHNIQUES, AND CHALLENGES"}, {"paperId": "1a7bf5dd47251b428bba02b9b911075747a63f4f", "title": "On the Use of Mutation in Injecting Test Order-Dependency"}, {"paperId": "1cb69de1871c4ec1a3fc863a8bb07da93183ca44", "title": "Probabilistic and Systematic Coverage of Consecutive Test-Method Pairs for Detecting Order-Dependent Flaky Tests"}, {"paperId": "1b00a175d8f0c5cc39332d18615860fa20850854", "title": "Hansie: Hybrid and consensus regression test prioritization"}, {"paperId": "b992fec7cd0882573cdddb6854005b03bbb1d88d", "title": "Understanding Reproducibility and Characteristics of Flaky Tests Through Test Reruns in Java Projects"}, {"paperId": "c86951174e28d0021730edbd431f0213124c5d98", "title": "Application of the Law of Minimum and Dissimilarity Analysis to Regression Test Case Prioritization"}, {"paperId": "29a0784a47c9dfae299e44f22b5a4f903ab03a7b", "title": "Optimization of Test Case Prioritization Using Automatic Dependency Detection"}]}
