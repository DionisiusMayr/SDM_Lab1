{"paperId": "d9533229acc44ee93939d5968bfaba99e8de1f9f", "publicationVenue": {"id": "7f22f2c3-81fc-4aa8-8501-b1d58b193fa5", "name": "Information Technology Convergence and Services", "type": "conference", "alternate_names": ["Innov Theor Comput Sci", "ITCS ", "Inf Technol Converg Serv", "Information Technology and Computer Science", "Inf Technol Comput Sci", "Conf Innov Theor Comput Sci", "Conference on Innovations in Theoretical Computer Science", "Innovations in Theoretical Computer Science", "ITCS"], "url": "http://itcs-conf.org/"}, "title": "Beating the Folklore Algorithm for Dynamic Matching", "abstract": "The maximum matching problem in dynamic graphs subject to edge updates (insertions and deletions) has received much attention over the last few years; a multitude of approximation/time tradeoffs were obtained, improving upon the folklore algorithm, which maintains a maximal (and hence $2$-approximate) matching in $O(n)$ worst-case update time in $n$-node graphs. We present the first deterministic algorithm which outperforms the folklore algorithm in terms of {\\em both} approximation ratio and worst-case update time. Specifically, we give a $(2-\\Omega(1))$-approximate algorithm with $O(m^{3/8})=O(n^{3/4})$ worst-case update time in $n$-node, $m$-edge graphs. For sufficiently small constant $\\epsilon>0$, no deterministic $(2+\\epsilon)$-approximate algorithm with worst-case update time $O(n^{0.99})$ was known. Our second result is the first deterministic $(2+\\epsilon)$-approximate weighted matching algorithm with $O_\\epsilon(1)\\cdot O(\\sqrt[4]{m}) = O_\\epsilon(1)\\cdot O(\\sqrt{n})$ worst-case update time. Our main technical contributions are threefold: first, we characterize the tight cases for \\emph{kernels}, which are the well-studied matching sparsifiers underlying much of the $(2+\\epsilon)$-approximate dynamic matching literature. This characterization, together with multiple ideas -- old and new -- underlies our result for breaking the approximation barrier of $2$. Our second technical contribution is the first example of a dynamic matching algorithm whose running time is improved due to improving the \\emph{recourse} of other dynamic matching algorithms. Finally, we show how to use dynamic bipartite matching algorithms as black-box subroutines for dynamic matching in general graphs without incurring the natural $\\frac{3}{2}$ factor in the approximation ratio which such approaches naturally incur.", "venue": "Information Technology Convergence and Services", "year": 2021, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2021-06-18", "journal": {"name": "ArXiv", "volume": "abs/2106.10321"}, "authors": [{"authorId": "71436953", "name": "M. Roghani"}, {"authorId": "144638930", "name": "A. Saberi"}, {"authorId": "1965693", "name": "David Wajc"}], "citations": [{"paperId": "becc37ec04b30a04573eb555fc43eead669ff574", "title": "On Approximate Fully-Dynamic Matching and Online Matrix-Vector Multiplication"}, {"paperId": "159d27f6fc10e0084fb491a2ca77b99acee15c6e", "title": "Dynamic (1+\u03f5)-Approximate Matching Size in Truly Sublinear Update Time"}, {"paperId": "d9939c1069f0121ec03a41a5df0ac58147960c1f", "title": "Robust Sparsification for Matroid Intersection with Applications"}, {"paperId": "f1cbb99d519b0c3a705de11299929bab35d7383e", "title": "Fully Dynamic Matching: (2-\u221a2)-Approximation in Polylog Update Time"}, {"paperId": "00913874bfcff647bd00388d55c8cf05b03863d1", "title": "Improved Algorithms for White-Box Adversarial Streams"}, {"paperId": "aac8d79b81db48eacbc9eab790df65d78ebc8ccd", "title": "Near-Optimal Dynamic Rounding of Fractional Matchings in Bipartite Graphs"}, {"paperId": "3633d4ef3b08453bef8c5b1fbc28d8e4f29679c1", "title": "Incremental $(1-\\epsilon)$-approximate dynamic matching in $O(poly(1/\\epsilon))$ update time"}, {"paperId": "8d4075482754bb76cd7b3792ef6a443db3ab9720", "title": "Dynamic $(1+\\epsilon)$-Approximate Matching Size in Truly Sublinear Update Time"}, {"paperId": "30e90fe524783fb27157ada5ad1a72111f0c6d14", "title": "Dynamic Maxflow via Dynamic Interior Point Methods"}, {"paperId": "f7b3523009643f3354e76378fd94f576864458dd", "title": "Nearly Optimal Communication and Query Complexity of Bipartite Matching"}, {"paperId": "3477ac98892f4507bdc2dd80829e85e950028763", "title": "On Regularity Lemma and Barriers in Streaming and Dynamic Matching"}, {"paperId": "424f605f80124bbe058cd7e3f532ffa0afd7394b", "title": "Dynamic Algorithms for Maximum Matching Size"}, {"paperId": "fa0c5703b9229403da2f3ebdd37c80045e1eb4f1", "title": "Dynamic Matching with Better-than-2 Approximation in Polylogarithmic Update Time"}, {"paperId": "553464c3771b245217fafd4b7451e85a4289ba2f", "title": "Decremental Matching in General Graphs"}, {"paperId": "6fea58dbc97782243ac3d040c4e01492da141207", "title": "The White-Box Adversarial Data Stream Model"}, {"paperId": "c6ffb2dfa27e09206fce59d4c478561182e33354", "title": "New Trade-Offs for Fully Dynamic Matching via Hierarchical EDCS"}, {"paperId": "a1b84e85d9ff613bd3901079ec1c7c2074112061", "title": "Deterministic Dynamic Matching in Worst-Case Update Time"}, {"paperId": "c315cf8997989689fbe50fd63831f043db84115f", "title": "Maintaining an EDCS in General Graphs: Simpler, Density-Sensitive and with Worst-Case Time Bounds"}, {"paperId": "090d0b8589cc0e0f1a9d6311d9201b76abaf1ccb", "title": "Recent Advances in Fully Dynamic Graph Algorithms \u2013 A Quick Reference Guide"}, {"paperId": "6fb035db0d69d71a811804902bffdbef88c551e3", "title": "Incremental (1 \u2212 \u03b5 ) -Approximate Dynamic Matching in O (poly(1 /\u03b5 )) Update Time"}, {"paperId": "8ae9d74770d76932e0371712484996fdc61d5d61", "title": "Batch Dynamic To Worst Case Update Time 3 . 1 k-Batch Amortized Update Time Dynamic Algorithm"}, {"paperId": "f6a46d2000f1dcfd1d3b9cbce4383cb011216e54", "title": "Improving update times of dynamic matching algorithms from amortized to worst case"}]}
