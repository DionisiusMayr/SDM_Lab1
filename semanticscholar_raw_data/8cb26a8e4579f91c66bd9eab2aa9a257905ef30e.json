{"paperId": "8cb26a8e4579f91c66bd9eab2aa9a257905ef30e", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Providing Streaming Joins as a Service at Facebook", "abstract": "\n Stream processing applications reduce the latency of batch data pipelines and enable engineers to quickly identify production issues. Many times, a service can log data to distinct streams, even if they relate to the same real-world event (e.g., a search on Facebook's search bar). Furthermore, the logging of related events can appear on the server side with different delay, causing one stream to be significantly behind the other in terms of logged\n event times\n for a given log entry. To be able to stitch this information together with\n low latency\n , we need to be able to\n join\n two different streams where each stream may have its own characteristics regarding the degree in which its data is\n out-of-order\n . Doing so in a streaming fashion is challenging as a join operator consumes lots of memory, especially with significant data volumes. This paper describes an end-to-end streaming join service that addresses the challenges above through a streaming join operator that uses an adaptive stream synchronization algorithm that is able to handle the different distributions we observe in real-world streams regarding their event times. This synchronization scheme paces the parsing of new data and reduces overall operator memory footprint while still providing high accuracy. We have integrated this into a streaming SQL system and have successfully reduced the latency of several batch pipelines using this approach.\n", "venue": "Proceedings of the VLDB Endowment", "year": 2018, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2018-08-01", "journal": {"name": "Proc. VLDB Endow.", "pages": "1809-1821", "volume": "11"}, "authors": [{"authorId": "1404554880", "name": "Gabriela Jacques-Silva"}, {"authorId": "2065847514", "name": "Ran Lei"}, {"authorId": "40227618", "name": "Luwei Cheng"}, {"authorId": "1720743567", "name": "Guoqiang Jerry Chen"}, {"authorId": "51189227", "name": "Kuen Ching"}, {"authorId": "2178033", "name": "Ta-Hsiung Hu"}, {"authorId": "1720863595", "name": "Yuan Mei"}, {"authorId": "2093755996", "name": "Kevin Wilfong"}, {"authorId": "3347295", "name": "Rithin Shetty"}, {"authorId": "2067850282", "name": "Serhat Yilmaz"}, {"authorId": "1720841211", "name": "Anirban Banerjee"}, {"authorId": "1859792", "name": "B. Heintz"}, {"authorId": "1410442066", "name": "Shridar Iyer"}, {"authorId": "2056921090", "name": "Anshul Jaiswal"}], "citations": [{"paperId": "0a378fec0f20724abb104361a58260d43babafd8", "title": "Nereus: A Distributed Stream Band Join System With Adaptive Range Partitioning"}, {"paperId": "d147d89a8eeff1f5b0380aeb7881388be9fea5e6", "title": "EdgeServe: A Streaming System for Decentralized Model Serving"}, {"paperId": "f88cecf1ee0d720f47cbbd5c10ea27d5f84b36dd", "title": "Rethinking Stateful Stream Processing with RDMA"}, {"paperId": "3f0ae66975dce667aead28a68532f3f00494e93e", "title": "Revisiting the Design of Parallel Stream Joins on Trusted Execution Environments"}, {"paperId": "f9c4fc874e97815b91ab049f6cbc69f0eab90c4f", "title": "Whale: Efficient One-to-Many Data Partitioning in RDMA-Assisted Distributed Stream Processing Systems"}, {"paperId": "cfc14fba96834b03bb4d169240039f340b0d8935", "title": "An Energy-Efficient Stream Join for the Internet of Things"}, {"paperId": "04aa0bed274dd3ebf9e14359a01db9e5643a10ab", "title": "Parallelizing Intra-Window Join on Multicores: An Experimental Study"}, {"paperId": "93399eb3eefca171db3d055e7d4b650a96e6592a", "title": "Klink: Progress-Aware Scheduling for Streaming Data Systems"}, {"paperId": "4791e729dd607cfef78aa5a4676df31e276975bf", "title": "Aurochs: An Architecture for Dataflow Threads"}, {"paperId": "ea28372c02f184b056ec70d8395a7de80a728580", "title": "Rhino: Efficient Management of Very Large Distributed State for Stream Processing Engines"}, {"paperId": "fde5bc70cbee7b7cffca2448c81aa6238a424971", "title": "Leveraging Watermarks to Improve Performance of Streaming Systems"}, {"paperId": "5be45c53fbee486daed779c4d8a632f398f1883b", "title": "Turbine: Facebook\u2019s Service Management Platform for Stream Processing"}, {"paperId": "3f60be580e4b48e79017f79d04c90f26c22e8f77", "title": "AJoin: Ad-hoc Stream Joins at Scale"}, {"paperId": "2cd6bdc7e40a18976a92865be43b350bc83dd173", "title": "Scaling Out Multi-Way Stream Joins using Optimized, Iterative Probing"}, {"paperId": "c47c8b97fe98c4851155a592ef1d780e4a2b587c", "title": "Simois: A Scalable Distributed Stream Join System with Skewed Workloads"}, {"paperId": "3d5e9ba7b5e68a8aa86a0f0d587f4d0bdf348d34", "title": "Enactment of adaptation in data stream processing with latency implications - A systematic literature review"}, {"paperId": "75698d0fa3b98cb9eed3557fc04709e37452ad4c", "title": "FastJoin: A Skewness-Aware Distributed Stream Join System"}, {"paperId": "6fec7ea2dba611eb647e4fb08a9746bd60b7a835", "title": "Scalable Distributed Top-k Join Queries in Topic-Based Pub/Sub Systems"}, {"paperId": "ed8b176d882b6452c6ebc66b444868b560bd5793", "title": "Benchmarking Stream Join Algorithms on GPUs: A Framework and its Application to the State-of-the-art"}, {"paperId": "aa88341640c7406250496777306cc335ecbc7750", "title": "Ad-Hoc stream query processing"}]}
