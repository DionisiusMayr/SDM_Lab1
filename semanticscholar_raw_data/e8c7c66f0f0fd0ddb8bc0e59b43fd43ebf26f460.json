{"paperId": "e8c7c66f0f0fd0ddb8bc0e59b43fd43ebf26f460", "publicationVenue": {"id": "efa3ff7a-4d96-44a1-a022-a683408919b6", "name": "International Workshop on the Semantic Web", "type": "conference", "alternate_names": ["SemWeb", "Int Workshop Semantic Web"]}, "title": "Exploiting Wide Property Tables Empowered by Inverse Properties for Efficient Distributed SPARQL Query Evaluation", "abstract": ". Translating SPARQL to Spark SQL has been proposed to achieve better scalability in query evaluation. Recent investigations show that the database design for storing the RDF-graph plays a signi\ufb01cant role in the performance, due to intrinsic characteristics of Spark\u2019s computation model. The analysis points to the interesting fact that a Wide Property Table (WPT), a single-table design with one row for each subject and one column for each property, has very nice properties for storing RDF-graphs. In addition to WPT\u2019s simplicity, SPARQL queries, in particular those with many joins on subjects, are translated to an e\ufb03cient Spark execution plan. We aim to extend the WPT with inverse properties to broaden this bene\ufb01t to other kinds of queries. Thus, in this paper we propose a framework which can leverage one or a combination of WPTs extensions. Our experiments on a widely used benchmark reveal that a combination of three di\ufb00erent kinds of WPT together leads to the best performance for almost all query types but the linear-shaped ones.", "venue": "International Workshop on the Semantic Web", "year": 2019, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal": {"pages": "81-84"}, "authors": [{"authorId": "1915169", "name": "Guilherme Schievelbein"}, {"authorId": "3108054", "name": "Victor Anthony Arrascue Ayala"}, {"authorId": "1403844028", "name": "Fang Wei-Kleiner"}, {"authorId": "1809410", "name": "G. Lausen"}], "citations": [{"paperId": "dab0d18550f9f222ed675756bb6e783118de4a3d", "title": "FP-ExtVP: Accelerating Distributed SPARQL queries by Exploiting Load-adaptive Partitioning"}]}
