{"paperId": "85b5847268d9871deeed986ba9b2a85f151d086c", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "GYM: A Multiround Join Algorithm In MapReduce", "abstract": "Multiround algorithms are now commonly used in distributed data processing systems, yet the extent to which algorithms can benefit from running more rounds is not well understood. This paper answers this question for a spectrum of rounds for the problem of computing the equijoin of $n$ relations. Specifically, given any query $Q$ with width $\\w$, {\\em intersection width} $\\iw$, input size $\\mathrm{IN}$, output size $\\mathrm{OUT}$, and a cluster of machines with $M$ memory available per machine, we show that: \n(1) $Q$ can be computed in $O(n)$ rounds with $O(n\\frac{(\\mathrm{IN}^{\\w} + \\mathrm{OUT})^2}{M})$ communication cost. \n(2) $Q$ can be computed in $O(\\log(n))$ rounds with $O(n\\frac{(\\mathrm{IN}^{\\max(\\w, 3\\iw)} + \\mathrm{OUT})^2}{M})$ communication cost. \\end{itemize} Intersection width is a new notion of queries and generalized hypertree decompositions (GHDs) of queries we introduce to capture how connected the adjacent cyclic components of the GHDs are. \nWe achieve our first result by introducing a distributed and generalized version of Yannakakis's algorithm, called GYM. GYM takes as input any GHD of $Q$ with width $\\w$ and depth $d$, and computes $Q$ in $O(d + \\log(n))$ rounds and $O(n\\frac{(\\mathrm{IN}^{\\w} + \\mathrm{OUT})^2}{M})$ communication cost. We achieve our second result by showing how to construct GHDs of $Q$ with width $\\max(\\w, 3\\iw)$ and depth $O(\\log(n))$. We describe another technique to construct GHDs with longer widths and shorter depths, demonstrating a spectrum of tradeoffs one can make between communication and the number of rounds.", "venue": "arXiv.org", "year": 2014, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2014-10-15", "journal": {"name": "ArXiv", "volume": "abs/1410.4156"}, "authors": [{"authorId": "1698074", "name": "F. Afrati"}, {"authorId": "2185778", "name": "Manas R. Joglekar"}, {"authorId": "2114485554", "name": "C. R\u00e9"}, {"authorId": "1783781", "name": "S. Salihoglu"}, {"authorId": "1742391", "name": "J. Ullman"}], "citations": [{"paperId": "d0749a5d2bfc9fa36dc954b58387effa0cebe8fd", "title": "Cover or Pack: New Upper and Lower Bounds for Massively Parallel Joins"}, {"paperId": "4bce08d96d8334a97433d50d9dfe37e7ebec722c", "title": "Massively Parallel Join Algorithms"}, {"paperId": "66f47891e0a6cc747c2492c865f424ea47af55d1", "title": "Parallel Algorithms for Sparse Matrix Multiplication and Join-Aggregate Queries"}, {"paperId": "4e9b9e88a4a508ad044efdcc3a3518889de5d262", "title": "Complexity Analysis of Generalized and Fractional Hypertree Decompositions"}, {"paperId": "89aa5b3287b606fad2e6c8af49334ecc11358e2b", "title": "Scheduling MapReduce Jobs on Identical and Unrelated Processors"}, {"paperId": "db72007b8dee71bb8c261f14a098c9e9ff9fc6f7", "title": "Output-Optimal Massively Parallel Algorithms for Similarity Joins"}, {"paperId": "f295c583c977c87849119fee9580ab613f72c3f7", "title": "Instance and Output Optimal Parallel Algorithms for Acyclic Joins"}, {"paperId": "5dc40d4af5b4f7d45f5288470b9e07bc16f1cc28", "title": "Dependency Weighted Aggregation on Factorized Databases"}, {"paperId": "2ae90e850d721ff452156662968327eeb2c02ba6", "title": "EmptyHeaded"}, {"paperId": "5cccca1e8dc2e33c01364de198ed095cb58fbeb0", "title": "Semantic Optimization in Tractable Classes of Conjunctive Queries"}, {"paperId": "009513de244d4c428f4fe2d115bed6bcbd5c64f7", "title": "Scaling Out Continuous Multi-Way Theta-Joins"}, {"paperId": "4a790de4588c147903a61a50d484444bdb4d8822", "title": "Output-optimal Parallel Algorithms for Similarity Joins"}, {"paperId": "584dea44c9abc3833b69bf18abd87fce6fba86ab", "title": "Communication Cost in Parallel Query Evaluation: A Tutorial"}, {"paperId": "74b6f35af3813d7df4ea3c4f495210114269a48f", "title": "General and Fractional Hypertree Decompositions: Hard and Easy Cases"}, {"paperId": "f781f66620105cf2408c3d18f688604b7e0a5f02", "title": "Performance Evaluation for Distributed Join Based on MapReduce"}, {"paperId": "063227819c189992e1c579c8a5b9a68d2b8e50a4", "title": "GraphFrames: an integrated API for mixing graph and relational queries"}, {"paperId": "01538cba7e35da5c58d9e8dac235c1a2d5d453fe", "title": "AJAR: Aggregations and Joins over Annotated Relations"}, {"paperId": "f57783d5611989cb5f4e4eb2ff6b2e06bbadf7f2", "title": "Hypertree Decompositions: Questions and Answers"}, {"paperId": "cb2f9fa1b5314ed70d66e3c622d9bedbe68399c4", "title": "Parallel Evaluation of Multi-Semi-Joins"}, {"paperId": "9d9f8484280aaea204082512208fda8be5e0c86f", "title": "Greedy Strategies and Larger Islands of Tractability for Conjunctive Queries and Constraint Satisfaction Problems"}, {"paperId": "07a7841773903649c32d010211996988a1521341", "title": "Scheduling MapReduce Jobs Under Multi-round Precedences"}, {"paperId": "38f5b25b0c2f640e2a1e0e5ee9babe237dc6f654", "title": "SharesSkew: An Algorithm to Handle Skew for Joins in MapReduce"}, {"paperId": "131e46775ce2df9a580538c4c9c7de3d7673aa80", "title": "Scalable algorithms for cloud-based Semantic Web data management. (Algorithmes passant a\u0300 l'e'chelle pour la gestion de donne'es du Web se'mantique sur les platformes cloud)"}, {"paperId": "38f171831c038d870fdf15e030189a969c263e48", "title": "Aggregations over Generalized Hypertree Decompositions"}, {"paperId": "86310e94a812abbd9e6f72bd1c688d516afb88a9", "title": "It\u2019s All a Matter of Degree"}, {"paperId": "043cf6a9e18cb499da540ffd58b37086158ffd68", "title": "From Theory to Practice: Efficient Join Query Evaluation in a Parallel Database System"}, {"paperId": "8ad79568e16d991b719cf84893c6b5bc8108ff9e", "title": "EmptyHeaded: A Relational Engine for Graph Processing"}, {"paperId": "da415da0b944b869e08b0c640a26446c2dba4c6d", "title": "An External-Memory Work-Depth Model and Its Applications to Massively Parallel Join Algorithms"}, {"paperId": "28ff78d962a936eaccf7ad15b24a018c15374c4f", "title": "Streaming HyperCube: A Massively Parallel Stream Join Algorithm"}, {"paperId": "4ebd1829974580aa15e056efc4e0a4bdb87ef1ab", "title": "Structural Decomposition Methods: Key Notions and Database Applications"}, {"paperId": "31e52b867742765568ddcf63e1f864b4eef34eaa", "title": "Euro-Par 2016: Parallel Processing"}, {"paperId": "dcb2925ea51341cdfbec9a4ca143c1e55a7986ae", "title": "GYM : A Multiround Join Algorithm In MapReduce And Its Analysis"}, {"paperId": "461dc70066239efe3e3e9ded688840aa85d5e916", "title": "Statement Algorithms and Systems for Massive-Scale Data Processing"}, {"paperId": "7f1297d3252e5f98b1b6f02386216bddd463d8b9", "title": "Query Processing for Massively Parallel Systems"}, {"paperId": "082c37763496102cb1b0592edd5aa51dedcef18e", "title": "Input Generated Code Set Repres . Execution EngineQuery Compiler"}]}
