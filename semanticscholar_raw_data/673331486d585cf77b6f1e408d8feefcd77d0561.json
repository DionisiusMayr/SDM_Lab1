{"paperId": "673331486d585cf77b6f1e408d8feefcd77d0561", "publicationVenue": {"id": "fcbcaf18-8ab1-43e1-a973-604bbc7e344e", "name": "Proceedings of the VLDB Endowment", "type": "journal", "alternate_names": ["Proceedings of The Vldb Endowment", "Proc VLDB Endow", "Proc Vldb Endow"], "issn": "2150-8097", "url": "http://dl.acm.org/toc.cfm?id=J1174", "alternate_urls": ["http://portal.acm.org/toc.cfm?CFID=21632689&CFTOKEN=99329904&WantType=Affiliated%20Organizations&coll=ACM&dl=ACM&id=J1174&idx=J1174&part=affil&title=VLDB%20Endowment&type=periodical"]}, "title": "Toward a Better Understanding and Evaluation of Tree Structures on Flash SSDs", "abstract": "Solid-state drives (SSDs) are extensively used to deploy persistent data stores, as they provide low latency random access, high write throughput, high data density, and low cost. Tree-based data structures are widely used to build persistent data stores, and indeed they lie at the backbone of many of the data management systems used in production and research today.\n We show that benchmarking a persistent tree-based data structure on an SSD is a complex process, which may easily incur subtle pitfalls that can lead to an inaccurate performance assessment. At a high-level, these pitfalls stem from the interaction of complex software running on complex hardware. On the one hand, tree structures implement internal operations that have non-trivial effects on performance. On the other hand, SSDs employ firmware logic to deal with the idiosyncrasies of the underlying flash memory, which are well known to also lead to complex performance dynamics.\n We identify seven benchmarking pitfalls using RocksDB and WiredTiger, two widespread implementations of an LSM-Tree and a B+Tree, respectively. We show that such pitfalls can lead to incorrect measurements of key performance indicators, hinder the reproducibility and the representativeness of the results, and lead to suboptimal deployments in production environments. We also provide guidelines on how to avoid these pitfalls to obtain more reliable performance measurements, and to perform more thorough and fair comparisons among different design points.", "venue": "Proceedings of the VLDB Endowment", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-06-08", "journal": {"name": "Proc. VLDB Endow.", "pages": "364-377", "volume": "14"}, "authors": [{"authorId": "33215555", "name": "Diego Didona"}, {"authorId": "33372120", "name": "Nikolas Ioannou"}, {"authorId": "145881292", "name": "R. Stoica"}, {"authorId": "7975384", "name": "K. Kourtis"}], "citations": [{"paperId": "9ca5b0305a74941915fad12091fd2cc45ccb3ac4", "title": "FlashAlloc: Dedicating Flash Blocks By Objects"}, {"paperId": "8822b9eed34a69b2655fa8a6d8a8c5a4a0ef1989", "title": "ACEing the Bufferpool Management Paradigm for Modern Storage Devices"}, {"paperId": "ea3786077ebf4e1be168ac079e170429cc78a938", "title": "Spooky: Granulating LSM-Tree Compactions Correctly"}, {"paperId": "e9043cff399478c9431392f144cffe998e9c610f", "title": "Dremel"}, {"paperId": "db27308e5b19f75c32a22a07283aa136fcbf1179", "title": "Understanding modern storage APIs: a systematic study of libaio, SPDK, and io_uring"}, {"paperId": "d21a533ec6144ae1b3b909a829bb0874e022fa45", "title": "Key-Value Stores on Flash Storage Devices: A Survey"}, {"paperId": "fa61780ec83fdc8889742f426470517d851e47c5", "title": "Enlightening Flash Storage to Stream Writes by Objects"}, {"paperId": "33f99ad363110a8e27834a6ac8ece3f67cac3544", "title": "A Parametric I/O Model for Modern Storage Devices"}, {"paperId": "c878c0af07dc28e657baff5f812a2c69992728db", "title": "An Experimental Analysis of the Use of Different Storage Technologies on a Relational DBMS"}, {"paperId": "a80e8c6fee40be712999c14b26460aa2e09638f2", "title": "Towards a General Framework for ML-based Self-tuning Databases"}]}
