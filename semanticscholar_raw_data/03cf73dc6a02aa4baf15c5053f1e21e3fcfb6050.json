{"paperId": "03cf73dc6a02aa4baf15c5053f1e21e3fcfb6050", "publicationVenue": {"id": "1901e811-ee72-4b20-8f7e-de08cd395a10", "name": "arXiv.org", "alternate_names": ["ArXiv"], "issn": "2331-8422", "url": "https://arxiv.org"}, "title": "OneStopTuner: An End to End Architecture for JVM Tuning of Spark Applications", "abstract": "Java is the backbone of widely used big data frameworks, such as Apache Spark, due to its productivity, portability from JVM-based execution, and support for a rich set of libraries. However, the performance of these applications can widely vary depending on the runtime flags chosen out of all existing JVM flags. Manually tuning these flags is both cumbersome and error-prone. Automated tuning approaches can ease the task, but current solutions either require considerable processing time or target a subset of flags to avoid time and space requirements. In this paper, we present OneStopTuner, a Machine Learning based novel framework for autotuning JVM flags. OneStopTuner controls the amount of data generation by leveraging batch mode active learning to characterize the user application. Based on the user-selected optimization metric, OneStopTuner then discards the irrelevant JVM flags by applying feature selection algorithms on the generated data. Finally, it employs sample efficient methods such as Bayesian optimization and regression guided Bayesian optimization on the shortlisted JVM flags to find the optimal values for the chosen set of flags. We evaluated OneStopTuner on widely used Spark benchmarks and compare its performance with the traditional simulated annealing based autotuning approach. We demonstrate that for optimizing execution time, the flags chosen by OneStopTuner provides a speedup of up to 1.35x over default Spark execution, as compared to 1.15x speedup by using the flag configurations proposed by simulated annealing. OneStopTuner was able to reduce the number of executions for data-generation by 70% and was able to suggest the optimal flag configuration 2.4x faster than the standard simulated annealing based approach, excluding the time for data-generation.", "venue": "arXiv.org", "year": 2020, "fieldsOfStudy": ["Computer Science"], "publicationTypes": ["JournalArticle"], "publicationDate": "2020-09-07", "journal": {"name": "ArXiv", "volume": "abs/2009.06374"}, "authors": [{"authorId": "80285140", "name": "V. Venktesh"}, {"authorId": "1943179683", "name": "Pooja B Bindal"}, {"authorId": "2064659742", "name": "Devesh Singhal"}, {"authorId": "1707477", "name": "A. Subramanyam"}, {"authorId": "2217152716", "name": "Vivek Kumar"}], "citations": [{"paperId": "d9b6d17c46a48cddbff9ef900e393b745813b48e", "title": "PTSSBench: a performance evaluation platform in support of automated parameter tuning of software systems"}, {"paperId": "9e34ccab67203c0765c9aa8cf83ad38c11e25ed7", "title": "Adaptive Batch Size Selection in Active Learning for Regression"}, {"paperId": "f90463dfa118a7e60059c8c3b523568e7df39b0d", "title": "CGPTuner: a Contextual Gaussian Process Bandit Approach for the Automatic Tuning of IT Configurations Under Varying Workload Conditions"}]}
